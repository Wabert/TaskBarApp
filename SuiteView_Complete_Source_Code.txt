
================================================================================
                    SUITEVIEW TASKBAR APPLICATION
                         COMPLETE SOURCE CODE
================================================================================

Export Information:
    Generated on: 2025-06-24 19:57:11
    Project Directory: C:\Users\rober\Documents\Code\TaskBarApp
    Export Tool: SuiteView Code Exporter v1.0

Description:
    This file contains the complete source code for the SuiteView Taskbar 
    Application - a customizable Windows taskbar replacement with quick links
    functionality, drag-and-drop support, and modern UI components.

Project Structure:
    • Main Application Files: main.py, taskbar.py
    • UI Components: ui_components.py, quick_links.py
    • Data Management: links_manager.py, config.py
    • Utilities: utils.py, browse_choice_dialog.py, restore_deskop.py
    • Configuration: requirements.txt, README.md

================================================================================


────────────────────────────────────────────────────────────────────────────────
FILE: README.md
────────────────────────────────────────────────────────────────────────────────
Path: README.md
Size: 718.0 B
Lines: 31 total, 26 non-empty
Characters: 688
Type: Project documentation and setup instructions
────────────────────────────────────────────────────────────────────────────────

# SuiteView Taskbar App

A simple, customizable taskbar app for Windows 11, built with PySide2.

## Features
- Always-on-top, borderless taskbar bar
- Two-tone green theme
- System tray integration
- Easy to extend with new buttons and features

## Setup
1. Install Python 3.8+
2. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```
3. Run the app:
   ```bash
   python main.py
   ```

## Packaging (Optional)
To create a standalone executable, install PyInstaller:
```bash
pip install pyinstaller
pyinstaller --onefile --windowed main.py
```

## Customization
- Add new buttons and features by editing `main.py`.
- Update colors and styles in the code as desired. 

────────────────────────────────────────────────────────────────────────────────
FILE: browse_choice_dialog.py
────────────────────────────────────────────────────────────────────────────────
Path: browse_choice_dialog.py
Size: 7.0 KB
Lines: 187 total, 153 non-empty
Characters: 6,939
Type: File/folder selection dialog
────────────────────────────────────────────────────────────────────────────────

   1: # browse_choice_dialog.py
   2: """
   3: Custom dialog for choosing between file and folder browsing
   4: Replaces messagebox with properly styled, topmost dialog
   5: """
   6: 
   7: import tkinter as tk
   8: from tkinter import filedialog
   9: from config import Colors, Fonts, Dimensions
  10: from ui_components import CustomDialog
  11: 
  12: class BrowseChoiceDialog(CustomDialog):
  13:     """Custom dialog for choosing between File or Folder browsing"""
  14:     
  15:     def __init__(self, parent):
  16:         super().__init__(parent, "Browse Type", width=350, height=350)
  17:         
  18:         self.choice_result = None  # Will store 'file', 'folder', or None
  19:         self.selected_path = None  # Will store the selected path
  20:         
  21:         # Make sure dialog stays on top of everything
  22:         self.attributes('-topmost', True)
  23:         self.lift()
  24:         self.focus_force()
  25:         
  26:         self.create_content()
  27:         self.create_buttons()
  28:         
  29:         # Bind keyboard shortcuts
  30:         self.bind('<F>', lambda e: self.choose_file())
  31:         self.bind('<f>', lambda e: self.choose_file())
  32:         self.bind('<D>', lambda e: self.choose_folder())
  33:         self.bind('<d>', lambda e: self.choose_folder())
  34:         self.bind('<Escape>', lambda e: self.cancel())
  35:     
  36:     def create_content(self):
  37:         """Create the dialog content"""
  38:         # Icon
  39:         icon_label = tk.Label(self.dialog_content, text="📁", bg=Colors.LIGHT_GREEN,
  40:                              fg=Colors.DARK_GREEN, font=('Arial', 24))
  41:         icon_label.pack(pady=10)
  42:         
  43:         # Main message
  44:         message_label = tk.Label(self.dialog_content, 
  45:                                text="What would you like to browse for?", 
  46:                                bg=Colors.LIGHT_GREEN, fg=Colors.BLACK,
  47:                                font=Fonts.DIALOG_LABEL, wraplength=300)
  48:         message_label.pack(pady=5)
  49:         
  50:         # Instructions
  51:         instruction_label = tk.Label(self.dialog_content, 
  52:                                    text="Choose File for documents, applications, etc.\nChoose Folder for directories", 
  53:                                    bg=Colors.LIGHT_GREEN, fg=Colors.DARK_GREEN,
  54:                                    font=(Fonts.DIALOG_LABEL[0], Fonts.DIALOG_LABEL[1] - 1),
  55:                                    justify=tk.CENTER)
  56:         instruction_label.pack(pady=5)
  57:     
  58:     def create_buttons(self):
  59:         """Create the choice buttons"""
  60:         # Make sure button frame is visible and has proper height
  61:         self.button_frame.configure(height=80)
  62:         self.button_frame.pack_propagate(False)
  63:         
  64:         button_container = tk.Frame(self.button_frame, bg=Colors.LIGHT_GREEN)
  65:         button_container.pack(expand=True, fill=tk.BOTH, pady=10)
  66:         
  67:         # File button (primary choice)
  68:         file_btn = tk.Button(button_container, text="File", 
  69:                            bg=Colors.DARK_GREEN, fg=Colors.WHITE,
  70:                            command=self.choose_file, 
  71:                            width=10, height=20,
  72:                            font=Fonts.DIALOG_BUTTON, 
  73:                            relief=tk.RAISED, bd=2,
  74:                            cursor='hand2')
  75:         file_btn.pack(side=tk.LEFT, padx=15, pady=10)
  76:         
  77:         # Folder button
  78:         folder_btn = tk.Button(button_container, text="Folder", 
  79:                              bg=Colors.MEDIUM_GREEN, fg=Colors.BLACK,
  80:                              command=self.choose_folder, 
  81:                              width=10, height=20,
  82:                              font=Fonts.DIALOG_BUTTON, 
  83:                              relief=tk.RAISED, bd=2,
  84:                              cursor='hand2')
  85:         folder_btn.pack(side=tk.LEFT, padx=15, pady=10)
  86:         
  87:         # Cancel button
  88:         cancel_btn = tk.Button(button_container, text="Cancel", 
  89:                              bg=Colors.INACTIVE_GRAY, fg=Colors.WHITE,
  90:                              command=self.cancel, 
  91:                              width=8, height=20,
  92:                              font=Fonts.DIALOG_BUTTON, 
  93:                              relief=tk.RAISED, bd=1)
  94:         cancel_btn.pack(side=tk.LEFT, padx=15, pady=10)
  95:         
  96:         # Set focus on File button (most common choice)
  97:         file_btn.focus_set()
  98:     
  99:     def choose_file(self):
 100:         """Handle file selection"""
 101:         self.choice_result = 'file'
 102:         
 103:         # Disable topmost and hide this dialog temporarily
 104:         self.attributes('-topmost', False)
 105:         self.withdraw()  # Hide this dialog temporarily
 106:         
 107:         # Use the parent window for the file dialog
 108:         try:
 109:             path = filedialog.askopenfilename(
 110:                 parent=self.parent,
 111:                 title="Select File",
 112:                 filetypes=[
 113:                     ("All Files", "*.*"),
 114:                     ("Executables", "*.exe"),
 115:                     ("Documents", "*.pdf;*.doc;*.docx;*.txt"),
 116:                     ("Spreadsheets", "*.xls;*.xlsx;*.csv"),
 117:                     ("Images", "*.png;*.jpg;*.jpeg;*.gif;*.bmp")
 118:                 ]
 119:             )
 120:             
 121:             if path:
 122:                 self.selected_path = path
 123:                 self.result = True
 124:             else:
 125:                 self.result = None
 126:                 
 127:         except Exception as e:
 128:             print(f"Error in file dialog: {e}")
 129:             self.result = None
 130:         
 131:         self.destroy()
 132:     
 133:     def choose_folder(self):
 134:         """Handle folder selection"""
 135:         self.choice_result = 'folder'
 136:                 
 137:         # Disable topmost and hide this dialog temporarily
 138:         self.attributes('-topmost', False)
 139:         self.withdraw()  # Hide this dialog temporarily
 140:         
 141:         # Use the parent window for the folder dialog
 142:         try:
 143:             path = filedialog.askdirectory(
 144:                 parent=self.parent,
 145:                 title="Select Folder"
 146:             )
 147:             
 148:             if path:
 149:                 self.selected_path = path
 150:                 self.result = True
 151:             else:
 152:                 self.result = None
 153:                 
 154:         except Exception as e:
 155:             print(f"Error in folder dialog: {e}")
 156:             self.result = None
 157:         
 158:         self.destroy()
 159:     
 160:     def cancel(self):
 161:         """Cancel the dialog"""
 162:         self.choice_result = None
 163:         self.selected_path = None
 164:         self.result = None
 165:         self.destroy()
 166:     
 167:     @classmethod
 168:     def get_path(cls, parent):
 169:         """
 170:         Show the browse choice dialog and return the selected path
 171:         
 172:         Returns:
 173:             tuple: (choice_type, selected_path) where choice_type is 'file', 'folder', or None
 174:         """
 175:         dialog = cls(parent)
 176:         
 177:         # Ensure dialog is visible and on top
 178:         dialog.deiconify()
 179:         dialog.lift()
 180:         dialog.attributes('-topmost', True)
 181:         dialog.focus_force()
 182:         dialog.grab_set()
 183:         
 184:         # Wait for dialog to complete
 185:         parent.wait_window(dialog)
 186:         
 187:         return dialog.choice_result, dialog.selected_path

────────────────────────────────────────────────────────────────────────────────
FILE: config.py
────────────────────────────────────────────────────────────────────────────────
Path: config.py
Size: 2.3 KB
Lines: 74 total, 64 non-empty
Characters: 2,286
Type: Application configuration and constants
────────────────────────────────────────────────────────────────────────────────

   1: # config.py
   2: """
   3: Configuration constants for SuiteView Taskbar Application
   4: Contains colors, sizes, paths, and other application settings
   5: """
   6: 
   7: from pathlib import Path
   8: 
   9: # Color Scheme (Two-Tone Green)
  10: class Colors:
  11:     DARK_GREEN = '#006600'      # Main taskbar, headers, borders
  12:     MEDIUM_GREEN = '#00AA00'    # Menu backgrounds, inactive elements  
  13:     LIGHT_GREEN = '#B3FFB3'     # Input fields, hover states, active elements (lighter green)
  14:     #LIGHT_GREEN = '#00CC00'
  15:     HOVER_GREEN = '#008800'     # Hover effects
  16:     INACTIVE_GRAY = '#666666'   # Cancel buttons, disabled elements
  17:     WHITE = '#FFFFFF'
  18:     BLACK = '#000000'
  19: 
  20:     WINDOW_HIDDEN = '#FF6666'      # Red tint for hidden windows
  21:     WINDOW_VISIBLE = '#66FF66'     # Green tint for visible windows
  22:     PINNED_SECTION_BG = '#004400'  # Darker green for pinned section
  23:     PIN_BUTTON_COLOR = '#FFFF00'   # Yellow for pin buttons
  24: 
  25: # Font Settings
  26: class Fonts:
  27:     TASKBAR_TITLE = ('Arial', 14, 'bold italic')
  28:     TASKBAR_BUTTON = ('Arial', 10)
  29:     MENU_HEADER = ('Arial', 10, 'bold')
  30:     MENU_ITEM = ('Arial', 8)
  31:     DIALOG_TITLE = ('Arial', 10, 'bold')
  32:     DIALOG_LABEL = ('Arial', 9)
  33:     DIALOG_BUTTON = ('Arial', 9)
  34:     WARNING_ICON = ('Arial', 20)
  35: 
  36: # Window Dimensions
  37: class Dimensions:
  38:     TASKBAR_HEIGHT = 40
  39:     MENU_MIN_WIDTH = 400
  40:     MENU_MIN_HEIGHT = 100
  41:     DIALOG_BUTTON_WIDTH = 8
  42:     DIALOG_PADDING = 10
  43: 
  44: # File Paths
  45: class Paths:
  46:     CONFIG_DIR = Path.home() / '.suiteview'
  47:     LINKS_FILE = CONFIG_DIR / 'links.json'
  48:     
  49:     @classmethod
  50:     def ensure_config_dir(cls):
  51:         """Ensure configuration directory exists"""
  52:         cls.CONFIG_DIR.mkdir(exist_ok=True)
  53: 
  54: # Windows API Constants
  55: class WindowsAPI:
  56:     SPI_SETWORKAREA = 0x002F
  57:     SPI_GETWORKAREA = 0x0030
  58:     HWND_TOPMOST = -1
  59:     SWP_NOMOVE = 0x0002
  60:     SWP_NOSIZE = 0x0001
  61:     SPIF_SENDCHANGE = 0x0002
  62: 
  63: # Default Categories for Links
  64: DEFAULT_CATEGORIES = ["Quick Links", "Applications", "Folders", "Websites"]
  65: 
  66: # Application Settings
  67: class Settings:
  68:     APP_NAME = "SuiteView"
  69:     VERSION = "2.0"
  70:     TASKBAR_OPACITY = 0.98
  71:     MENU_OPACITY = 0.98
  72:     AUTO_REFRESH_INTERVAL = 1000  # milliseconds
  73:     PINNED_SECTION_WIDTH = 400     # Width allocated for pinned windows
  74:     PINNED_BUTTON_WIDTH = 80       # Width of each pinned window button

────────────────────────────────────────────────────────────────────────────────
FILE: enhanced_folder_inventory.py
────────────────────────────────────────────────────────────────────────────────
Path: enhanced_folder_inventory.py
Size: 23.5 KB
Lines: 569 total, 459 non-empty
Characters: 23,495
Type: .PY file
────────────────────────────────────────────────────────────────────────────────

   1: # enhanced_folder_inventory.py
   2: """
   3: Enhanced Folder Inventory feature for SuiteView Taskbar
   4: Adds View option with Excel-like filtering capabilities
   5: """
   6: 
   7: import os
   8: import threading
   9: import time
  10: from datetime import datetime
  11: from pathlib import Path
  12: import tkinter as tk
  13: from tkinter import ttk, filedialog, messagebox
  14: from openpyxl import Workbook
  15: from openpyxl.styles import Font, PatternFill
  16: import tempfile
  17: import subprocess
  18: from inventory_view_window import InventoryViewWindow
  19: 
  20: from config import Colors, Fonts, Dimensions
  21: from ui_components import CustomDialog, FormField, WarningDialog, ErrorDialog
  22: from utils import UIUtils
  23: 
  24: class FolderInventoryDialog(CustomDialog):
  25:     """Enhanced dialog for configuring folder inventory scan with View/Print options"""
  26:     
  27:     def __init__(self, parent):
  28:         super().__init__(parent, "Folder Inventory", width=500, height=400)
  29:         
  30:         self.selected_folder = ""
  31:         self.scan_thread = None
  32:         self.cancel_scan = False
  33:         self.progress_window = None
  34:         
  35:         self.create_form()
  36:         self.add_buttons()
  37:         
  38:         # Set focus on folder field
  39:         self.folder_field.widget.focus_set()
  40:     
  41:     def create_form(self):
  42:         """Create the configuration form"""
  43:         # Folder selection
  44:         folder_frame = tk.Frame(self.dialog_content, bg=Colors.LIGHT_GREEN)
  45:         folder_frame.pack(fill=tk.X, pady=5)
  46:         
  47:         self.folder_field = FormField(folder_frame, "Folder to scan:", width=35)
  48:         self.folder_field.pack(side=tk.LEFT, fill=tk.X, expand=True)
  49:         
  50:         browse_btn = tk.Button(folder_frame, text="Browse...", 
  51:                               command=self.browse_folder,
  52:                               bg=Colors.MEDIUM_GREEN, fg=Colors.BLACK,
  53:                               font=Fonts.DIALOG_BUTTON, cursor='hand2')
  54:         browse_btn.pack(side=tk.RIGHT, padx=(5, 0))
  55:         
  56:         # Depth selection
  57:         self.depth_field = FormField(
  58:             self.dialog_content, "Scan depth:", 
  59:             field_type='combobox',
  60:             values=["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "Unlimited"],
  61:             width=15
  62:         )
  63:         self.depth_field.set("1")
  64:         self.depth_field.widget.configure(state='readonly')
  65:         self.depth_field.pack(fill=tk.X, pady=5)
  66:         
  67:         # Content type selection
  68:         content_frame = tk.Frame(self.dialog_content, bg=Colors.LIGHT_GREEN)
  69:         content_frame.pack(fill=tk.X, pady=10)
  70:         
  71:         tk.Label(content_frame, text="Include:", bg=Colors.LIGHT_GREEN, 
  72:                 fg=Colors.BLACK, font=Fonts.DIALOG_LABEL).pack(anchor='w')
  73:         
  74:         self.content_type = tk.StringVar(value="both")
  75:         
  76:         radio_frame = tk.Frame(content_frame, bg=Colors.LIGHT_GREEN)
  77:         radio_frame.pack(fill=tk.X, pady=5)
  78:         
  79:         tk.Radiobutton(radio_frame, text="Files Only", variable=self.content_type, 
  80:                       value="files", bg=Colors.LIGHT_GREEN, fg=Colors.BLACK,
  81:                       font=Fonts.DIALOG_LABEL, activebackground=Colors.MEDIUM_GREEN).pack(side=tk.LEFT, padx=10)
  82:         
  83:         tk.Radiobutton(radio_frame, text="Folders Only", variable=self.content_type, 
  84:                       value="folders", bg=Colors.LIGHT_GREEN, fg=Colors.BLACK,
  85:                       font=Fonts.DIALOG_LABEL, activebackground=Colors.MEDIUM_GREEN).pack(side=tk.LEFT, padx=10)
  86:         
  87:         tk.Radiobutton(radio_frame, text="Both", variable=self.content_type, 
  88:                       value="both", bg=Colors.LIGHT_GREEN, fg=Colors.BLACK,
  89:                       font=Fonts.DIALOG_LABEL, activebackground=Colors.MEDIUM_GREEN).pack(side=tk.LEFT, padx=10)
  90:         
  91:         # Output option selection (NEW)
  92:         output_frame = tk.Frame(self.dialog_content, bg=Colors.LIGHT_GREEN)
  93:         output_frame.pack(fill=tk.X, pady=10)
  94:         
  95:         tk.Label(output_frame, text="Output to:", bg=Colors.LIGHT_GREEN, 
  96:                 fg=Colors.BLACK, font=Fonts.DIALOG_LABEL).pack(anchor='w')
  97:         
  98:         self.output_type = tk.StringVar(value="view")  # Default to View
  99:         
 100:         output_radio_frame = tk.Frame(output_frame, bg=Colors.LIGHT_GREEN)
 101:         output_radio_frame.pack(fill=tk.X, pady=5)
 102:         
 103:         tk.Radiobutton(output_radio_frame, text="View (Interactive)", variable=self.output_type, 
 104:                       value="view", bg=Colors.LIGHT_GREEN, fg=Colors.BLACK,
 105:                       font=Fonts.DIALOG_LABEL, activebackground=Colors.MEDIUM_GREEN).pack(side=tk.LEFT, padx=10)
 106:         
 107:         tk.Radiobutton(output_radio_frame, text="Excel File", variable=self.output_type, 
 108:                       value="excel", bg=Colors.LIGHT_GREEN, fg=Colors.BLACK,
 109:                       font=Fonts.DIALOG_LABEL, activebackground=Colors.MEDIUM_GREEN).pack(side=tk.LEFT, padx=10)
 110:         
 111:         # Information text
 112:         info_text = ("View will show results in an interactive grid with filtering.\n"
 113:                     "Excel will create a spreadsheet file.\n"
 114:                     "Large operations (>20,000 items) will show a warning.")
 115:         info_label = tk.Label(self.dialog_content, text=info_text, 
 116:                              bg=Colors.LIGHT_GREEN, fg=Colors.DARK_GREEN,
 117:                              font=(Fonts.DIALOG_LABEL[0], Fonts.DIALOG_LABEL[1]-1),
 118:                              wraplength=450, justify=tk.LEFT)
 119:         info_label.pack(pady=10)
 120:     
 121:     def browse_folder(self):
 122:         """Browse for folder to scan"""
 123:         folder = filedialog.askdirectory(parent=self, title="Select Folder to Inventory")
 124:         if folder:
 125:             self.folder_field.set(folder)
 126:             self.selected_folder = folder
 127:     
 128:     def add_buttons(self):
 129:         """Add Start and Cancel buttons"""
 130:         button_container = tk.Frame(self.button_frame, bg=Colors.LIGHT_GREEN)
 131:         button_container.pack(expand=True)
 132:         
 133:         start_btn = tk.Button(button_container, text="Start Scan", 
 134:                              bg=Colors.DARK_GREEN, fg=Colors.WHITE,
 135:                              command=self.start_scan, width=Dimensions.DIALOG_BUTTON_WIDTH,
 136:                              font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1,
 137:                              cursor='hand2')
 138:         start_btn.pack(side=tk.LEFT, padx=10)
 139:         
 140:         cancel_btn = tk.Button(button_container, text="Cancel", 
 141:                               bg=Colors.INACTIVE_GRAY, fg=Colors.WHITE,
 142:                               command=self.cancel, width=Dimensions.DIALOG_BUTTON_WIDTH,
 143:                               font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1)
 144:         cancel_btn.pack(side=tk.LEFT, padx=10)
 145:         
 146:         start_btn.focus_set()
 147:     
 148:     def start_scan(self):
 149:         """Start the folder inventory scan"""
 150:         folder = self.folder_field.get().strip()
 151:         if not folder:
 152:             WarningDialog.show(self, "Invalid Input", "Please select a folder to scan.")
 153:             return
 154:         
 155:         if not os.path.exists(folder):
 156:             ErrorDialog.show(self, "Folder Not Found", f"The selected folder does not exist:\n{folder}")
 157:             return
 158:         
 159:         # Get scan parameters
 160:         depth_str = self.depth_field.get()
 161:         max_depth = None if depth_str == "Unlimited" else int(depth_str)
 162:         content_type = self.content_type.get()
 163:         output_type = self.output_type.get()
 164:         
 165:         # Quick estimation for large operation warning
 166:         if self.should_warn_large_operation(folder, max_depth):
 167:             result = WarningDialog.show(self, "Large Operation Warning", 
 168:                                        "This operation may scan more than 20,000 items and could take several minutes.\n\n"
 169:                                        "Do you want to continue?")
 170:             if not result:
 171:                 return
 172:         
 173:         # Start the scan
 174:         self.destroy()
 175:         self.start_inventory_scan(folder, max_depth, content_type, output_type)
 176:     
 177:     def should_warn_large_operation(self, folder, max_depth):
 178:         """Quick check to estimate if operation will be large"""
 179:         try:
 180:             sample_count = 0
 181:             with os.scandir(folder) as entries:
 182:                 for entry in entries:
 183:                     sample_count += 1
 184:                     if sample_count >= 1000:
 185:                         break
 186:             
 187:             if sample_count >= 1000:
 188:                 return True
 189:             
 190:             if max_depth is None or max_depth > 1:
 191:                 with os.scandir(folder) as entries:
 192:                     for entry in entries:
 193:                         if entry.is_dir():
 194:                             return True
 195:             
 196:             return False
 197:         except:
 198:             return False
 199:     
 200:     def start_inventory_scan(self, folder, max_depth, content_type, output_type):
 201:         """Start the actual inventory scan in background thread"""
 202:         self.cancel_scan = False
 203:         
 204:         # Create progress window
 205:         self.progress_window = ProgressWindow(self.parent, self.cancel_scan_operation)
 206:         
 207:         # Start scan in background thread
 208:         self.scan_thread = threading.Thread(
 209:             target=self.perform_scan,
 210:             args=(folder, max_depth, content_type, output_type),
 211:             daemon=True
 212:         )
 213:         self.scan_thread.start()
 214:     
 215:     def cancel_scan_operation(self):
 216:         """Cancel the running scan operation"""
 217:         self.cancel_scan = True
 218:         if self.progress_window:
 219:             self.progress_window.destroy()
 220:     
 221:     def perform_scan(self, folder, max_depth, content_type, output_type):
 222:         """Perform the actual folder scan (runs in background thread)"""
 223:         try:
 224:             scanner = FolderScanner(folder, max_depth, content_type, self.update_progress)
 225:             inventory_data, error_data = scanner.scan()
 226:             
 227:             if not self.cancel_scan:
 228:                 if output_type == "excel":
 229:                     # Create Excel file (existing functionality)
 230:                     excel_creator = ExcelInventoryCreator()
 231:                     excel_creator.create_workbook(inventory_data, error_data, folder)
 232:                 else:
 233:                     # Show in interactive view (NEW)
 234:                     scan_info = {
 235:                         'folder': folder,
 236:                         'generated': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
 237:                         'total_items': len(inventory_data),
 238:                         'max_depth': max_depth,
 239:                         'content_type': content_type
 240:                     }
 241:                     self.show_inventory_view(inventory_data, error_data, scan_info)
 242:                 
 243:                 # Close progress window
 244:                 if self.progress_window:
 245:                     self.progress_window.after(0, self.progress_window.destroy)
 246:                 
 247:         except Exception as e:
 248:             # Show error in main thread
 249:             if self.progress_window:
 250:                 self.progress_window.after(0, lambda: self.show_scan_error(str(e)))
 251:     
 252:     def show_inventory_view(self, inventory_data, error_data, scan_info):
 253:         """Show the inventory data in an interactive view"""
 254:         if self.progress_window:
 255:             self.progress_window.after(0, lambda: InventoryViewWindow(
 256:                 self.parent, inventory_data, error_data, scan_info))
 257:     
 258:     def update_progress(self, count, current_path):
 259:         """Update progress display (called from background thread)"""
 260:         if self.progress_window and not self.cancel_scan:
 261:             self.progress_window.after(0, lambda: self.progress_window.update_progress(count, current_path))
 262:     
 263:     def show_scan_error(self, error_message):
 264:         """Show scan error (called in main thread)"""
 265:         if self.progress_window:
 266:             self.progress_window.destroy()
 267:         ErrorDialog.show(self.parent, "Scan Error", f"An error occurred during scanning:\n{error_message}")
 268: 
 269: 
 270: class ProgressWindow(CustomDialog):
 271:     """Progress window for folder scanning"""
 272:     
 273:     def __init__(self, parent, cancel_callback):
 274:         super().__init__(parent, "Scanning Folder", width=450, height=200)
 275:         
 276:         self.cancel_callback = cancel_callback
 277:         
 278:         # Progress info
 279:         self.progress_label = tk.Label(self.dialog_content, text="Starting scan...", 
 280:                                       bg=Colors.LIGHT_GREEN, fg=Colors.BLACK,
 281:                                       font=Fonts.DIALOG_LABEL, wraplength=400)
 282:         self.progress_label.pack(pady=10)
 283:         
 284:         self.count_label = tk.Label(self.dialog_content, text="Items processed: 0", 
 285:                                    bg=Colors.LIGHT_GREEN, fg=Colors.DARK_GREEN,
 286:                                    font=Fonts.DIALOG_LABEL)
 287:         self.count_label.pack(pady=5)
 288:         
 289:         self.path_label = tk.Label(self.dialog_content, text="", 
 290:                                   bg=Colors.LIGHT_GREEN, fg=Colors.DARK_GREEN,
 291:                                   font=(Fonts.DIALOG_LABEL[0], Fonts.DIALOG_LABEL[1]-1),
 292:                                   wraplength=400, anchor='w')
 293:         self.path_label.pack(pady=5, fill=tk.X)
 294:         
 295:         # Cancel button
 296:         cancel_btn = tk.Button(self.button_frame, text="Cancel Scan", 
 297:                               bg=Colors.INACTIVE_GRAY, fg=Colors.WHITE,
 298:                               command=self.cancel_callback, width=12,
 299:                               font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1)
 300:         cancel_btn.pack()
 301:         
 302:         # Override close button to call cancel
 303:         self.protocol("WM_DELETE_WINDOW", self.cancel_callback)
 304:     
 305:     def update_progress(self, count, current_path):
 306:         """Update progress display"""
 307:         self.count_label.config(text=f"Items processed: {count:,}")
 308:         
 309:         # Truncate long paths
 310:         display_path = current_path
 311:         if len(display_path) > 60:
 312:             display_path = "..." + display_path[-57:]
 313:         
 314:         self.path_label.config(text=f"Current: {display_path}")
 315: 
 316: 
 317: class FolderScanner:
 318:     """Core folder scanning logic"""
 319:     
 320:     def __init__(self, root_folder, max_depth, content_type, progress_callback):
 321:         self.root_folder = root_folder
 322:         self.max_depth = max_depth
 323:         self.content_type = content_type
 324:         self.progress_callback = progress_callback
 325:         self.cancel_scan = False
 326:         
 327:         self.inventory_data = []
 328:         self.error_data = []
 329:         self.item_count = 0
 330:     
 331:     def scan(self):
 332:         """Main scan method"""
 333:         self._scan_directory(self.root_folder, 0)
 334:         return self.inventory_data, self.error_data
 335:     
 336:     def _scan_directory(self, directory, current_depth):
 337:         """Recursively scan directory"""
 338:         if self.cancel_scan:
 339:             return
 340:         
 341:         # Check depth limit
 342:         if self.max_depth is not None and current_depth >= self.max_depth:
 343:             return
 344:         
 345:         try:
 346:             with os.scandir(directory) as entries:
 347:                 for entry in entries:
 348:                     if self.cancel_scan:
 349:                         return
 350:                     
 351:                     try:
 352:                         self._process_entry(entry, current_depth)
 353:                     except Exception as e:
 354:                         self._log_error(entry.path, str(e))
 355:                     
 356:                     # Update progress every 100 items
 357:                     if self.item_count % 100 == 0:
 358:                         self.progress_callback(self.item_count, entry.path)
 359:         
 360:         except Exception as e:
 361:             self._log_error(directory, str(e))
 362:     
 363:     def _process_entry(self, entry, current_depth):
 364:         """Process a single file/folder entry"""
 365:         is_file = entry.is_file()
 366:         is_dir = entry.is_dir()
 367:         
 368:         # Check if we should include this type
 369:         if self.content_type == "files" and not is_file:
 370:             pass  # Skip folders
 371:         elif self.content_type == "folders" and not is_dir:
 372:             pass  # Skip files
 373:         else:
 374:             # Include this item
 375:             self._add_inventory_item(entry, is_file)
 376:         
 377:         # Recurse into subdirectories
 378:         if is_dir:
 379:             self._scan_directory(entry.path, current_depth + 1)
 380:     
 381:     def _add_inventory_item(self, entry, is_file):
 382:         """Add item to inventory data"""
 383:         try:
 384:             stat_info = entry.stat()
 385:             
 386:             # Get size (only for files)
 387:             if is_file:
 388:                 size_bytes = stat_info.st_size
 389:                 size_human = self._format_size(size_bytes)
 390:             else:
 391:                 size_bytes = 0
 392:                 size_human = "N/A"
 393:             
 394:             # Get modified date
 395:             modified_date = datetime.fromtimestamp(stat_info.st_mtime).strftime("%Y-%m-%d %H:%M:%S")
 396:             
 397:             item_data = {
 398:                 'Name': entry.name,
 399:                 'Full Path': entry.path,
 400:                 'Type': 'File' if is_file else 'Folder',
 401:                 'Size (Bytes)': size_bytes if is_file else '',
 402:                 'Size': size_human,
 403:                 'Modified Date': modified_date
 404:             }
 405:             
 406:             self.inventory_data.append(item_data)
 407:             self.item_count += 1
 408:             
 409:         except Exception as e:
 410:             self._log_error(entry.path, str(e))
 411:     
 412:     def _format_size(self, bytes_size):
 413:         """Format file size in human readable format"""
 414:         if bytes_size == 0:
 415:             return "0 B"
 416:         
 417:         size_names = ["B", "KB", "MB", "GB", "TB"]
 418:         i = 0
 419:         size = float(bytes_size)
 420:         
 421:         while size >= 1024.0 and i < len(size_names) - 1:
 422:             size /= 1024.0
 423:             i += 1
 424:         
 425:         if i == 0:
 426:             return f"{int(size)} {size_names[i]}"
 427:         else:
 428:             return f"{size:.1f} {size_names[i]}"
 429:     
 430:     def _log_error(self, path, error_message):
 431:         """Log access error"""
 432:         self.error_data.append({
 433:             'Path': path,
 434:             'Error': error_message,
 435:             'Timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
 436:         })
 437: 
 438: 
 439: class ExcelInventoryCreator:
 440:     """Creates Excel workbook with inventory data (existing functionality)"""
 441:     
 442:     def create_workbook(self, inventory_data, error_data, scanned_folder):
 443:         """Create and open Excel workbook"""
 444:         try:
 445:             # Create workbook
 446:             wb = Workbook()
 447:             
 448:             # Create inventory sheet
 449:             ws_inventory = wb.active
 450:             ws_inventory.title = "Inventory"
 451:             self._create_inventory_sheet(ws_inventory, inventory_data, scanned_folder)
 452:             
 453:             # Create errors sheet if there are errors
 454:             if error_data:
 455:                 ws_errors = wb.create_sheet("Access Errors")
 456:                 self._create_errors_sheet(ws_errors, error_data)
 457:             
 458:             # Save to temp file
 459:             temp_dir = tempfile.gettempdir()
 460:             timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
 461:             filename = f"Folder_Inventory_{timestamp}.xlsx"
 462:             filepath = os.path.join(temp_dir, filename)
 463:             
 464:             wb.save(filepath)
 465:             
 466:             # Open in Excel
 467:             self._open_excel_file(filepath)
 468:             
 469:         except Exception as e:
 470:             raise Exception(f"Failed to create Excel file: {str(e)}")
 471:     
 472:     def _create_inventory_sheet(self, worksheet, data, scanned_folder):
 473:         """Create the main inventory sheet"""
 474:         # Header
 475:         worksheet['A1'] = f"Folder Inventory: {scanned_folder}"
 476:         worksheet['A1'].font = Font(bold=True, size=14)
 477:         worksheet['A2'] = f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
 478:         worksheet['A3'] = f"Total Items: {len(data):,}"
 479:         
 480:         # Column headers
 481:         headers = ['Name', 'Full Path', 'Type', 'Size', 'Modified Date']
 482:         for col, header in enumerate(headers, 1):
 483:             cell = worksheet.cell(row=5, column=col, value=header)
 484:             cell.font = Font(bold=True)
 485:             cell.fill = PatternFill(start_color="90EE90", end_color="90EE90", fill_type="solid")
 486:         
 487:         # Data rows
 488:         for row, item in enumerate(data, 6):
 489:             worksheet.cell(row=row, column=1, value=item['Name'])
 490:             worksheet.cell(row=row, column=2, value=item['Full Path'])
 491:             worksheet.cell(row=row, column=3, value=item['Type'])
 492:             worksheet.cell(row=row, column=4, value=item['Size'])
 493:             worksheet.cell(row=row, column=5, value=item['Modified Date'])
 494:         
 495:         # Auto-adjust column widths
 496:         for column in worksheet.columns:
 497:             max_length = 0
 498:             column_letter = column[0].column_letter
 499:             for cell in column:
 500:                 try:
 501:                     if len(str(cell.value)) > max_length:
 502:                         max_length = len(str(cell.value))
 503:                 except:
 504:                     pass
 505:             adjusted_width = min(max_length + 2, 50)
 506:             worksheet.column_dimensions[column_letter].width = adjusted_width
 507:     
 508:     def _create_errors_sheet(self, worksheet, error_data):
 509:         """Create the errors sheet"""
 510:         # Header
 511:         worksheet['A1'] = "Access Errors"
 512:         worksheet['A1'].font = Font(bold=True, size=14)
 513:         worksheet['A2'] = f"Total Errors: {len(error_data)}"
 514:         
 515:         # Column headers
 516:         headers = ['Path', 'Error', 'Timestamp']
 517:         for col, header in enumerate(headers, 1):
 518:             cell = worksheet.cell(row=4, column=col, value=header)
 519:             cell.font = Font(bold=True)
 520:             cell.fill = PatternFill(start_color="FFB6C1", end_color="FFB6C1", fill_type="solid")
 521:         
 522:         # Error rows
 523:         for row, error in enumerate(error_data, 5):
 524:             worksheet.cell(row=row, column=1, value=error['Path'])
 525:             worksheet.cell(row=row, column=2, value=error['Error'])
 526:             worksheet.cell(row=row, column=3, value=error['Timestamp'])
 527:         
 528:         # Auto-adjust column widths
 529:         for column in worksheet.columns:
 530:             max_length = 0
 531:             column_letter = column[0].column_letter
 532:             for cell in column:
 533:                 try:
 534:                     if len(str(cell.value)) > max_length:
 535:                         max_length = len(str(cell.value))
 536:                 except:
 537:                     pass
 538:             adjusted_width = min(max_length + 2, 50)
 539:             worksheet.column_dimensions[column_letter].width = adjusted_width
 540:     
 541:     def _open_excel_file(self, filepath):
 542:         """Open Excel file"""
 543:         try:
 544:             os.startfile(filepath)
 545:         except:
 546:             try:
 547:                 subprocess.run(['start', 'excel', filepath], shell=True)
 548:             except:
 549:                 messagebox.showinfo("File Created", f"Excel file created at:\n{filepath}")
 550: 
 551: 
 552: # Integration function for taskbar.py
 553: def add_folder_inventory_to_taskbar(taskbar_instance):
 554:     """Add Folder Inventory button to the taskbar"""
 555:     
 556:     def show_inventory_dialog():
 557:         """Show the folder inventory dialog"""
 558:         dialog = FolderInventoryDialog(taskbar_instance.root)
 559:         dialog.lift()
 560:         dialog.focus_force()
 561:     
 562:     # Create the inventory button
 563:     inventory_btn = tk.Button(taskbar_instance.main_frame, text="Inventory", 
 564:                              bg=Colors.DARK_GREEN, fg=Colors.WHITE,
 565:                              relief=tk.FLAT, font=Fonts.TASKBAR_BUTTON, 
 566:                              cursor='hand2', activebackground=Colors.HOVER_GREEN, 
 567:                              bd=0, padx=15, command=show_inventory_dialog)
 568:     
 569:     return inventory_btn

────────────────────────────────────────────────────────────────────────────────
FILE: explorer_utils.py
────────────────────────────────────────────────────────────────────────────────
Path: explorer_utils.py
Size: 8.9 KB
Lines: 226 total, 183 non-empty
Characters: 8,916
Type: .PY file
────────────────────────────────────────────────────────────────────────────────

   1: # explorer_utils.py
   2: """
   3: Utility functions for detecting and interacting with File Explorer windows
   4: """
   5: 
   6: import win32gui
   7: import win32process
   8: import psutil
   9: from pathlib import Path
  10: import os
  11: 
  12: class ExplorerDetector:
  13:     """Utility class for detecting open File Explorer windows"""
  14:     
  15:     @staticmethod
  16:     def get_open_explorer_folders():
  17:         """
  18:         Get a list of currently open File Explorer folder paths
  19:         Returns list of folder paths, ordered by most recently active
  20:         """
  21:         explorer_folders = []
  22:         
  23:         def enum_window_callback(hwnd, folders_list):
  24:             """Callback function for window enumeration"""
  25:             try:
  26:                 # Check if window is visible
  27:                 if not win32gui.IsWindowVisible(hwnd):
  28:                     return True
  29:                 
  30:                 # Get window class name
  31:                 class_name = win32gui.GetClassName(hwnd)
  32:                 
  33:                 # Check if it's a File Explorer window
  34:                 if class_name in ['CabinetWClass', 'ExploreWClass']:
  35:                     # Get process information
  36:                     _, pid = win32process.GetWindowThreadProcessId(hwnd)
  37:                     
  38:                     try:
  39:                         process = psutil.Process(pid)
  40:                         if process.name().lower() == 'explorer.exe':
  41:                             # Try to get the folder path from the window
  42:                             folder_path = ExplorerDetector._get_explorer_path(hwnd)
  43:                             if folder_path and os.path.exists(folder_path):
  44:                                 folders_list.append({
  45:                                     'path': folder_path,
  46:                                     'hwnd': hwnd,
  47:                                     'title': win32gui.GetWindowText(hwnd)
  48:                                 })
  49:                     except (psutil.NoSuchProcess, psutil.AccessDenied):
  50:                         pass
  51:                         
  52:             except Exception as e:
  53:                 print(f"Error processing window {hwnd}: {e}")
  54:                 
  55:             return True
  56:         
  57:         # Enumerate all top-level windows
  58:         win32gui.EnumWindows(enum_window_callback, explorer_folders)
  59:         
  60:         # Sort by Z-order (topmost first) - approximate by hwnd order
  61:         # The most recently active windows typically have higher hwnd values
  62:         explorer_folders.sort(key=lambda x: x['hwnd'], reverse=True)
  63:         
  64:         return [folder['path'] for folder in explorer_folders]
  65:     
  66:     @staticmethod
  67:     def _get_explorer_path(hwnd):
  68:         """
  69:         Extract the current folder path from a File Explorer window
  70:         This uses the window title to determine the path
  71:         """
  72:         try:
  73:             window_title = win32gui.GetWindowText(hwnd)
  74:             
  75:             # File Explorer titles usually contain the folder name
  76:             # Try different approaches to extract the path
  77:             
  78:             # Method 1: Direct path in title (Windows 11 style)
  79:             normalized_title = os.path.normpath(window_title)
  80:             if os.path.exists(normalized_title):
  81:                 return normalized_title
  82:             
  83:             # Method 2: Parse common File Explorer title formats
  84:             # Remove common prefixes/suffixes
  85:             title_cleaned = window_title
  86:             
  87:             # Remove " - File Explorer" suffix if present
  88:             if title_cleaned.endswith(' - File Explorer'):
  89:                 title_cleaned = title_cleaned[:-15]
  90:             
  91:             # Remove " - Windows Explorer" suffix if present  
  92:             if title_cleaned.endswith(' - Windows Explorer'):
  93:                 title_cleaned = title_cleaned[:-18]
  94:             
  95:             # Normalize and check if cleaned title is a valid path
  96:             title_cleaned = os.path.normpath(title_cleaned)
  97:             if os.path.exists(title_cleaned):
  98:                 return title_cleaned
  99:             
 100:             # Method 3: Try to construct common paths
 101:             common_paths = [
 102:                 os.path.expanduser('~'),  # User home
 103:                 os.path.expanduser('~/Desktop'),
 104:                 os.path.expanduser('~/Documents'),
 105:                 os.path.expanduser('~/Downloads'),
 106:                 'C:\\',
 107:                 'D:\\',
 108:             ]
 109:             
 110:             for base_path in common_paths:
 111:                 potential_path = os.path.normpath(os.path.join(base_path, title_cleaned))
 112:                 if os.path.exists(potential_path):
 113:                     return potential_path
 114:             
 115:             # Method 4: Check if it's a special folder name
 116:             special_folders = {
 117:                 'Desktop': os.path.expanduser('~/Desktop'),
 118:                 'Documents': os.path.expanduser('~/Documents'),
 119:                 'Downloads': os.path.expanduser('~/Downloads'),
 120:                 'Pictures': os.path.expanduser('~/Pictures'),
 121:                 'Videos': os.path.expanduser('~/Videos'),
 122:                 'Music': os.path.expanduser('~/Music'),
 123:                 'This PC': os.path.expanduser('~'),
 124:                 'Computer': os.path.expanduser('~'),
 125:             }
 126:             
 127:             if title_cleaned in special_folders:
 128:                 return os.path.normpath(special_folders[title_cleaned])
 129:             
 130:             # Method 5: Advanced COM-based approach (fallback)
 131:             try:
 132:                 return ExplorerDetector._get_explorer_path_com(hwnd)
 133:             except:
 134:                 pass
 135:             
 136:             return None
 137:             
 138:         except Exception as e:
 139:             print(f"Error getting explorer path for window {hwnd}: {e}")
 140:             return None
 141:     
 142:     @staticmethod
 143:     def _get_explorer_path_com(hwnd):
 144:         """
 145:         Use COM interface to get the actual path from File Explorer
 146:         This is more reliable but also more complex
 147:         """
 148:         try:
 149:             import win32com.client
 150:             
 151:             # Get Shell Windows collection
 152:             shell_windows = win32com.client.Dispatch("Shell.Application").Windows()
 153:             
 154:             for window in shell_windows:
 155:                 try:
 156:                     # Check if this window matches our hwnd
 157:                     if hasattr(window, 'HWND') and window.HWND == hwnd:
 158:                         # Get the location URL and convert to path
 159:                         location = window.LocationURL
 160:                         if location.startswith('file:///'):
 161:                             # Convert file URL to local path
 162:                             import urllib.parse
 163:                             path = urllib.parse.unquote(location[8:])  # Remove 'file:///'
 164:                             path = path.replace('/', '\\')  # Convert to Windows path
 165:                             # Normalize the path to fix any mixed slash issues
 166:                             path = os.path.normpath(path)
 167:                             if os.path.exists(path):
 168:                                 return path
 169:                 except:
 170:                     continue
 171:                     
 172:         except Exception as e:
 173:             print(f"COM approach failed: {e}")
 174:             
 175:         return None
 176:     
 177:     @staticmethod
 178:     def get_topmost_explorer_folder():
 179:         """
 180:         Get the path of the topmost (most recently active) File Explorer folder
 181:         Returns None if no File Explorer windows are open
 182:         """
 183:         folders = ExplorerDetector.get_open_explorer_folders()
 184:         return folders[0] if folders else None
 185:     
 186:     @staticmethod
 187:     def get_best_default_folder():
 188:         """
 189:         Get the best folder to use as default for scanning
 190:         Priority: 1) Topmost Explorer folder, 2) User Documents, 3) User Home
 191:         All paths are normalized to use consistent backslashes
 192:         """
 193:         # Try to get topmost explorer folder first
 194:         explorer_folder = ExplorerDetector.get_topmost_explorer_folder()
 195:         if explorer_folder:
 196:             return os.path.normpath(explorer_folder)
 197:         
 198:         # Fallback to Documents folder
 199:         documents_folder = os.path.expanduser('~/Documents')
 200:         if os.path.exists(documents_folder):
 201:             return os.path.normpath(documents_folder)
 202:         
 203:         # Final fallback to user home
 204:         return os.path.normpath(os.path.expanduser('~'))
 205: 
 206: 
 207: # Test function for debugging
 208: def test_explorer_detection():
 209:     """Test function to see what Explorer windows are detected"""
 210:     print("Testing Explorer Detection...")
 211:     
 212:     folders = ExplorerDetector.get_open_explorer_folders()
 213:     print(f"Found {len(folders)} open File Explorer folders:")
 214:     
 215:     for i, folder in enumerate(folders, 1):
 216:         print(f"  {i}. {folder}")
 217:     
 218:     topmost = ExplorerDetector.get_topmost_explorer_folder()
 219:     print(f"\nTopmost folder: {topmost}")
 220:     
 221:     best_default = ExplorerDetector.get_best_default_folder()
 222:     print(f"Best default folder: {best_default}")
 223: 
 224: 
 225: if __name__ == "__main__":
 226:     test_explorer_detection()

────────────────────────────────────────────────────────────────────────────────
FILE: folder_inventory.py
────────────────────────────────────────────────────────────────────────────────
Path: folder_inventory.py
Size: 24.5 KB
Lines: 593 total, 478 non-empty
Characters: 24,485
Type: .PY file
────────────────────────────────────────────────────────────────────────────────

   1: # enhanced_folder_inventory.py
   2: """
   3: Enhanced Folder Inventory feature for SuiteView Taskbar
   4: Adds View option with Excel-like filtering capabilities
   5: """
   6: 
   7: import os
   8: import threading
   9: import time
  10: from datetime import datetime
  11: from pathlib import Path
  12: import tkinter as tk
  13: from tkinter import ttk, filedialog, messagebox
  14: from openpyxl import Workbook
  15: from openpyxl.styles import Font, PatternFill
  16: import tempfile
  17: import subprocess
  18: from inventory_view_window import InventoryViewWindow
  19: from explorer_utils import ExplorerDetector
  20: 
  21: from config import Colors, Fonts, Dimensions
  22: from ui_components import CustomDialog, FormField, WarningDialog, ErrorDialog
  23: from utils import UIUtils
  24: 
  25: class FolderInventoryDialog(CustomDialog):
  26:     """Enhanced dialog for configuring folder inventory scan with View/Print options"""
  27:     
  28:     def __init__(self, parent):
  29:         super().__init__(parent, "Folder Inventory", width=500, height=400, resizable=True)
  30:         
  31:         self.selected_folder = ""
  32:         self.scan_thread = None
  33:         self.cancel_scan = False
  34:         self.progress_window = None
  35:         
  36:         self.create_form()
  37:         self.add_buttons()
  38:         
  39:         # Auto-populate folder field with topmost Explorer folder (NEW)
  40:         self.auto_populate_folder()
  41:         
  42:         # Set focus on folder field
  43:         self.folder_field.widget.focus_set()
  44:     
  45:     
  46:     
  47:     def auto_populate_folder(self):
  48:         """Auto-populate the folder field with the topmost open File Explorer folder"""
  49:         try:
  50:             best_folder = ExplorerDetector.get_best_default_folder()
  51:             if best_folder:
  52:                 self.folder_field.set(best_folder)
  53:                 self.selected_folder = best_folder
  54:         except Exception as e:
  55:             print(f"Error auto-populating folder: {e}")
  56:             # Fallback to user home directory
  57:             try:
  58:                 fallback_folder = os.path.expanduser('~')
  59:                 self.folder_field.set(fallback_folder)
  60:                 self.selected_folder = fallback_folder
  61:             except:
  62:                 pass  # If all else fails, leave empty
  63:         
  64:     def create_form(self):
  65:         """Create the configuration form"""
  66:         # Folder selection using FormField with stacked layout
  67:         folder_container = tk.Frame(self.dialog_content, bg=Colors.LIGHT_GREEN)
  68:         folder_container.pack(fill=tk.X, pady=(0, 10))
  69:         
  70:         self.folder_field = FormField(folder_container, "Folder to scan:", layout='stacked')
  71:         self.folder_field.pack(side=tk.LEFT, fill=tk.X, expand=True)
  72:         
  73:         browse_btn = tk.Button(folder_container, text="Browse...", 
  74:                             command=self.browse_folder,
  75:                             bg=Colors.MEDIUM_GREEN, fg=Colors.BLACK,
  76:                             font=Fonts.DIALOG_BUTTON, cursor='hand2')
  77:         browse_btn.pack(side=tk.RIGHT, padx=(5, 0))
  78: 
  79:         # Depth selection
  80:         self.depth_field = FormField(
  81:             self.dialog_content, "Scan depth:", 
  82:             field_type='combobox',
  83:             values=["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "Unlimited"],
  84:             width=15
  85:         )
  86:             
  87:         self.depth_field.set("1")
  88:         self.depth_field.widget.configure(state='readonly')
  89:         self.depth_field.pack(fill=tk.X, pady=5)
  90:         
  91:         # Content type selection
  92:         content_frame = tk.Frame(self.dialog_content, bg=Colors.LIGHT_GREEN)
  93:         content_frame.pack(fill=tk.X, pady=10)
  94:         
  95:         tk.Label(content_frame, text="Include:", bg=Colors.LIGHT_GREEN, 
  96:                 fg=Colors.BLACK, font=Fonts.DIALOG_LABEL).pack(anchor='w')
  97:         
  98:         self.content_type = tk.StringVar(value="both")
  99:         
 100:         radio_frame = tk.Frame(content_frame, bg=Colors.LIGHT_GREEN)
 101:         radio_frame.pack(fill=tk.X, pady=5)
 102:         
 103:         tk.Radiobutton(radio_frame, text="Files Only", variable=self.content_type, 
 104:                       value="files", bg=Colors.LIGHT_GREEN, fg=Colors.BLACK,
 105:                       font=Fonts.DIALOG_LABEL, activebackground=Colors.MEDIUM_GREEN).pack(side=tk.LEFT, padx=10)
 106:         
 107:         tk.Radiobutton(radio_frame, text="Folders Only", variable=self.content_type, 
 108:                       value="folders", bg=Colors.LIGHT_GREEN, fg=Colors.BLACK,
 109:                       font=Fonts.DIALOG_LABEL, activebackground=Colors.MEDIUM_GREEN).pack(side=tk.LEFT, padx=10)
 110:         
 111:         tk.Radiobutton(radio_frame, text="Both", variable=self.content_type, 
 112:                       value="both", bg=Colors.LIGHT_GREEN, fg=Colors.BLACK,
 113:                       font=Fonts.DIALOG_LABEL, activebackground=Colors.MEDIUM_GREEN).pack(side=tk.LEFT, padx=10)
 114:         
 115:         # Output option selection (NEW)
 116:         output_frame = tk.Frame(self.dialog_content, bg=Colors.LIGHT_GREEN)
 117:         output_frame.pack(fill=tk.X, pady=10)
 118:         
 119:         tk.Label(output_frame, text="Output to:", bg=Colors.LIGHT_GREEN, 
 120:                 fg=Colors.BLACK, font=Fonts.DIALOG_LABEL).pack(anchor='w')
 121:         
 122:         self.output_type = tk.StringVar(value="view")  # Default to View
 123:         
 124:         output_radio_frame = tk.Frame(output_frame, bg=Colors.LIGHT_GREEN)
 125:         output_radio_frame.pack(fill=tk.X, pady=5)
 126:         
 127:         tk.Radiobutton(output_radio_frame, text="View (Interactive)", variable=self.output_type, 
 128:                       value="view", bg=Colors.LIGHT_GREEN, fg=Colors.BLACK,
 129:                       font=Fonts.DIALOG_LABEL, activebackground=Colors.MEDIUM_GREEN).pack(side=tk.LEFT, padx=10)
 130:         
 131:         tk.Radiobutton(output_radio_frame, text="Excel File", variable=self.output_type, 
 132:                       value="excel", bg=Colors.LIGHT_GREEN, fg=Colors.BLACK,
 133:                       font=Fonts.DIALOG_LABEL, activebackground=Colors.MEDIUM_GREEN).pack(side=tk.LEFT, padx=10)
 134:         
 135:         # Information text
 136:         info_text = ("View will show results in an interactive grid with filtering.\n"
 137:                     "Excel will create a spreadsheet file.\n"
 138:                     "Large operations (>20,000 items) will show a warning.")
 139:         info_label = tk.Label(self.dialog_content, text=info_text, 
 140:                              bg=Colors.LIGHT_GREEN, fg=Colors.DARK_GREEN,
 141:                              font=(Fonts.DIALOG_LABEL[0], Fonts.DIALOG_LABEL[1]-1),
 142:                              wraplength=450, justify=tk.LEFT)
 143:         info_label.pack(pady=10)
 144:     
 145:     def browse_folder(self):
 146:         """Browse for folder to scan"""
 147:         folder = filedialog.askdirectory(parent=self, title="Select Folder to Inventory")
 148:         if folder:
 149:             self.folder_field.set(folder)
 150:             self.selected_folder = folder
 151:     
 152:     def add_buttons(self):
 153:         """Add Start and Cancel buttons"""
 154:         button_container = tk.Frame(self.button_frame, bg=Colors.LIGHT_GREEN)
 155:         button_container.pack(expand=True)
 156:         
 157:         start_btn = tk.Button(button_container, text="Start Scan", 
 158:                              bg=Colors.DARK_GREEN, fg=Colors.WHITE,
 159:                              command=self.start_scan, width=Dimensions.DIALOG_BUTTON_WIDTH,
 160:                              font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1,
 161:                              cursor='hand2')
 162:         start_btn.pack(side=tk.LEFT, padx=10)
 163:         
 164:         cancel_btn = tk.Button(button_container, text="Cancel", 
 165:                               bg=Colors.INACTIVE_GRAY, fg=Colors.WHITE,
 166:                               command=self.cancel, width=Dimensions.DIALOG_BUTTON_WIDTH,
 167:                               font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1)
 168:         cancel_btn.pack(side=tk.LEFT, padx=10)
 169:         
 170:         start_btn.focus_set()
 171:     
 172:     def start_scan(self):
 173:         """Start the folder inventory scan"""
 174:         folder = self.folder_field.get().strip()
 175:         if not folder:
 176:             WarningDialog.show(self, "Invalid Input", "Please select a folder to scan.")
 177:             return
 178:         
 179:         if not os.path.exists(folder):
 180:             ErrorDialog.show(self, "Folder Not Found", f"The selected folder does not exist:\n{folder}")
 181:             return
 182:         
 183:         # Get scan parameters
 184:         depth_str = self.depth_field.get()
 185:         max_depth = None if depth_str == "Unlimited" else int(depth_str)
 186:         content_type = self.content_type.get()
 187:         output_type = self.output_type.get()
 188:         
 189:         # Quick estimation for large operation warning
 190:         if self.should_warn_large_operation(folder, max_depth):
 191:             result = WarningDialog.show(self, "Large Operation Warning", 
 192:                                        "This operation may scan more than 20,000 items and could take several minutes.\n\n"
 193:                                        "Do you want to continue?")
 194:             if not result:
 195:                 return
 196:         
 197:         # Start the scan
 198:         self.destroy()
 199:         self.start_inventory_scan(folder, max_depth, content_type, output_type)
 200:     
 201:     def should_warn_large_operation(self, folder, max_depth):
 202:         """Quick check to estimate if operation will be large"""
 203:         try:
 204:             sample_count = 0
 205:             with os.scandir(folder) as entries:
 206:                 for entry in entries:
 207:                     sample_count += 1
 208:                     if sample_count >= 1000:
 209:                         break
 210:             
 211:             if sample_count >= 1000:
 212:                 return True
 213:             
 214:             if max_depth is None or max_depth > 1:
 215:                 with os.scandir(folder) as entries:
 216:                     for entry in entries:
 217:                         if entry.is_dir():
 218:                             return True
 219:             
 220:             return False
 221:         except:
 222:             return False
 223:     
 224:     def start_inventory_scan(self, folder, max_depth, content_type, output_type):
 225:         """Start the actual inventory scan in background thread"""
 226:         self.cancel_scan = False
 227:         
 228:         # Create progress window
 229:         self.progress_window = ProgressWindow(self.parent, self.cancel_scan_operation)
 230:         
 231:         # Start scan in background thread
 232:         self.scan_thread = threading.Thread(
 233:             target=self.perform_scan,
 234:             args=(folder, max_depth, content_type, output_type),
 235:             daemon=True
 236:         )
 237:         self.scan_thread.start()
 238:     
 239:     def cancel_scan_operation(self):
 240:         """Cancel the running scan operation"""
 241:         self.cancel_scan = True
 242:         if self.progress_window:
 243:             self.progress_window.destroy()
 244:     
 245:     def perform_scan(self, folder, max_depth, content_type, output_type):
 246:         """Perform the actual folder scan (runs in background thread)"""
 247:         try:
 248:             scanner = FolderScanner(folder, max_depth, content_type, self.update_progress)
 249:             inventory_data, error_data = scanner.scan()
 250:             
 251:             if not self.cancel_scan:
 252:                 if output_type == "excel":
 253:                     # Create Excel file (existing functionality)
 254:                     excel_creator = ExcelInventoryCreator()
 255:                     excel_creator.create_workbook(inventory_data, error_data, folder)
 256:                 else:
 257:                     # Show in interactive view (NEW)
 258:                     scan_info = {
 259:                         'folder': folder,
 260:                         'generated': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
 261:                         'total_items': len(inventory_data),
 262:                         'max_depth': max_depth,
 263:                         'content_type': content_type
 264:                     }
 265:                     self.show_inventory_view(inventory_data, error_data, scan_info)
 266:                 
 267:                 # Close progress window
 268:                 if self.progress_window:
 269:                     self.progress_window.after(0, self.progress_window.destroy)
 270:                 
 271:         except Exception as e:
 272:             # Show error in main thread
 273:             if self.progress_window:
 274:                 self.progress_window.after(0, lambda: self.show_scan_error(str(e)))
 275:     
 276:     def show_inventory_view(self, inventory_data, error_data, scan_info):
 277:         """Show the inventory data in an interactive view"""
 278:         if self.progress_window:
 279:             self.progress_window.after(0, lambda: InventoryViewWindow(
 280:                 self.parent, inventory_data, error_data, scan_info))
 281:     
 282:     def update_progress(self, count, current_path):
 283:         """Update progress display (called from background thread)"""
 284:         if self.progress_window and not self.cancel_scan:
 285:             self.progress_window.after(0, lambda: self.progress_window.update_progress(count, current_path))
 286:     
 287:     def show_scan_error(self, error_message):
 288:         """Show scan error (called in main thread)"""
 289:         if self.progress_window:
 290:             self.progress_window.destroy()
 291:         ErrorDialog.show(self.parent, "Scan Error", f"An error occurred during scanning:\n{error_message}")
 292: 
 293: 
 294: class ProgressWindow(CustomDialog):
 295:     """Progress window for folder scanning"""
 296:     
 297:     def __init__(self, parent, cancel_callback):
 298:         super().__init__(parent, "Scanning Folder", width=450, height=200)
 299:         
 300:         self.cancel_callback = cancel_callback
 301:         
 302:         # Progress info
 303:         self.progress_label = tk.Label(self.dialog_content, text="Starting scan...", 
 304:                                       bg=Colors.LIGHT_GREEN, fg=Colors.BLACK,
 305:                                       font=Fonts.DIALOG_LABEL, wraplength=400)
 306:         self.progress_label.pack(pady=10)
 307:         
 308:         self.count_label = tk.Label(self.dialog_content, text="Items processed: 0", 
 309:                                    bg=Colors.LIGHT_GREEN, fg=Colors.DARK_GREEN,
 310:                                    font=Fonts.DIALOG_LABEL)
 311:         self.count_label.pack(pady=5)
 312:         
 313:         self.path_label = tk.Label(self.dialog_content, text="", 
 314:                                   bg=Colors.LIGHT_GREEN, fg=Colors.DARK_GREEN,
 315:                                   font=(Fonts.DIALOG_LABEL[0], Fonts.DIALOG_LABEL[1]-1),
 316:                                   wraplength=400, anchor='w')
 317:         self.path_label.pack(pady=5, fill=tk.X)
 318:         
 319:         # Cancel button
 320:         cancel_btn = tk.Button(self.button_frame, text="Cancel Scan", 
 321:                               bg=Colors.INACTIVE_GRAY, fg=Colors.WHITE,
 322:                               command=self.cancel_callback, width=12,
 323:                               font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1)
 324:         cancel_btn.pack()
 325:         
 326:         # Override close button to call cancel
 327:         self.protocol("WM_DELETE_WINDOW", self.cancel_callback)
 328:     
 329:     def update_progress(self, count, current_path):
 330:         """Update progress display"""
 331:         self.count_label.config(text=f"Items processed: {count:,}")
 332:         
 333:         # Truncate long paths
 334:         display_path = current_path
 335:         if len(display_path) > 60:
 336:             display_path = "..." + display_path[-57:]
 337:         
 338:         self.path_label.config(text=f"Current: {display_path}")
 339: 
 340: 
 341: class FolderScanner:
 342:     """Core folder scanning logic"""
 343:     
 344:     def __init__(self, root_folder, max_depth, content_type, progress_callback):
 345:         self.root_folder = root_folder
 346:         self.max_depth = max_depth
 347:         self.content_type = content_type
 348:         self.progress_callback = progress_callback
 349:         self.cancel_scan = False
 350:         
 351:         self.inventory_data = []
 352:         self.error_data = []
 353:         self.item_count = 0
 354:     
 355:     def scan(self):
 356:         """Main scan method"""
 357:         self._scan_directory(self.root_folder, 0)
 358:         return self.inventory_data, self.error_data
 359:     
 360:     def _scan_directory(self, directory, current_depth):
 361:         """Recursively scan directory"""
 362:         if self.cancel_scan:
 363:             return
 364:         
 365:         # Check depth limit
 366:         if self.max_depth is not None and current_depth >= self.max_depth:
 367:             return
 368:         
 369:         try:
 370:             with os.scandir(directory) as entries:
 371:                 for entry in entries:
 372:                     if self.cancel_scan:
 373:                         return
 374:                     
 375:                     try:
 376:                         self._process_entry(entry, current_depth)
 377:                     except Exception as e:
 378:                         self._log_error(entry.path, str(e))
 379:                     
 380:                     # Update progress every 100 items
 381:                     if self.item_count % 100 == 0:
 382:                         self.progress_callback(self.item_count, entry.path)
 383:         
 384:         except Exception as e:
 385:             self._log_error(directory, str(e))
 386:     
 387:     def _process_entry(self, entry, current_depth):
 388:         """Process a single file/folder entry"""
 389:         is_file = entry.is_file()
 390:         is_dir = entry.is_dir()
 391:         
 392:         # Check if we should include this type
 393:         if self.content_type == "files" and not is_file:
 394:             pass  # Skip folders
 395:         elif self.content_type == "folders" and not is_dir:
 396:             pass  # Skip files
 397:         else:
 398:             # Include this item
 399:             self._add_inventory_item(entry, is_file)
 400:         
 401:         # Recurse into subdirectories
 402:         if is_dir:
 403:             self._scan_directory(entry.path, current_depth + 1)
 404:     
 405:     def _add_inventory_item(self, entry, is_file):
 406:         """Add item to inventory data"""
 407:         try:
 408:             stat_info = entry.stat()
 409:             
 410:             # Get size (only for files)
 411:             if is_file:
 412:                 size_bytes = stat_info.st_size
 413:                 size_human = self._format_size(size_bytes)
 414:             else:
 415:                 size_bytes = 0
 416:                 size_human = "N/A"
 417:             
 418:             # Get modified date
 419:             modified_date = datetime.fromtimestamp(stat_info.st_mtime).strftime("%Y-%m-%d %H:%M:%S")
 420:             
 421:             item_data = {
 422:                 'Name': entry.name,
 423:                 'Full Path': entry.path,
 424:                 'Type': 'File' if is_file else 'Folder',
 425:                 'Size (Bytes)': size_bytes if is_file else '',
 426:                 'Size': size_human,
 427:                 'Modified Date': modified_date
 428:             }
 429:             
 430:             self.inventory_data.append(item_data)
 431:             self.item_count += 1
 432:             
 433:         except Exception as e:
 434:             self._log_error(entry.path, str(e))
 435:     
 436:     def _format_size(self, bytes_size):
 437:         """Format file size in human readable format"""
 438:         if bytes_size == 0:
 439:             return "0 B"
 440:         
 441:         size_names = ["B", "KB", "MB", "GB", "TB"]
 442:         i = 0
 443:         size = float(bytes_size)
 444:         
 445:         while size >= 1024.0 and i < len(size_names) - 1:
 446:             size /= 1024.0
 447:             i += 1
 448:         
 449:         if i == 0:
 450:             return f"{int(size)} {size_names[i]}"
 451:         else:
 452:             return f"{size:.1f} {size_names[i]}"
 453:     
 454:     def _log_error(self, path, error_message):
 455:         """Log access error"""
 456:         self.error_data.append({
 457:             'Path': path,
 458:             'Error': error_message,
 459:             'Timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
 460:         })
 461: 
 462: 
 463: class ExcelInventoryCreator:
 464:     """Creates Excel workbook with inventory data (existing functionality)"""
 465:     
 466:     def create_workbook(self, inventory_data, error_data, scanned_folder):
 467:         """Create and open Excel workbook"""
 468:         try:
 469:             # Create workbook
 470:             wb = Workbook()
 471:             
 472:             # Create inventory sheet
 473:             ws_inventory = wb.active
 474:             ws_inventory.title = "Inventory"
 475:             self._create_inventory_sheet(ws_inventory, inventory_data, scanned_folder)
 476:             
 477:             # Create errors sheet if there are errors
 478:             if error_data:
 479:                 ws_errors = wb.create_sheet("Access Errors")
 480:                 self._create_errors_sheet(ws_errors, error_data)
 481:             
 482:             # Save to temp file
 483:             temp_dir = tempfile.gettempdir()
 484:             timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
 485:             filename = f"Folder_Inventory_{timestamp}.xlsx"
 486:             filepath = os.path.join(temp_dir, filename)
 487:             
 488:             wb.save(filepath)
 489:             
 490:             # Open in Excel
 491:             self._open_excel_file(filepath)
 492:             
 493:         except Exception as e:
 494:             raise Exception(f"Failed to create Excel file: {str(e)}")
 495:     
 496:     def _create_inventory_sheet(self, worksheet, data, scanned_folder):
 497:         """Create the main inventory sheet"""
 498:         # Header
 499:         worksheet['A1'] = f"Folder Inventory: {scanned_folder}"
 500:         worksheet['A1'].font = Font(bold=True, size=14)
 501:         worksheet['A2'] = f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
 502:         worksheet['A3'] = f"Total Items: {len(data):,}"
 503:         
 504:         # Column headers
 505:         headers = ['Name', 'Full Path', 'Type', 'Size', 'Modified Date']
 506:         for col, header in enumerate(headers, 1):
 507:             cell = worksheet.cell(row=5, column=col, value=header)
 508:             cell.font = Font(bold=True)
 509:             cell.fill = PatternFill(start_color="90EE90", end_color="90EE90", fill_type="solid")
 510:         
 511:         # Data rows
 512:         for row, item in enumerate(data, 6):
 513:             worksheet.cell(row=row, column=1, value=item['Name'])
 514:             worksheet.cell(row=row, column=2, value=item['Full Path'])
 515:             worksheet.cell(row=row, column=3, value=item['Type'])
 516:             worksheet.cell(row=row, column=4, value=item['Size'])
 517:             worksheet.cell(row=row, column=5, value=item['Modified Date'])
 518:         
 519:         # Auto-adjust column widths
 520:         for column in worksheet.columns:
 521:             max_length = 0
 522:             column_letter = column[0].column_letter
 523:             for cell in column:
 524:                 try:
 525:                     if len(str(cell.value)) > max_length:
 526:                         max_length = len(str(cell.value))
 527:                 except:
 528:                     pass
 529:             adjusted_width = min(max_length + 2, 50)
 530:             worksheet.column_dimensions[column_letter].width = adjusted_width
 531:     
 532:     def _create_errors_sheet(self, worksheet, error_data):
 533:         """Create the errors sheet"""
 534:         # Header
 535:         worksheet['A1'] = "Access Errors"
 536:         worksheet['A1'].font = Font(bold=True, size=14)
 537:         worksheet['A2'] = f"Total Errors: {len(error_data)}"
 538:         
 539:         # Column headers
 540:         headers = ['Path', 'Error', 'Timestamp']
 541:         for col, header in enumerate(headers, 1):
 542:             cell = worksheet.cell(row=4, column=col, value=header)
 543:             cell.font = Font(bold=True)
 544:             cell.fill = PatternFill(start_color="FFB6C1", end_color="FFB6C1", fill_type="solid")
 545:         
 546:         # Error rows
 547:         for row, error in enumerate(error_data, 5):
 548:             worksheet.cell(row=row, column=1, value=error['Path'])
 549:             worksheet.cell(row=row, column=2, value=error['Error'])
 550:             worksheet.cell(row=row, column=3, value=error['Timestamp'])
 551:         
 552:         # Auto-adjust column widths
 553:         for column in worksheet.columns:
 554:             max_length = 0
 555:             column_letter = column[0].column_letter
 556:             for cell in column:
 557:                 try:
 558:                     if len(str(cell.value)) > max_length:
 559:                         max_length = len(str(cell.value))
 560:                 except:
 561:                     pass
 562:             adjusted_width = min(max_length + 2, 50)
 563:             worksheet.column_dimensions[column_letter].width = adjusted_width
 564:     
 565:     def _open_excel_file(self, filepath):
 566:         """Open Excel file"""
 567:         try:
 568:             os.startfile(filepath)
 569:         except:
 570:             try:
 571:                 subprocess.run(['start', 'excel', filepath], shell=True)
 572:             except:
 573:                 messagebox.showinfo("File Created", f"Excel file created at:\n{filepath}")
 574: 
 575: 
 576: # Integration function for taskbar.py
 577: def add_folder_inventory_to_taskbar(taskbar_instance):
 578:     """Add Folder Inventory button to the taskbar"""
 579:     
 580:     def show_inventory_dialog():
 581:         """Show the folder inventory dialog"""
 582:         dialog = FolderInventoryDialog(taskbar_instance.root)
 583:         dialog.lift()
 584:         dialog.focus_force()
 585:     
 586:     # Create the inventory button
 587:     inventory_btn = tk.Button(taskbar_instance.main_frame, text="Inventory", 
 588:                              bg=Colors.DARK_GREEN, fg=Colors.WHITE,
 589:                              relief=tk.FLAT, font=Fonts.TASKBAR_BUTTON, 
 590:                              cursor='hand2', activebackground=Colors.HOVER_GREEN, 
 591:                              bd=0, padx=15, command=show_inventory_dialog)
 592:     
 593:     return inventory_btn

────────────────────────────────────────────────────────────────────────────────
FILE: inventory_view_window.py
────────────────────────────────────────────────────────────────────────────────
Path: inventory_view_window.py
Size: 21.1 KB
Lines: 498 total, 396 non-empty
Characters: 21,071
Type: .PY file
────────────────────────────────────────────────────────────────────────────────

   1: # inventory_view_window.py
   2: """
   3: Interactive inventory view window with Excel-like filtering capabilities
   4: This component will be reused throughout the SuiteView project for data grids
   5: """
   6: 
   7: import tkinter as tk
   8: from tkinter import ttk, messagebox
   9: from datetime import datetime
  10: from config import Colors, Fonts, Dimensions
  11: from ui_components import CustomDialog
  12: 
  13: class InventoryViewWindow(tk.Toplevel):
  14:     """Interactive window for viewing inventory data with Excel-like filtering"""
  15:     
  16:     def __init__(self, parent, inventory_data, error_data, scan_info):
  17:         super().__init__(parent)
  18:         self.parent = parent
  19:         self.inventory_data = inventory_data.copy()  # Original data
  20:         self.filtered_data = inventory_data.copy()   # Current filtered data
  21:         self.error_data = error_data
  22:         self.scan_info = scan_info
  23:         
  24:         # Filter state tracking
  25:         self.active_filters = {}  # column_name -> set of selected values
  26:         self.column_unique_values = {}  # column_name -> list of unique values
  27:         
  28:         # Window setup
  29:         self.title("Folder Inventory - Interactive View")
  30:         self.configure(bg=Colors.DARK_GREEN)
  31:         self.attributes('-topmost', True)
  32:         self.geometry("1000x700")
  33:         
  34:         # Make window resizable
  35:         self.resizable(True, True)
  36:         
  37:         # Main container
  38:         self.main_frame = tk.Frame(self, bg=Colors.DARK_GREEN, relief=tk.RAISED, bd=2)
  39:         self.main_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
  40:         
  41:         # Create header with scan information
  42:         self.create_header()
  43:         
  44:         # Create the filterable data grid
  45:         self.create_data_grid()
  46:         
  47:         # Create footer with action buttons
  48:         self.create_footer()
  49:         
  50:         # Initialize data
  51:         self.populate_grid()
  52:         self.update_stats()
  53:         
  54:         # Bind window close event
  55:         self.protocol("WM_DELETE_WINDOW", self.on_closing)
  56:         
  57:         # Center the window
  58:         self.center_window()
  59:     
  60:     def create_header(self):
  61:         """Create header with scan information"""
  62:         header_frame = tk.Frame(self.main_frame, bg=Colors.LIGHT_GREEN, relief=tk.RAISED, bd=1)
  63:         header_frame.pack(fill=tk.X, padx=2, pady=2)
  64:         
  65:         # Title
  66:         title_label = tk.Label(header_frame, text="📁 Folder Inventory Results", 
  67:                               bg=Colors.LIGHT_GREEN, fg=Colors.BLACK,
  68:                               font=('Arial', 14, 'bold'))
  69:         title_label.pack(pady=5)
  70:         
  71:         # Scan information in a grid
  72:         info_frame = tk.Frame(header_frame, bg=Colors.LIGHT_GREEN)
  73:         info_frame.pack(pady=5)
  74:         
  75:         # Row 1: Folder and Date
  76:         tk.Label(info_frame, text="Scanned Folder:", bg=Colors.LIGHT_GREEN, 
  77:                 fg=Colors.BLACK, font=Fonts.DIALOG_LABEL).grid(row=0, column=0, sticky='w', padx=5)
  78:         tk.Label(info_frame, text=self.scan_info['folder'], bg=Colors.LIGHT_GREEN, 
  79:                 fg=Colors.DARK_GREEN, font=Fonts.DIALOG_LABEL).grid(row=0, column=1, sticky='w', padx=5)
  80:         
  81:         tk.Label(info_frame, text="Generated:", bg=Colors.LIGHT_GREEN, 
  82:                 fg=Colors.BLACK, font=Fonts.DIALOG_LABEL).grid(row=0, column=2, sticky='w', padx=20)
  83:         tk.Label(info_frame, text=self.scan_info['generated'], bg=Colors.LIGHT_GREEN, 
  84:                 fg=Colors.DARK_GREEN, font=Fonts.DIALOG_LABEL).grid(row=0, column=3, sticky='w', padx=5)
  85:         
  86:         # Row 2: Total Items and Content Type
  87:         self.stats_label = tk.Label(info_frame, text="", bg=Colors.LIGHT_GREEN, 
  88:                                    fg=Colors.BLACK, font=Fonts.DIALOG_LABEL)
  89:         self.stats_label.grid(row=1, column=0, columnspan=2, sticky='w', padx=5, pady=5)
  90:         
  91:         content_type_text = {
  92:             'files': 'Files Only',
  93:             'folders': 'Folders Only', 
  94:             'both': 'Files and Folders'
  95:         }.get(self.scan_info['content_type'], 'Unknown')
  96:         
  97:         tk.Label(info_frame, text=f"Content: {content_type_text}", bg=Colors.LIGHT_GREEN, 
  98:                 fg=Colors.DARK_GREEN, font=Fonts.DIALOG_LABEL).grid(row=1, column=2, columnspan=2, sticky='w', padx=20)
  99:     
 100:     def create_data_grid(self):
 101:         """Create the main data grid with filtering"""
 102:         # Grid container
 103:         grid_frame = tk.Frame(self.main_frame, bg=Colors.LIGHT_GREEN, relief=tk.SUNKEN, bd=1)
 104:         grid_frame.pack(fill=tk.BOTH, expand=True, padx=2, pady=2)
 105:         
 106:         # Create Treeview for the data grid
 107:         self.tree = ttk.Treeview(grid_frame, show='tree headings')
 108:         
 109:         # Define columns (excluding Size (Bytes) from display but keeping in data)
 110:         self.columns = ['Name', 'Full Path', 'Type', 'Size', 'Modified Date']
 111:         self.tree['columns'] = self.columns
 112:         
 113:         # Configure tree column (hidden)
 114:         self.tree.column('#0', width=0, stretch=False)
 115:         self.tree.heading('#0', text='')
 116:         
 117:         # Configure data columns
 118:         column_widths = {
 119:             'Name': 200,
 120:             'Full Path': 300,
 121:             'Type': 80,
 122:             'Size': 100,
 123:             'Modified Date': 150
 124:         }
 125:         
 126:         for col in self.columns:
 127:             self.tree.column(col, width=column_widths.get(col, 100), anchor='w')
 128:             # Create clickable headers for filtering
 129:             self.tree.heading(col, text=f"{col} ▼", command=lambda c=col: self.show_filter_menu(c))
 130:         
 131:         # Scrollbars
 132:         v_scrollbar = ttk.Scrollbar(grid_frame, orient=tk.VERTICAL, command=self.tree.yview)
 133:         h_scrollbar = ttk.Scrollbar(grid_frame, orient=tk.HORIZONTAL, command=self.tree.xview)
 134:         self.tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
 135:         
 136:         # Pack grid components
 137:         self.tree.grid(row=0, column=0, sticky='nsew')
 138:         v_scrollbar.grid(row=0, column=1, sticky='ns')
 139:         h_scrollbar.grid(row=1, column=0, sticky='ew')
 140:         
 141:         # Configure grid weights
 142:         grid_frame.grid_rowconfigure(0, weight=1)
 143:         grid_frame.grid_columnconfigure(0, weight=1)
 144:         
 145:         # Style the treeview
 146:         style = ttk.Style()
 147:         style.configure('Treeview', background=Colors.LIGHT_GREEN, 
 148:                        foreground=Colors.BLACK, fieldbackground=Colors.LIGHT_GREEN)
 149:         style.configure('Treeview.Heading', background=Colors.MEDIUM_GREEN,
 150:                        foreground=Colors.BLACK, font=Fonts.MENU_HEADER)
 151:     
 152:     def create_footer(self):
 153:         """Create footer with action buttons and filter status"""
 154:         footer_frame = tk.Frame(self.main_frame, bg=Colors.DARK_GREEN, height=50)
 155:         footer_frame.pack(fill=tk.X, side=tk.BOTTOM, padx=2, pady=2)
 156:         footer_frame.pack_propagate(False)
 157:         
 158:         # Left side - filter status
 159:         filter_frame = tk.Frame(footer_frame, bg=Colors.DARK_GREEN)
 160:         filter_frame.pack(side=tk.LEFT, fill=tk.Y)
 161:         
 162:         self.filter_status_label = tk.Label(filter_frame, text="No filters applied", 
 163:                                            bg=Colors.DARK_GREEN, fg=Colors.WHITE,
 164:                                            font=Fonts.MENU_ITEM)
 165:         self.filter_status_label.pack(side=tk.LEFT, padx=10, pady=5)
 166:         
 167:         # Right side - action buttons
 168:         button_frame = tk.Frame(footer_frame, bg=Colors.DARK_GREEN)
 169:         button_frame.pack(side=tk.RIGHT, fill=tk.Y)
 170:         
 171:         # Clear Filters button
 172:         clear_btn = tk.Button(button_frame, text="Clear All Filters", 
 173:                              bg=Colors.MEDIUM_GREEN, fg=Colors.BLACK,
 174:                              relief=tk.RAISED, bd=1, cursor='hand2',
 175:                              font=Fonts.MENU_ITEM, padx=10,
 176:                              command=self.clear_all_filters)
 177:         clear_btn.pack(side=tk.LEFT, padx=5, pady=5)
 178:         
 179:         # Export to Excel button
 180:         export_btn = tk.Button(button_frame, text="Export to Excel", 
 181:                               bg=Colors.MEDIUM_GREEN, fg=Colors.BLACK,
 182:                               relief=tk.RAISED, bd=1, cursor='hand2',
 183:                               font=Fonts.MENU_ITEM, padx=10,
 184:                               command=self.export_to_excel)
 185:         export_btn.pack(side=tk.LEFT, padx=5, pady=5)
 186:         
 187:         # Close button
 188:         close_btn = tk.Button(button_frame, text="Close", 
 189:                              bg=Colors.INACTIVE_GRAY, fg=Colors.WHITE,
 190:                              relief=tk.RAISED, bd=1, cursor='hand2',
 191:                              font=Fonts.MENU_ITEM, padx=10,
 192:                              command=self.on_closing)
 193:         close_btn.pack(side=tk.LEFT, padx=5, pady=5)
 194:     
 195:     def populate_grid(self):
 196:         """Populate the grid with current filtered data"""
 197:         # Clear existing items
 198:         for item in self.tree.get_children():
 199:             self.tree.delete(item)
 200:         
 201:         # Add filtered data
 202:         for item in self.filtered_data:
 203:             values = [item[col] for col in self.columns]
 204:             self.tree.insert('', 'end', values=values)
 205:         
 206:         # Calculate unique values for each column (from original data for proper filtering)
 207:         self.calculate_unique_values()
 208:     
 209:     def calculate_unique_values(self):
 210:         """Calculate unique values for each column from original data"""
 211:         self.column_unique_values = {}
 212:         for col in self.columns:
 213:             unique_vals = set()
 214:             for item in self.inventory_data:
 215:                 val = item.get(col, '')
 216:                 if val != '':  # Don't include empty values
 217:                     unique_vals.add(str(val))
 218:             self.column_unique_values[col] = sorted(list(unique_vals))
 219:     
 220:     def show_filter_menu(self, column):
 221:         """Show filter menu for a specific column"""
 222:         FilterMenuDialog(self, column, self.column_unique_values[column], 
 223:                         self.active_filters.get(column, set()), self.apply_filter)
 224:     
 225:     def apply_filter(self, column, selected_values):
 226:         """Apply filter to a specific column"""
 227:         if selected_values:
 228:             self.active_filters[column] = set(selected_values)
 229:         else:
 230:             # Remove filter if no values selected
 231:             if column in self.active_filters:
 232:                 del self.active_filters[column]
 233:         
 234:         # Apply all filters
 235:         self.filter_data()
 236:         self.update_display()
 237:         self.update_filter_status()
 238:     
 239:     def filter_data(self):
 240:         """Apply all active filters to the data"""
 241:         self.filtered_data = []
 242:         
 243:         for item in self.inventory_data:
 244:             include_item = True
 245:             
 246:             # Check each active filter
 247:             for filter_col, filter_values in self.active_filters.items():
 248:                 item_value = str(item.get(filter_col, ''))
 249:                 if item_value not in filter_values:
 250:                     include_item = False
 251:                     break
 252:             
 253:             if include_item:
 254:                 self.filtered_data.append(item)
 255:     
 256:     def update_display(self):
 257:         """Update the grid display with filtered data"""
 258:         # Clear existing items
 259:         for item in self.tree.get_children():
 260:             self.tree.delete(item)
 261:         
 262:         # Add filtered data
 263:         for item in self.filtered_data:
 264:             values = [item[col] for col in self.columns]
 265:             self.tree.insert('', 'end', values=values)
 266:         
 267:         # Update stats
 268:         self.update_stats()
 269:     
 270:     def update_stats(self):
 271:         """Update the statistics display"""
 272:         total_original = len(self.inventory_data)
 273:         total_filtered = len(self.filtered_data)
 274:         
 275:         if total_filtered == total_original:
 276:             stats_text = f"Total Items: {total_original:,}"
 277:         else:
 278:             stats_text = f"Showing: {total_filtered:,} of {total_original:,} items"
 279:         
 280:         self.stats_label.config(text=stats_text)
 281:     
 282:     def update_filter_status(self):
 283:         """Update the filter status display"""
 284:         if not self.active_filters:
 285:             self.filter_status_label.config(text="No filters applied")
 286:         else:
 287:             filter_count = len(self.active_filters)
 288:             filter_text = f"{filter_count} filter{'s' if filter_count > 1 else ''} applied: "
 289:             filter_details = []
 290:             for col, values in self.active_filters.items():
 291:                 if len(values) == 1:
 292:                     filter_details.append(f"{col}={list(values)[0]}")
 293:                 else:
 294:                     filter_details.append(f"{col}({len(values)} values)")
 295:             filter_text += ", ".join(filter_details)
 296:             
 297:             # Truncate if too long
 298:             if len(filter_text) > 80:
 299:                 filter_text = filter_text[:77] + "..."
 300:             
 301:             self.filter_status_label.config(text=filter_text)
 302:     
 303:     def clear_all_filters(self):
 304:         """Clear all active filters"""
 305:         self.active_filters = {}
 306:         self.filtered_data = self.inventory_data.copy()
 307:         self.update_display()
 308:         self.update_filter_status()
 309:         
 310:         # Update column headers to remove filter indicators
 311:         for col in self.columns:
 312:             self.tree.heading(col, text=f"{col} ▼")
 313:     
 314:     def export_to_excel(self):
 315:         """Export the current filtered data to Excel"""
 316:         from folder_inventory import ExcelInventoryCreator
 317:         
 318:         try:
 319:             excel_creator = ExcelInventoryCreator()
 320:             excel_creator.create_workbook(self.filtered_data, self.error_data, self.scan_info['folder'])
 321:             messagebox.showinfo("Export Complete", "Filtered data has been exported to Excel.")
 322:         except Exception as e:
 323:             messagebox.showerror("Export Error", f"Failed to export to Excel:\n{str(e)}")
 324:     
 325:     def center_window(self):
 326:         """Center the window on screen"""
 327:         self.update_idletasks()
 328:         width = self.winfo_width()
 329:         height = self.winfo_height()
 330:         x = (self.winfo_screenwidth() // 2) - (width // 2)
 331:         y = (self.winfo_screenheight() // 2) - (height // 2)
 332:         self.geometry(f"{width}x{height}+{x}+{y}")
 333:     
 334:     def on_closing(self):
 335:         """Handle window closing"""
 336:         self.destroy()
 337: 
 338: 
 339: class FilterMenuDialog(CustomDialog):
 340:     """Dialog for selecting filter values for a column (Excel-like)"""
 341:     
 342:     def __init__(self, parent, column_name, unique_values, current_selection, apply_callback):
 343:         super().__init__(parent, f"Filter: {column_name}", width=350, height=400)
 344:         
 345:         self.column_name = column_name
 346:         self.unique_values = unique_values
 347:         self.current_selection = current_selection.copy()
 348:         self.apply_callback = apply_callback
 349:         
 350:         # If no current selection, default to all selected
 351:         if not self.current_selection:
 352:             self.current_selection = set(unique_values)
 353:         
 354:         self.create_filter_interface()
 355:         self.create_action_buttons()
 356:     
 357:     def create_filter_interface(self):
 358:         """Create the filter selection interface"""
 359:         # Search box
 360:         search_frame = tk.Frame(self.dialog_content, bg=Colors.LIGHT_GREEN)
 361:         search_frame.pack(fill=tk.X, pady=5)
 362:         
 363:         tk.Label(search_frame, text="Search:", bg=Colors.LIGHT_GREEN, 
 364:                 fg=Colors.BLACK, font=Fonts.DIALOG_LABEL).pack(side=tk.LEFT)
 365:         
 366:         self.search_var = tk.StringVar()
 367:         self.search_var.trace('w', self.filter_list)
 368:         search_entry = tk.Entry(search_frame, textvariable=self.search_var, 
 369:                                font=Fonts.DIALOG_LABEL)
 370:         search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)
 371:         
 372:         # Select All / None buttons
 373:         select_frame = tk.Frame(self.dialog_content, bg=Colors.LIGHT_GREEN)
 374:         select_frame.pack(fill=tk.X, pady=5)
 375:         
 376:         select_all_btn = tk.Button(select_frame, text="Select All", 
 377:                                   bg=Colors.MEDIUM_GREEN, fg=Colors.BLACK,
 378:                                   command=self.select_all, font=Fonts.DIALOG_LABEL)
 379:         select_all_btn.pack(side=tk.LEFT, padx=5)
 380:         
 381:         select_none_btn = tk.Button(select_frame, text="Select None", 
 382:                                    bg=Colors.MEDIUM_GREEN, fg=Colors.BLACK,
 383:                                    command=self.select_none, font=Fonts.DIALOG_LABEL)
 384:         select_none_btn.pack(side=tk.LEFT, padx=5)
 385:         
 386:         # Listbox with checkboxes (simulated with Treeview)
 387:         list_frame = tk.Frame(self.dialog_content, bg=Colors.LIGHT_GREEN)
 388:         list_frame.pack(fill=tk.BOTH, expand=True, pady=5)
 389:         
 390:         # Create Treeview for checkbox list
 391:         self.filter_tree = ttk.Treeview(list_frame, show='tree', height=12)
 392:         self.filter_tree.column('#0', width=300)
 393:         
 394:         # Scrollbar for the list
 395:         filter_scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, 
 396:                                         command=self.filter_tree.yview)
 397:         self.filter_tree.configure(yscrollcommand=filter_scrollbar.set)
 398:         
 399:         self.filter_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
 400:         filter_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
 401:         
 402:         # Populate the list
 403:         self.populate_filter_list()
 404:         
 405:         # Bind double-click to toggle selection
 406:         self.filter_tree.bind('<Double-1>', self.toggle_item)
 407:         self.filter_tree.bind('<Return>', self.toggle_item)
 408:     
 409:     def populate_filter_list(self, search_text=""):
 410:         """Populate the filter list with checkboxes"""
 411:         # Clear existing items
 412:         for item in self.filter_tree.get_children():
 413:             self.filter_tree.delete(item)
 414:         
 415:         # Filter values based on search
 416:         filtered_values = [val for val in self.unique_values 
 417:                           if search_text.lower() in val.lower()] if search_text else self.unique_values
 418:         
 419:         # Add items with checkbox indicators
 420:         for value in filtered_values:
 421:             checkbox = "☑" if value in self.current_selection else "☐"
 422:             display_text = f"{checkbox} {value}"
 423:             item_id = self.filter_tree.insert('', 'end', text=display_text, values=[value])
 424:     
 425:     def filter_list(self, *args):
 426:         """Filter the list based on search text"""
 427:         search_text = self.search_var.get()
 428:         self.populate_filter_list(search_text)
 429:     
 430:     def toggle_item(self, event=None):
 431:         """Toggle selection of an item"""
 432:         selected_item = self.filter_tree.selection()
 433:         if not selected_item:
 434:             return
 435:         
 436:         item_id = selected_item[0]
 437:         values = self.filter_tree.item(item_id, 'values')
 438:         if values:
 439:             value = values[0]
 440:             
 441:             if value in self.current_selection:
 442:                 self.current_selection.remove(value)
 443:             else:
 444:                 self.current_selection.add(value)
 445:             
 446:             # Update display
 447:             search_text = self.search_var.get()
 448:             self.populate_filter_list(search_text)
 449:     
 450:     def select_all(self):
 451:         """Select all visible items"""
 452:         search_text = self.search_var.get()
 453:         filtered_values = [val for val in self.unique_values 
 454:                           if search_text.lower() in val.lower()] if search_text else self.unique_values
 455:         
 456:         for value in filtered_values:
 457:             self.current_selection.add(value)
 458:         
 459:         self.populate_filter_list(search_text)
 460:     
 461:     def select_none(self):
 462:         """Deselect all visible items"""
 463:         search_text = self.search_var.get()
 464:         filtered_values = [val for val in self.unique_values 
 465:                           if search_text.lower() in val.lower()] if search_text else self.unique_values
 466:         
 467:         for value in filtered_values:
 468:             self.current_selection.discard(value)
 469:         
 470:         self.populate_filter_list(search_text)
 471:     
 472:     def create_action_buttons(self):
 473:         """Create OK and Cancel buttons"""
 474:         button_container = tk.Frame(self.button_frame, bg=Colors.LIGHT_GREEN)
 475:         button_container.pack(expand=True)
 476:         
 477:         ok_btn = tk.Button(button_container, text="OK", 
 478:                           bg=Colors.DARK_GREEN, fg=Colors.WHITE,
 479:                           command=self.apply_filter, width=Dimensions.DIALOG_BUTTON_WIDTH,
 480:                           font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1)
 481:         ok_btn.pack(side=tk.LEFT, padx=10)
 482:         
 483:         cancel_btn = tk.Button(button_container, text="Cancel", 
 484:                               bg=Colors.INACTIVE_GRAY, fg=Colors.WHITE,
 485:                               command=self.cancel, width=Dimensions.DIALOG_BUTTON_WIDTH,
 486:                               font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1)
 487:         cancel_btn.pack(side=tk.LEFT, padx=10)
 488:         
 489:         ok_btn.focus_set()
 490:     
 491:     def apply_filter(self):
 492:         """Apply the selected filter"""
 493:         self.apply_callback(self.column_name, list(self.current_selection))
 494:         self.destroy()
 495:     
 496:     def cancel(self):
 497:         """Cancel without applying changes"""
 498:         self.destroy()

────────────────────────────────────────────────────────────────────────────────
FILE: links_manager.py
────────────────────────────────────────────────────────────────────────────────
Path: links_manager.py
Size: 10.5 KB
Lines: 292 total, 241 non-empty
Characters: 10,504
Type: Data management for links and categories
────────────────────────────────────────────────────────────────────────────────

   1: # links_manager.py
   2: """
   3: Data management for Quick Links
   4: Handles loading, saving, and CRUD operations for links
   5: """
   6: 
   7: import json
   8: from pathlib import Path
   9: from config import Paths, DEFAULT_CATEGORIES
  10: 
  11: class LinksManager:
  12:     """Manages saved links with categories"""
  13:     
  14:     def __init__(self):
  15:         # Ensure config directory exists
  16:         Paths.ensure_config_dir()
  17:         self.config_file = Paths.LINKS_FILE
  18:         self.links = self.load_links()
  19:     
  20:     def load_links(self):
  21:         """Load links from config file"""
  22:         if self.config_file.exists():
  23:             try:
  24:                 with open(self.config_file, 'r', encoding='utf-8') as f:
  25:                     data = json.load(f)
  26:                     # Ensure all required keys exist
  27:                     if 'categories' not in data:
  28:                         data['categories'] = DEFAULT_CATEGORIES.copy()
  29:                     if 'links' not in data:
  30:                         data['links'] = []
  31:                     if 'ui_preferences' not in data:
  32:                         data['ui_preferences'] = {"menu_height": 300}
  33:                     return data
  34:             except (json.JSONDecodeError, FileNotFoundError, KeyError) as e:
  35:                 print(f"Error loading links: {e}. Creating new config.")
  36:                 return self._create_default_config()
  37:         
  38:         return self._create_default_config()
  39:     
  40:     def _create_default_config(self):
  41:         """Create default configuration"""
  42:         return {
  43:             "categories": DEFAULT_CATEGORIES.copy(),
  44:             "links": [],
  45:             "ui_preferences": {
  46:                 "menu_height": 300  # Default menu height
  47:             }
  48:         }
  49:     
  50:     def save_links(self):
  51:         """Save links to config file"""
  52:         try:
  53:             with open(self.config_file, 'w', encoding='utf-8') as f:
  54:                 json.dump(self.links, f, indent=2, ensure_ascii=False)
  55:             return True
  56:         except Exception as e:
  57:             print(f"Error saving links: {e}")
  58:             return False
  59:     
  60:     def add_link(self, name, path, category, icon="📄"):
  61:         """Add a new link"""
  62:         if not name or not path:
  63:             return False
  64:         
  65:         # Ensure category exists
  66:         if category not in self.links["categories"]:
  67:             self.links["categories"].append(category)
  68:         
  69:         new_link = {
  70:             "name": name.strip(),
  71:             "path": path.strip(),
  72:             "category": category,
  73:             "icon": icon
  74:         }
  75:         
  76:         self.links["links"].append(new_link)
  77:         return self.save_links()
  78:     
  79:     def update_link(self, index, name, path, category, icon="📄"):
  80:         """Update an existing link"""
  81:         if not (0 <= index < len(self.links["links"])):
  82:             return False
  83:         
  84:         if not name or not path:
  85:             return False
  86:         
  87:         # Ensure category exists
  88:         if category not in self.links["categories"]:
  89:             self.links["categories"].append(category)
  90:         
  91:         self.links["links"][index] = {
  92:             "name": name.strip(),
  93:             "path": path.strip(),
  94:             "category": category,
  95:             "icon": icon
  96:         }
  97:         
  98:         return self.save_links()
  99:     
 100:     def remove_link(self, index):
 101:         """Remove a link by index"""
 102:         if 0 <= index < len(self.links["links"]):
 103:             del self.links["links"][index]
 104:             return self.save_links()
 105:         return False
 106:     
 107:     def get_links_by_category(self, category):
 108:         """Get all links in a category"""
 109:         return [link for link in self.links["links"] if link["category"] == category]
 110:     
 111:     def get_all_links(self):
 112:         """Get all links"""
 113:         return self.links["links"].copy()
 114:     
 115:     def get_categories(self):
 116:         """Get all categories"""
 117:         return self.links["categories"].copy()
 118:     
 119:     def add_category(self, category_name):
 120:         """Add a new category"""
 121:         if category_name and category_name not in self.links["categories"]:
 122:             self.links["categories"].append(category_name)
 123:             return self.save_links()
 124:         return False
 125:     
 126:     def remove_category(self, category_name):
 127:         """Remove a category and all its links"""
 128:         if category_name in self.links["categories"]:
 129:             # Remove all links in this category
 130:             self.links["links"] = [
 131:                 link for link in self.links["links"] 
 132:                 if link["category"] != category_name
 133:             ]
 134:             # Remove the category
 135:             self.links["categories"].remove(category_name)
 136:             return self.save_links()
 137:         return False
 138:     
 139:     def move_link(self, from_index, to_index):
 140:         """Move a link from one position to another"""
 141:         if (0 <= from_index < len(self.links["links"]) and 
 142:             0 <= to_index < len(self.links["links"])):
 143:             
 144:             link = self.links["links"].pop(from_index)
 145:             self.links["links"].insert(to_index, link)
 146:             return self.save_links()
 147:         return False
 148:     
 149:     def search_links(self, query):
 150:         """Search links by name or path"""
 151:         query = query.lower().strip()
 152:         if not query:
 153:             return self.get_all_links()
 154:         
 155:         results = []
 156:         for link in self.links["links"]:
 157:             if (query in link["name"].lower() or 
 158:                 query in link["path"].lower() or
 159:                 query in link["category"].lower()):
 160:                 results.append(link)
 161:         
 162:         return results
 163:     
 164:     def get_stats(self):
 165:         """Get statistics about links"""
 166:         total_links = len(self.links["links"])
 167:         categories_count = {}
 168:         
 169:         for link in self.links["links"]:
 170:             category = link["category"]
 171:             categories_count[category] = categories_count.get(category, 0) + 1
 172:         
 173:         return {
 174:             "total_links": total_links,
 175:             "total_categories": len(self.links["categories"]),
 176:             "links_per_category": categories_count
 177:         }
 178:     
 179:     def export_links(self, file_path):
 180:         """Export links to a JSON file"""
 181:         try:
 182:             with open(file_path, 'w', encoding='utf-8') as f:
 183:                 json.dump(self.links, f, indent=2, ensure_ascii=False)
 184:             return True
 185:         except Exception as e:
 186:             print(f"Error exporting links: {e}")
 187:             return False
 188:     
 189:     def import_links(self, file_path, merge=True):
 190:         """Import links from a JSON file"""
 191:         try:
 192:             with open(file_path, 'r', encoding='utf-8') as f:
 193:                 imported_data = json.load(f)
 194:             
 195:             if not merge:
 196:                 # Replace all data
 197:                 self.links = imported_data
 198:             else:
 199:                 # Merge data
 200:                 for category in imported_data.get("categories", []):
 201:                     if category not in self.links["categories"]:
 202:                         self.links["categories"].append(category)
 203:                 
 204:                 for link in imported_data.get("links", []):
 205:                     # Check for duplicates (same name and path)
 206:                     duplicate = any(
 207:                         existing["name"] == link["name"] and existing["path"] == link["path"]
 208:                         for existing in self.links["links"]
 209:                     )
 210:                     if not duplicate:
 211:                         self.links["links"].append(link)
 212:             
 213:             return self.save_links()
 214:         except Exception as e:
 215:             print(f"Error importing links: {e}")
 216:             return False
 217:     
 218:     def get_menu_height(self):
 219:         """Get stored menu height"""
 220:         return self.links.get("ui_preferences", {}).get("menu_height", 300)
 221:     
 222:     def set_menu_height(self, height):
 223:         """Set menu height and save"""
 224:         if "ui_preferences" not in self.links:
 225:             self.links["ui_preferences"] = {}
 226:         self.links["ui_preferences"]["menu_height"] = height
 227:         return self.save_links()
 228:     
 229:     def move_link_to_category(self, link_index, new_category):
 230:         """Move a link to a different category"""
 231:         if not (0 <= link_index < len(self.links["links"])):
 232:             return False
 233:         
 234:         # Ensure new category exists
 235:         if new_category not in self.links["categories"]:
 236:             self.links["categories"].append(new_category)
 237:         
 238:         # Update the link's category
 239:         self.links["links"][link_index]["category"] = new_category
 240:         return self.save_links()
 241:     
 242:     def reorder_links_in_category(self, category, old_position, new_position):
 243:         """Reorder links within a category"""
 244:         category_links = [i for i, link in enumerate(self.links["links"]) 
 245:                          if link["category"] == category]
 246:         
 247:         if not (0 <= old_position < len(category_links) and 
 248:                 0 <= new_position < len(category_links)):
 249:             return False
 250:         
 251:         # Get the actual indices in the main links array
 252:         old_index = category_links[old_position]
 253:         new_index = category_links[new_position]
 254:         
 255:         # Move the link
 256:         link_to_move = self.links["links"].pop(old_index)
 257:         
 258:         # Adjust new_index if it's affected by the removal
 259:         if old_index < new_index:
 260:             new_index -= 1
 261:         
 262:         # Calculate the correct insertion position
 263:         if new_position == 0:
 264:             # Insert at the beginning of the category
 265:             insert_index = category_links[0] if old_index != category_links[0] else 0
 266:         elif new_position == len(category_links) - 1:
 267:             # Insert at the end of the category
 268:             insert_index = len(self.links["links"])
 269:         else:
 270:             # Insert at the specified position
 271:             insert_index = category_links[new_position]
 272:             if old_index < insert_index:
 273:                 insert_index -= 1
 274:         
 275:         self.links["links"].insert(insert_index, link_to_move)
 276:         return self.save_links()
 277:     
 278:     def get_link_position_in_category(self, link_index):
 279:         """Get the position of a link within its category"""
 280:         if not (0 <= link_index < len(self.links["links"])):
 281:             return -1
 282:         
 283:         link = self.links["links"][link_index]
 284:         category = link["category"]
 285:         
 286:         category_links = [i for i, l in enumerate(self.links["links"]) 
 287:                          if l["category"] == category]
 288:         
 289:         try:
 290:             return category_links.index(link_index)
 291:         except ValueError:
 292:             return -1

────────────────────────────────────────────────────────────────────────────────
FILE: main.py
────────────────────────────────────────────────────────────────────────────────
Path: main.py
Size: 1.1 KB
Lines: 42 total, 36 non-empty
Characters: 1,105
Type: Main application entry point
────────────────────────────────────────────────────────────────────────────────

   1: # main.py
   2: """
   3: Main entry point for SuiteView Taskbar Application
   4: """
   5: import sys
   6: import os
   7: 
   8: # Add the current directory to the Python path to ensure imports work
   9: current_dir = os.path.dirname(os.path.abspath(__file__))
  10: if current_dir not in sys.path:
  11:     sys.path.insert(0, current_dir)
  12: 
  13: # Now import our modules
  14: try:
  15:     from taskbar import SuiteViewTaskbar
  16:     from config import Settings
  17: except ImportError as e:
  18:     print(f"Import error: {e}")
  19:     print(f"Current directory: {current_dir}")
  20:     print(f"Files in directory: {os.listdir(current_dir)}")
  21:     sys.exit(1)
  22: 
  23: def main():
  24:     """Main application entry point"""
  25:     try:
  26:         print(f"Starting {Settings.APP_NAME} v{Settings.VERSION}")
  27:         
  28:         # Create and run the taskbar application
  29:         app = SuiteViewTaskbar()
  30:         app.run()
  31:         
  32:     except KeyboardInterrupt:
  33:         print("Application interrupted by user")
  34:         sys.exit(0)
  35:     except Exception as e:
  36:         print(f"Error starting application: {e}")
  37:         import traceback
  38:         traceback.print_exc()
  39:         sys.exit(1)
  40: 
  41: if __name__ == "__main__":
  42:     main()

────────────────────────────────────────────────────────────────────────────────
FILE: pinned_windows.py
────────────────────────────────────────────────────────────────────────────────
Path: pinned_windows.py
Size: 6.9 KB
Lines: 171 total, 140 non-empty
Characters: 6,881
Type: .PY file
────────────────────────────────────────────────────────────────────────────────

   1: # pinned_windows.py
   2: """
   3: Pinned windows section for SuiteView Taskbar
   4: Manages the pinned window buttons in the taskbar
   5: """
   6: 
   7: import tkinter as tk
   8: from config import Colors, Fonts, Settings
   9: from window_manager import ManagedWindow, WindowManager
  10: from ui_components import ConfirmationDialog
  11: 
  12: class PinnedWindowButton(tk.Frame):
  13:     """Individual pinned window button"""
  14:     
  15:     def __init__(self, parent, window: ManagedWindow, window_manager: WindowManager, 
  16:                  on_unpin_callback):
  17:         super().__init__(parent, bg=Colors.DARK_GREEN)
  18:         self.window = window
  19:         self.window_manager = window_manager
  20:         self.on_unpin_callback = on_unpin_callback
  21:         
  22:         # Create button
  23:         self.create_button()
  24:         
  25:         # Bind right-click for unpin
  26:         self.button.bind("<Button-3>", self.show_unpin_menu)
  27:     
  28:     def create_button(self):
  29:         """Create the toggle button"""
  30:         # Determine colors based on visibility
  31:         bg_color = Colors.WINDOW_VISIBLE if not self.window.is_hidden else Colors.WINDOW_HIDDEN
  32:         fg_color = Colors.BLACK if not self.window.is_hidden else Colors.WHITE
  33:         
  34:         # Truncate long names
  35:         display_text = self.window.app_name
  36:         if len(display_text) > 12:
  37:             display_text = display_text[:10] + "..."
  38:         
  39:         self.button = tk.Button(self, text=display_text,
  40:                                bg=bg_color, fg=fg_color,
  41:                                relief=tk.RAISED, bd=2,  # More visible border
  42:                                font=Fonts.TASKBAR_BUTTON,
  43:                                width=10, height=1,  # Explicit height
  44:                                cursor='hand2',
  45:                                activebackground=Colors.HOVER_GREEN,
  46:                                command=self.toggle_window)
  47:         self.button.pack(padx=2, pady=2)
  48:         
  49:         # Debug visibility
  50:         print(f"Button created for {display_text}")
  51:         print(f"Button bg: {bg_color}, fg: {fg_color}")
  52:     
  53:     def toggle_window(self):
  54:         """Toggle window visibility"""
  55:         if self.window.is_hidden:
  56:             self.window.bring_to_front()
  57:         else:
  58:             self.window_manager.toggle_window_visibility(self.window)
  59:         self.update_appearance()
  60:     
  61:     def update_appearance(self):
  62:         """Update button appearance based on window state"""
  63:         bg_color = Colors.WINDOW_VISIBLE if not self.window.is_hidden else Colors.WINDOW_HIDDEN
  64:         fg_color = Colors.BLACK if not self.window.is_hidden else Colors.WHITE
  65:         self.button.configure(bg=bg_color, fg=fg_color)
  66:     
  67:     def show_unpin_menu(self, event):
  68:         """Show right-click menu for unpinning"""
  69:         result = ConfirmationDialog.ask(
  70:             self.winfo_toplevel(),
  71:             "Unpin Window",
  72:             f"Unpin '{self.window.app_name}' from taskbar?",
  73:             icon="📌"
  74:         )
  75:         
  76:         if result:
  77:             self.window_manager.unpin_window(self.window)
  78:             self.on_unpin_callback()
  79: 
  80: class PinnedWindowsSection(tk.Frame):
  81:     """Section in taskbar for pinned windows"""
  82:     
  83:     def __init__(self, parent, window_manager: WindowManager):
  84:         super().__init__(parent, bg=Colors.PINNED_SECTION_BG, 
  85:                         relief=tk.SUNKEN, bd=2)
  86:         self.window_manager = window_manager
  87:         self.pinned_buttons = {}
  88:         
  89:         # Set minimum and fixed size
  90:         self.configure(width=Settings.PINNED_SECTION_WIDTH, height=35)
  91:         self.pack_propagate(False)  # Maintain fixed size
  92:         
  93:         # Add a visible border to debug
  94:         self.configure(highlightbackground=Colors.MEDIUM_GREEN, highlightthickness=1)
  95:         
  96:         # Create container for buttons with padding
  97:         self.button_container = tk.Frame(self, bg=Colors.PINNED_SECTION_BG)
  98:         self.button_container.pack(fill=tk.BOTH, expand=True, padx=5, pady=2)
  99:         
 100:         # Create label for empty state
 101:         self.empty_label = tk.Label(self.button_container, text="[Pinned Windows]", 
 102:                                    bg=Colors.PINNED_SECTION_BG,
 103:                                    fg=Colors.LIGHT_GREEN,
 104:                                    font=(Fonts.TASKBAR_BUTTON[0], 
 105:                                         Fonts.TASKBAR_BUTTON[1] - 2, 'italic'))
 106:         
 107:         # Start with empty state
 108:         self.show_empty_state()
 109:         
 110:         print(f"PinnedWindowsSection initialized: {self}")
 111:     
 112:     def refresh(self):
 113:         """Refresh the pinned windows display"""
 114:         print(f"\n=== PINNED SECTION REFRESH ===")
 115:         print(f"Current button count: {len(self.pinned_buttons)}")
 116:         
 117:         # Clear existing buttons
 118:         for hwnd in list(self.pinned_buttons.keys()):
 119:             print(f"Destroying old button for hwnd: {hwnd}")
 120:             self.pinned_buttons[hwnd].destroy()
 121:             del self.pinned_buttons[hwnd]
 122:         
 123:         # Get pinned windows
 124:         pinned_windows = self.window_manager.get_pinned_windows()
 125:         print(f"Found {len(pinned_windows)} pinned windows")
 126:         
 127:         if not pinned_windows:
 128:             print("No pinned windows - showing empty state")
 129:             self.show_empty_state()
 130:         else:
 131:             print("Has pinned windows - hiding empty state")
 132:             self.hide_empty_state()
 133:             
 134:             # Create buttons for pinned windows
 135:             for i, window in enumerate(pinned_windows):
 136:                 print(f"{i}. Creating button for: {window.display_name} (hwnd: {window.hwnd})")
 137:                 if window.is_valid():
 138:                     button = PinnedWindowButton(
 139:                         self.button_container, 
 140:                         window, 
 141:                         self.window_manager,
 142:                         self.refresh
 143:                     )
 144:                     button.pack(side=tk.LEFT, padx=2)
 145:                     self.pinned_buttons[window.hwnd] = button
 146:                     print(f"   Button created and packed")
 147:                     
 148:                     # Force update to ensure visibility
 149:                     button.update()
 150:                     self.button_container.update()
 151:                 else:
 152:                     print(f"   Window is not valid!")
 153:         
 154:         # Force the section to update
 155:         self.update_idletasks()
 156:         print(f"Button container visible: {self.button_container.winfo_viewable()}")
 157:         print(f"Section geometry: {self.winfo_width()}x{self.winfo_height()}")
 158:         print("=== END REFRESH ===\n")
 159:     
 160:     def show_empty_state(self):
 161:         """Show empty state label"""
 162:         self.empty_label.pack(expand=True)
 163:         
 164:     def hide_empty_state(self):
 165:         """Hide empty state label"""
 166:         self.empty_label.pack_forget()
 167:     
 168:     def update_window_states(self):
 169:         """Update appearance of all pinned window buttons"""
 170:         for button in self.pinned_buttons.values():
 171:             button.update_appearance()

────────────────────────────────────────────────────────────────────────────────
FILE: quick_links.py
────────────────────────────────────────────────────────────────────────────────
Path: quick_links.py
Size: 36.3 KB
Lines: 867 total, 691 non-empty
Characters: 36,276
Type: Quick links menu and management
────────────────────────────────────────────────────────────────────────────────

   1: # quick_links.py
   2: """
   3: Quick Links feature for SuiteView Taskbar
   4: Contains the links menu, dialogs, and management interface
   5: """
   6: 
   7: import tkinter as tk
   8: from tkinter import ttk, filedialog
   9: from config import Colors, Fonts, Dimensions
  10: from utils import UIUtils, FileUtils
  11: from ui_components import CustomDialog, ConfirmationDialog, FormField, CategoryHeader, WarningDialog, ErrorDialog
  12: from links_manager import LinksManager
  13: 
  14: class QuickLinksMenu(tk.Toplevel):
  15:     """Enhanced right-click context menu for managing links with column layout"""
  16:     
  17:     def __init__(self, parent, taskbar_instance, x, y):
  18:         super().__init__(parent)
  19:         self.parent = parent
  20:         self.taskbar_instance = taskbar_instance
  21:         self.links_manager = taskbar_instance.links_manager
  22:         
  23:         # Window setup
  24:         self.overrideredirect(True)
  25:         self.configure(bg=Colors.DARK_GREEN)
  26:         self.attributes('-topmost', True)
  27:         self.attributes('-alpha', 0.98)
  28:         
  29:         # Initialize resize variables
  30:         self.is_resizing = False
  31:         self.resize_start_y = 0
  32:         self.original_height = 0
  33:         self.bottom_y = 0  # Track bottom position for locked resizing
  34:         
  35:         # Initialize drag and drop variables
  36:         self.is_dragging_link = False
  37:         self.drag_start_time = 0
  38:         self.drag_threshold = 5  # pixels to move before considering it a drag
  39:         self.drag_time_threshold = 200  # milliseconds to wait before drag
  40:         self.dragged_link_data = None
  41:         self.dragged_link_index = None
  42:         self.drag_visual = None
  43:         self.drop_indicators = []
  44:         
  45:         # Position the menu
  46:         self.geometry(f"+{x}+{y}")
  47:         
  48:         # Main container with dark green border
  49:         self.main_frame = tk.Frame(self, bg=Colors.DARK_GREEN, relief=tk.RAISED, bd=2)
  50:         self.main_frame.pack(fill=tk.BOTH, expand=True, padx=2, pady=2)
  51:         
  52:         # Header frame with buttons
  53:         self.create_header()
  54:         
  55:         # Content area with light green background
  56:         self.content_frame = tk.Frame(self.main_frame, bg=Colors.LIGHT_GREEN, relief=tk.SUNKEN, bd=1)
  57:         self.content_frame.pack(fill=tk.BOTH, expand=True, padx=2, pady=2)
  58:         
  59:         # Create column layout for all categories
  60:         self.create_column_layout()
  61:         
  62:         # Bind events
  63:         self.bind("<FocusOut>", lambda e: self.destroy())
  64:         self.focus_set()
  65:         
  66:         # Set minimum size based on content and stored preferences
  67:         self.update_idletasks()
  68:         self.menu_width = max(Dimensions.MENU_MIN_WIDTH, self.winfo_reqwidth())
  69:         
  70:         # Use stored menu height or default
  71:         stored_height = self.links_manager.get_menu_height()
  72:         calculated_height = max(Dimensions.MENU_MIN_HEIGHT, self.winfo_reqheight())
  73:         self.menu_height = max(stored_height, calculated_height)
  74:         
  75:         self.geometry(f"{self.menu_width}x{self.menu_height}")
  76:         
  77:         # Store bottom position for locked resizing
  78:         self.update_idletasks()
  79:         self.bottom_y = self.winfo_y() + self.winfo_height()
  80:         
  81:         # Setup resize functionality
  82:         self.setup_resize_functionality()
  83:         
  84:     
  85:     def create_header(self):
  86:         """Create header with title and buttons"""
  87:         self.header_frame = tk.Frame(self.main_frame, bg=Colors.DARK_GREEN, height=25)
  88:         self.header_frame.pack(fill=tk.X, padx=1, pady=1)
  89:         self.header_frame.pack_propagate(False)
  90:         
  91:         # Create a resize area at the top of the header
  92:         resize_area = tk.Frame(self.header_frame, bg=Colors.MEDIUM_GREEN, height=3, cursor='sb_v_double_arrow')
  93:         resize_area.pack(fill=tk.X, side=tk.TOP)
  94:         
  95:         # Main header content
  96:         header_content = tk.Frame(self.header_frame, bg=Colors.DARK_GREEN)
  97:         header_content.pack(fill=tk.BOTH, expand=True)
  98:         
  99:         # Resize handle (left side) - more prominent
 100:         resize_handle = tk.Label(header_content, text="═══", bg=Colors.DARK_GREEN, fg=Colors.WHITE,
 101:                                font=('Arial', 6), cursor='sb_v_double_arrow', width=4)
 102:         resize_handle.pack(side=tk.LEFT, padx=2, pady=3)
 103:         
 104:         # Title with resize capability
 105:         title_label = tk.Label(header_content, text="Quick Links ↕", bg=Colors.DARK_GREEN, fg=Colors.WHITE,
 106:                              font=Fonts.MENU_HEADER, cursor='sb_v_double_arrow')
 107:         title_label.pack(side=tk.LEFT, padx=5, pady=3)
 108:         
 109:         # Bind resize events to multiple elements for better usability
 110:         for widget in [resize_area, resize_handle, title_label, self.header_frame]:
 111:             widget.bind("<Button-1>", self.start_resize)
 112:             widget.bind("<B1-Motion>", self.do_resize)
 113:             widget.bind("<ButtonRelease-1>", self.end_resize)
 114:             widget.bind("<Enter>", lambda e: self.configure(cursor='sb_v_double_arrow'))
 115:             widget.bind("<Leave>", lambda e: self.configure(cursor=''))
 116:         
 117:         # Buttons with green theme
 118:         button_frame = tk.Frame(header_content, bg=Colors.DARK_GREEN)
 119:         button_frame.pack(side=tk.RIGHT, padx=5)
 120:         
 121:         # Add button
 122:         add_btn = tk.Button(button_frame, text="Add", bg=Colors.MEDIUM_GREEN, fg=Colors.BLACK,
 123:                            relief=tk.RAISED, bd=1, cursor='hand2', 
 124:                            font=Fonts.MENU_ITEM, width=4, height=1,
 125:                            command=self.add_new_link)
 126:         add_btn.pack(side=tk.LEFT, padx=1)
 127:         
 128:         # View button (placeholder for future features)
 129:         view_btn = tk.Button(button_frame, text="Vie", bg=Colors.MEDIUM_GREEN, fg=Colors.BLACK,
 130:                             relief=tk.RAISED, bd=1, cursor='hand2',
 131:                             font=Fonts.MENU_ITEM, width=4, height=1)
 132:         view_btn.pack(side=tk.LEFT, padx=1)
 133:         
 134:         # Close button
 135:         close_btn = tk.Button(button_frame, text="X", bg=Colors.MEDIUM_GREEN, fg=Colors.BLACK,
 136:                              relief=tk.RAISED, bd=1, cursor='hand2',
 137:                              font=Fonts.MENU_ITEM, width=3, height=1,
 138:                              command=self.destroy)
 139:         close_btn.pack(side=tk.LEFT, padx=1)
 140:     
 141:     def create_column_layout(self):
 142:         """Create column layout showing all categories"""
 143:         # Container for columns
 144:         columns_frame = tk.Frame(self.content_frame, bg=Colors.LIGHT_GREEN)
 145:         columns_frame.pack(fill=tk.BOTH, expand=True, padx=3, pady=3)
 146:         
 147:         categories = self.links_manager.get_categories()
 148:         num_categories = len(categories)
 149:         
 150:         # Create columns for each category
 151:         for i, category in enumerate(categories):
 152:             column_frame = tk.Frame(columns_frame, bg=Colors.LIGHT_GREEN, relief=tk.FLAT)
 153:             column_frame.grid(row=0, column=i, sticky='nsew', padx=2, pady=1)
 154:             
 155:             # Configure grid weights for equal distribution
 156:             columns_frame.grid_columnconfigure(i, weight=1)
 157:         
 158:         columns_frame.grid_rowconfigure(0, weight=1)
 159:         
 160:         # Populate each column
 161:         for i, category in enumerate(categories):
 162:             self.create_category_column(columns_frame, category, i)
 163:     
 164:     def create_category_column(self, parent, category, column_index):
 165:         """Create a column for a specific category"""
 166:         # Get the column frame
 167:         column_frame = parent.grid_slaves(row=0, column=column_index)[0]
 168:         
 169:         # Category header
 170:         header = CategoryHeader(column_frame, category)
 171:         header.pack(fill=tk.X, pady=(0, 2))
 172:         
 173:         # Links container with light green background
 174:         links_container = tk.Frame(column_frame, bg=Colors.LIGHT_GREEN)
 175:         links_container.pack(fill=tk.BOTH, expand=True)
 176:         
 177:         # Store category for drop operations
 178:         links_container.category = category
 179:         links_container.bind("<Enter>", lambda e: self.on_category_drop_zone_enter(e, category))
 180:         links_container.bind("<Leave>", lambda e: self.on_category_drop_zone_leave(e, category))
 181:         
 182:         # Get links for this category
 183:         links = self.links_manager.get_links_by_category(category)
 184:         
 185:         if links:
 186:             for link in links:
 187:                 # Find the actual index in the full links list
 188:                 actual_index = self.links_manager.get_all_links().index(link)
 189:                 self.create_compact_link_item(links_container, link, actual_index)
 190:         else:
 191:             # Empty state - also acts as a drop zone
 192:             empty_label = tk.Label(links_container, text="(empty)", bg=Colors.LIGHT_GREEN, fg=Colors.DARK_GREEN,
 193:                                  font=(Fonts.MENU_ITEM[0], Fonts.MENU_ITEM[1], 'italic'))
 194:             empty_label.pack(pady=5)
 195:             empty_label.category = category
 196:             empty_label.bind("<Enter>", lambda e: self.on_empty_category_enter(e, category))
 197:             empty_label.bind("<Leave>", lambda e: self.on_empty_category_leave(e, category))
 198:     
 199:     def create_compact_link_item(self, parent, link, index):
 200:         """Create a compact link item with drag-and-drop support"""
 201:         # Create a frame to hold the link (easier for drag operations)
 202:         link_frame = tk.Frame(parent, bg=Colors.LIGHT_GREEN, relief=tk.FLAT)
 203:         link_frame.pack(fill=tk.X, padx=2, pady=1)
 204:         
 205:         # Create the link label
 206:         link_label = tk.Label(link_frame, text=f"📄 {link['name']}", bg=Colors.LIGHT_GREEN, fg=Colors.BLACK,
 207:                              font=Fonts.MENU_ITEM, anchor='w', height=1,
 208:                              cursor='hand2', relief=tk.FLAT, padx=5, pady=2)
 209:         link_label.pack(fill=tk.X)
 210:         
 211:         # Store link data for drag operations
 212:         link_frame.link_data = link
 213:         link_frame.link_index = index
 214:         link_frame.category = link['category']
 215:         link_label.link_data = link
 216:         link_label.link_index = index
 217:         link_label.category = link['category']
 218:         
 219:         # Apply hover effects
 220:         UIUtils.apply_hover_effect(link_label, Colors.LIGHT_GREEN, Colors.HOVER_GREEN, 
 221:                                   Colors.BLACK, Colors.WHITE)
 222:         
 223:         # Bind drag and drop events
 224:         for widget in [link_frame, link_label]:
 225:             widget.bind("<Button-1>", lambda e, l=link, i=index: self.on_link_press(e, l, i))
 226:             widget.bind("<B1-Motion>", lambda e, l=link, i=index: self.on_link_drag(e, l, i))
 227:             widget.bind("<ButtonRelease-1>", lambda e, l=link, i=index: self.on_link_release(e, l, i))
 228:             widget.bind("<Button-3>", lambda e, l=link, i=index: self.show_link_context_menu(e, l, i))
 229:         
 230:         # Mark as drop zone
 231:         link_frame.bind("<Enter>", lambda e: self.on_drop_zone_enter(e, link, index))
 232:         link_frame.bind("<Leave>", lambda e: self.on_drop_zone_leave(e, link, index))
 233:     
 234:     def show_link_context_menu(self, event, link, index):
 235:         """Show context menu for individual link"""
 236:         context_menu = tk.Menu(self, tearoff=0, bg=Colors.MEDIUM_GREEN, fg=Colors.BLACK,
 237:                               activebackground=Colors.HOVER_GREEN, activeforeground=Colors.WHITE)
 238:         
 239:         context_menu.add_command(label=f"Open {link['name']}", 
 240:                                 command=lambda: FileUtils.open_path(link['path'], self.parent))
 241:         context_menu.add_separator()
 242:         context_menu.add_command(label="Edit", 
 243:                                 command=lambda: self.edit_link(link, index))
 244:         context_menu.add_command(label="Delete", 
 245:                                 command=lambda: self.delete_link(link, index))
 246:         
 247:         try:
 248:             context_menu.tk_popup(event.x_root, event.y_root)
 249:         finally:
 250:             context_menu.grab_release()
 251:     
 252:     def edit_link(self, link, index):
 253:         """Edit an existing link"""
 254:         self.destroy()
 255:         AddEditLinkDialog.show_edit_dialog(self.parent, self.links_manager, self.taskbar_instance, link, index)
 256:     
 257:     def delete_link(self, link, index):
 258:         """Delete a link with confirmation"""
 259:         result = ConfirmationDialog.ask(
 260:             self.parent, 
 261:             "Delete Link", 
 262:             f"Are you sure you want to delete:\n'{link['name']}'?"
 263:         )
 264:         
 265:         if result:
 266:             self.links_manager.remove_link(index)
 267:             self.destroy()
 268:             # Refresh menu
 269:             self.taskbar_instance.show_links_menu(None)
 270:     
 271:     def add_new_link(self):
 272:         """Show dialog to add a new link"""
 273:         self.destroy()
 274:         AddEditLinkDialog.show_add_dialog(self.parent, self.links_manager, self.taskbar_instance)
 275:     
 276:     def setup_resize_functionality(self):
 277:         """Setup resize functionality with minimum size constraints"""
 278:         self.min_height = 150  # Minimum height
 279:         self.max_height = 600  # Maximum height for usability
 280:         
 281:         # Allow window to be resizable
 282:         self.resizable(False, True)  # Only allow vertical resizing
 283:     
 284:     def start_resize(self, event):
 285:         """Start resizing operation"""
 286:         self.is_resizing = True
 287:         self.resize_start_y = event.y_root
 288:         self.original_height = self.winfo_height()
 289:         self.original_x = self.winfo_x()
 290:         
 291:         # Update bottom position
 292:         self.bottom_y = self.winfo_y() + self.winfo_height()
 293:         
 294:         # Change cursor to indicate resizing
 295:         self.configure(cursor='sb_v_double_arrow')
 296:         
 297:         # Visual feedback
 298:         self.header_frame.configure(bg=Colors.HOVER_GREEN)
 299:         
 300:         print(f"Starting resize: height={self.original_height}, bottom_y={self.bottom_y}")
 301:     
 302:     def do_resize(self, event):
 303:         """Handle resize drag motion"""
 304:         if not self.is_resizing:
 305:             return
 306:         
 307:         # Calculate the change in Y position
 308:         delta_y = event.y_root - self.resize_start_y
 309:         
 310:         # Calculate new height (drag up = smaller delta = taller window)
 311:         new_height = self.original_height - delta_y
 312:         
 313:         # Apply constraints
 314:         new_height = max(self.min_height, min(self.max_height, new_height))
 315:         
 316:         # Calculate new Y position to keep bottom locked
 317:         new_y = self.bottom_y - new_height
 318:         
 319:         # Apply the new geometry
 320:         try:
 321:             self.geometry(f"{self.menu_width}x{int(new_height)}+{self.original_x}+{int(new_y)}")
 322:         except Exception as e:
 323:             print(f"Resize error: {e}")
 324:     
 325:     def end_resize(self, event):
 326:         """End resizing operation"""
 327:         self.is_resizing = False
 328:         self.configure(cursor='')
 329:         
 330:         # Remove visual feedback
 331:         self.header_frame.configure(bg=Colors.DARK_GREEN)
 332:         
 333:         # Update the stored height
 334:         self.menu_height = self.winfo_height()
 335:         
 336:         # Save the new height persistently
 337:         self.links_manager.set_menu_height(self.menu_height)
 338:         
 339:         print(f"Resize ended: new height={self.menu_height} (saved)")
 340:     
 341:     # Drag and Drop Event Handlers
 342:     def on_link_press(self, event, link, index):
 343:         """Handle mouse press on link - start potential drag or prepare for click"""
 344:         import time
 345:         self.drag_start_time = time.time() * 1000  # Convert to milliseconds
 346:         self.drag_start_x = event.x_root
 347:         self.drag_start_y = event.y_root
 348:         self.dragged_link_data = link
 349:         self.dragged_link_index = index
 350:         self.potential_drag = True
 351:         
 352:         # Schedule a delayed check for click vs drag
 353:         self.after(self.drag_time_threshold, lambda: self.check_for_click_or_drag(event, link, index))
 354:     
 355:     def on_link_drag(self, event, link, index):
 356:         """Handle mouse drag on link"""
 357:         if not hasattr(self, 'potential_drag') or not self.potential_drag:
 358:             return
 359:         
 360:         # Calculate distance moved
 361:         distance = ((event.x_root - self.drag_start_x) ** 2 + (event.y_root - self.drag_start_y) ** 2) ** 0.5
 362:         
 363:         if distance > self.drag_threshold:
 364:             self.start_link_drag(event, link, index)
 365:     
 366:     def on_link_release(self, event, link, index):
 367:         """Handle mouse release on link"""
 368:         if self.is_dragging_link:
 369:             self.end_link_drag(event, link, index)
 370:         elif hasattr(self, 'potential_drag') and self.potential_drag:
 371:             # This was a click, not a drag
 372:             self.handle_link_click(link)
 373:         
 374:         # Reset drag state
 375:         self.potential_drag = False
 376:         self.is_dragging_link = False
 377:     
 378:     def check_for_click_or_drag(self, event, link, index):
 379:         """Determine if this was a click or start of drag after delay"""
 380:         if hasattr(self, 'potential_drag') and self.potential_drag and not self.is_dragging_link:
 381:             # Still within time threshold and no drag started, treat as click
 382:             pass  # Let the release handler manage the click
 383:     
 384:     def handle_link_click(self, link):
 385:         """Handle regular link click to open file"""
 386:         FileUtils.open_path(link['path'], self.parent)
 387:         self.destroy()
 388:     
 389:     def start_link_drag(self, event, link, index):
 390:         """Start dragging a link"""
 391:         if self.is_dragging_link:
 392:             return
 393:         
 394:         self.is_dragging_link = True
 395:         self.potential_drag = False
 396:         
 397:         # Create drag visual
 398:         self.create_drag_visual(event, link)
 399:         
 400:         # Show drop indicators
 401:         self.show_drop_indicators()
 402:         
 403:         print(f"Started dragging: {link['name']}")
 404:     
 405:     def create_drag_visual(self, event, link):
 406:         """Create visual feedback for dragging"""
 407:         if self.drag_visual:
 408:             self.drag_visual.destroy()
 409:         
 410:         self.drag_visual = tk.Toplevel(self)
 411:         self.drag_visual.overrideredirect(True)
 412:         self.drag_visual.attributes('-topmost', True)
 413:         self.drag_visual.attributes('-alpha', 0.8)
 414:         
 415:         # Make drag visual ignore mouse events (so they pass through to drop zones)
 416:         try:
 417:             # This makes the window transparent to mouse events
 418:             self.drag_visual.attributes('-transparentcolor', 'black')  
 419:         except:
 420:             pass  # Not all systems support this
 421:         
 422:         # Create drag visual content
 423:         drag_frame = tk.Frame(self.drag_visual, bg=Colors.DARK_GREEN, relief=tk.RAISED, bd=2)
 424:         drag_frame.pack(padx=2, pady=2)
 425:         
 426:         tk.Label(drag_frame, text=f"🚀 {link['name']}", bg=Colors.DARK_GREEN, fg=Colors.WHITE,
 427:                 font=Fonts.MENU_ITEM, padx=10, pady=5).pack()
 428:         
 429:         # Position at cursor
 430:         self.drag_visual.geometry(f"+{event.x_root + 10}+{event.y_root + 10}")
 431:         
 432:         # Bind motion to follow cursor
 433:         self.bind("<Motion>", self.update_drag_visual)
 434:     
 435:     def update_drag_visual(self, event):
 436:         """Update drag visual position"""
 437:         if self.drag_visual and self.is_dragging_link:
 438:             self.drag_visual.geometry(f"+{event.x_root + 10}+{event.y_root + 10}")
 439:     
 440:     def show_drop_indicators(self):
 441:         """Show visual indicators for valid drop zones"""
 442:         # This would highlight valid drop areas
 443:         # For now, we'll rely on hover effects in the drop zone handlers
 444:         pass
 445:     
 446:     def end_link_drag(self, event, link, index):
 447:         """End link drag operation"""
 448:         print(f"Ending drag for: {link['name']}")
 449:         
 450:         # Try to find drop target at current mouse position
 451:         drop_target = self.find_drop_target_at_position(event.x_root, event.y_root)
 452:         
 453:         if drop_target:
 454:             print(f"Found drop target: {drop_target}")
 455:             self.current_drop_target = drop_target
 456:             self.perform_drop_operation()
 457:         else:
 458:             print("No valid drop target found")
 459:         
 460:         self.is_dragging_link = False
 461:         
 462:         # Clean up drag visual
 463:         if self.drag_visual:
 464:             self.drag_visual.destroy()
 465:             self.drag_visual = None
 466:         
 467:         # Unbind motion events
 468:         self.unbind("<Motion>")
 469:         
 470:         # Hide drop indicators
 471:         self.hide_drop_indicators()
 472:         
 473:         print(f"Ended dragging: {link['name']}")
 474:     
 475:     def hide_drop_indicators(self):
 476:         """Hide drop zone indicators"""
 477:         # Clean up any drop indicators
 478:         for indicator in self.drop_indicators:
 479:             try:
 480:                 indicator.destroy()
 481:             except:
 482:                 pass
 483:         self.drop_indicators.clear()
 484:     
 485:     # Drop Zone Event Handlers
 486:     def on_drop_zone_enter(self, event, link, index):
 487:         """Handle mouse entering a link drop zone"""
 488:         if self.is_dragging_link and self.dragged_link_index != index:
 489:             event.widget.configure(bg=Colors.HOVER_GREEN)
 490:             self.current_drop_target = {'type': 'reorder', 'link': link, 'index': index}
 491:     
 492:     def on_drop_zone_leave(self, event, link, index):
 493:         """Handle mouse leaving a link drop zone"""
 494:         if self.is_dragging_link:
 495:             event.widget.configure(bg=Colors.LIGHT_GREEN)
 496:             if hasattr(self, 'current_drop_target'):
 497:                 delattr(self, 'current_drop_target')
 498:     
 499:     def on_category_drop_zone_enter(self, event, category):
 500:         """Handle mouse entering a category drop zone"""
 501:         if self.is_dragging_link and self.dragged_link_data['category'] != category:
 502:             event.widget.configure(bg=Colors.MEDIUM_GREEN)
 503:             self.current_drop_target = {'type': 'move', 'category': category}
 504:     
 505:     def on_category_drop_zone_leave(self, event, category):
 506:         """Handle mouse leaving a category drop zone"""
 507:         if self.is_dragging_link:
 508:             event.widget.configure(bg=Colors.LIGHT_GREEN)
 509:             if hasattr(self, 'current_drop_target'):
 510:                 delattr(self, 'current_drop_target')
 511:     
 512:     def on_empty_category_enter(self, event, category):
 513:         """Handle mouse entering an empty category"""
 514:         if self.is_dragging_link and self.dragged_link_data['category'] != category:
 515:             event.widget.configure(bg=Colors.MEDIUM_GREEN)
 516:             self.current_drop_target = {'type': 'move', 'category': category}
 517:     
 518:     def on_empty_category_leave(self, event, category):
 519:         """Handle mouse leaving an empty category"""
 520:         if self.is_dragging_link:
 521:             event.widget.configure(bg=Colors.LIGHT_GREEN)
 522:             if hasattr(self, 'current_drop_target'):
 523:                 delattr(self, 'current_drop_target')
 524:     
 525:     def perform_drop_operation(self):
 526:         """Perform the actual drop operation based on current target"""
 527:         print(f"Performing drop operation...")
 528:         
 529:         if not hasattr(self, 'current_drop_target'):
 530:             print("No current_drop_target found")
 531:             return False
 532:             
 533:         if not self.dragged_link_data or self.dragged_link_index is None:
 534:             print("No dragged link data found")
 535:             return False
 536:         
 537:         target = self.current_drop_target
 538:         success = False
 539:         
 540:         print(f"Drop target: {target}")
 541:         print(f"Dragged link: {self.dragged_link_data['name']} (index: {self.dragged_link_index})")
 542:         
 543:         if target['type'] == 'move':
 544:             # Move to different category
 545:             print(f"Attempting to move to category: {target['category']}")
 546:             success = self.links_manager.move_link_to_category(self.dragged_link_index, target['category'])
 547:             if success:
 548:                 print(f"✅ Moved '{self.dragged_link_data['name']}' to category '{target['category']}'")
 549:             else:
 550:                 print(f"❌ Failed to move '{self.dragged_link_data['name']}' to category '{target['category']}'")
 551:         
 552:         elif target['type'] == 'reorder':
 553:             # Reorder within same category
 554:             dragged_category = self.dragged_link_data['category']
 555:             dragged_pos = self.links_manager.get_link_position_in_category(self.dragged_link_index)
 556:             target_pos = self.links_manager.get_link_position_in_category(target['index'])
 557:             
 558:             print(f"Attempting to reorder in category: {dragged_category}")
 559:             print(f"From position {dragged_pos} to position {target_pos}")
 560:             
 561:             if dragged_pos != -1 and target_pos != -1:
 562:                 success = self.links_manager.reorder_links_in_category(dragged_category, dragged_pos, target_pos)
 563:                 if success:
 564:                     print(f"✅ Reordered '{self.dragged_link_data['name']}' in category '{dragged_category}'")
 565:                 else:
 566:                     print(f"❌ Failed to reorder '{self.dragged_link_data['name']}' in category '{dragged_category}'")
 567:             else:
 568:                 print(f"❌ Invalid positions: dragged_pos={dragged_pos}, target_pos={target_pos}")
 569:         
 570:         if success:
 571:             # Refresh the menu to show changes
 572:             print("Refreshing menu...")
 573:             self.refresh_menu()
 574:         else:
 575:             print("Drop operation failed")
 576:         
 577:         return success
 578:     
 579:     def refresh_menu(self):
 580:         """Refresh the menu display after drag and drop operations"""
 581:         # Store current position
 582:         current_x = self.winfo_x()
 583:         current_y = self.winfo_y()
 584:         current_height = self.winfo_height()
 585:         
 586:         # Recreate the column layout
 587:         for widget in self.content_frame.winfo_children():
 588:             widget.destroy()
 589:         
 590:         self.create_column_layout()
 591:         
 592:         # Restore position and size
 593:         self.geometry(f"{self.menu_width}x{current_height}+{current_x}+{current_y}")
 594:         
 595:         print("Menu refreshed after drag and drop")
 596:     
 597:     def find_drop_target_at_position(self, x, y):
 598:         """Find what widget/drop target is at the given screen coordinates"""
 599:         try:
 600:             # Get widget at position relative to this window
 601:             widget_at_pos = self.winfo_containing(x, y)
 602:             
 603:             if not widget_at_pos:
 604:                 return None
 605:                 
 606:             print(f"Widget at position: {widget_at_pos}")
 607:             
 608:             # Check if it's a link (for reordering)
 609:             if hasattr(widget_at_pos, 'link_data') and hasattr(widget_at_pos, 'link_index'):
 610:                 link_data = widget_at_pos.link_data
 611:                 link_index = widget_at_pos.link_index
 612:                 
 613:                 # Don't allow dropping on self
 614:                 if link_index == self.dragged_link_index:
 615:                     return None
 616:                     
 617:                 return {
 618:                     'type': 'reorder', 
 619:                     'link': link_data, 
 620:                     'index': link_index
 621:                 }
 622:             
 623:             # Check if it's a category area (for moving to different category)
 624:             if hasattr(widget_at_pos, 'category'):
 625:                 category = widget_at_pos.category
 626:                 
 627:                 # Don't allow dropping in same category (unless it's for reordering)
 628:                 if category != self.dragged_link_data['category']:
 629:                     return {
 630:                         'type': 'move', 
 631:                         'category': category
 632:                     }
 633:             
 634:             # Check parent widgets for category info
 635:             parent = widget_at_pos
 636:             while parent and parent != self:
 637:                 if hasattr(parent, 'category'):
 638:                     category = parent.category
 639:                     if category != self.dragged_link_data['category']:
 640:                         return {
 641:                             'type': 'move', 
 642:                             'category': category
 643:                         }
 644:                 parent = parent.master
 645:                 
 646:             return None
 647:             
 648:         except Exception as e:
 649:             print(f"Error finding drop target: {e}")
 650:             return None
 651: 
 652: class AddEditLinkDialog(CustomDialog):
 653:     """Dialog for adding or editing links"""
 654:     
 655:     def __init__(self, parent, links_manager, taskbar_instance, edit_mode=False, link_data=None, link_index=None):
 656:         title = "Edit Link" if edit_mode else "Add New Link"
 657:         super().__init__(parent, title, width=450, height=280)
 658:         
 659:         self.links_manager = links_manager
 660:         self.taskbar_instance = taskbar_instance
 661:         self.edit_mode = edit_mode
 662:         self.link_data = link_data
 663:         self.link_index = link_index
 664:         
 665:         self.create_form()
 666:         self.add_buttons()
 667:         
 668:         # Prefill data if editing
 669:         if edit_mode and link_data:
 670:             self.name_field.set(link_data['name'])
 671:             self.path_field.set(link_data['path'])
 672:             self.category_field.set(link_data['category'])
 673:     
 674:     def create_form(self):
 675:         """Create the form fields"""
 676:         # Name field
 677:         self.name_field = FormField(self.dialog_content, "Name:", width=35)
 678:         self.name_field.pack(fill=tk.X, pady=5)
 679:         
 680:         # Path field with browse button
 681:         path_frame = tk.Frame(self.dialog_content, bg=Colors.LIGHT_GREEN)
 682:         path_frame.pack(fill=tk.X, pady=5)
 683:         
 684:         self.path_field = FormField(path_frame, "Path/URL:", width=25)
 685:         self.path_field.pack(side=tk.LEFT, fill=tk.X, expand=True)
 686:         
 687:         browse_btn = tk.Button(path_frame, text="Browse...", command=self.browse_path,
 688:                               bg=Colors.MEDIUM_GREEN, font=Fonts.DIALOG_LABEL)
 689:         browse_btn.pack(side=tk.RIGHT, padx=(5, 0))
 690:         
 691:         # Category field
 692:         self.category_field = FormField(
 693:             self.dialog_content, "Category:", 
 694:             field_type='combobox',
 695:             values=self.links_manager.get_categories(),
 696:         )
 697:         self.category_field.pack(fill=tk.X, pady=5)
 698:         
 699:         # Set default category to "Quick Links"
 700:         categories = self.links_manager.get_categories()
 701:         if "Quick Links" in categories:
 702:             self.category_field.set("Quick Links")
 703:         elif categories:
 704:             self.category_field.set(categories[0])
 705:     
 706:     def browse_path(self):
 707:         """Browse for file or folder"""
 708:         import os
 709:         
 710:         self.grab_release()
 711:         choice = BrowseChoiceDialog.ask(self)
 712:         
 713:         if choice == "file":
 714:             path = filedialog.askopenfilename(parent=self)
 715:         elif choice == "folder":
 716:             path = filedialog.askdirectory(parent=self)
 717:         else:
 718:             # Restore grab and focus when canceling
 719:             self.grab_set()
 720:             self.focus_force()
 721:             return
 722:         
 723:         if path:
 724:             self.path_field.set(path)
 725:             
 726:             # Auto-populate name field if it's empty
 727:             if not self.name_field.get().strip():
 728:                 if choice == "file":
 729:                     # Extract filename without extension
 730:                     filename = os.path.basename(path)
 731:                     name_without_ext = os.path.splitext(filename)[0]
 732:                     self.name_field.set(name_without_ext)
 733:                 elif choice == "folder":
 734:                     # Extract folder name
 735:                     folder_name = os.path.basename(path.rstrip(os.sep))
 736:                     self.name_field.set(folder_name)
 737:         
 738:         # Always restore grab and focus after browse operation
 739:         self.grab_set()
 740:         self.focus_force()
 741:     
 742:     def add_buttons(self):
 743:         """Add Save and Cancel buttons"""
 744:         button_container = tk.Frame(self.button_frame, bg=Colors.LIGHT_GREEN)
 745:         button_container.pack(expand=True)
 746:         
 747:         save_btn = tk.Button(button_container, text="Save", bg=Colors.DARK_GREEN, fg=Colors.WHITE,
 748:                             command=self.save_link, width=Dimensions.DIALOG_BUTTON_WIDTH,
 749:                             font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1)
 750:         save_btn.pack(side=tk.LEFT, padx=10)
 751:         
 752:         cancel_btn = tk.Button(button_container, text="Cancel", bg=Colors.INACTIVE_GRAY, fg=Colors.WHITE,
 753:                               command=self.cancel, width=Dimensions.DIALOG_BUTTON_WIDTH,
 754:                               font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1)
 755:         cancel_btn.pack(side=tk.LEFT, padx=10)
 756:     
 757:     def save_link(self):
 758:         """Save the link"""
 759:         name = self.name_field.get().strip()
 760:         path = self.path_field.get().strip()
 761:         category = self.category_field.get()
 762:         
 763:         if not name or not path:
 764:             WarningDialog.show(self, "Invalid Input", "Please enter both name and path.")
 765:             return
 766:         
 767:         if self.edit_mode:
 768:             # Update existing link
 769:             icon = self.link_data.get('icon', '📄') if self.link_data else '📄'
 770:             success = self.links_manager.update_link(self.link_index, name, path, category, icon)
 771:         else:
 772:             # Add new link
 773:             success = self.links_manager.add_link(name, path, category)
 774:         
 775:         if success:
 776:             self.destroy()
 777:             # Refresh menu
 778:             self.taskbar_instance.show_links_menu(None)
 779:         else:
 780:             ErrorDialog.show(self, "Error", "Failed to save link.")
 781:     
 782:     @classmethod
 783:     def show_add_dialog(cls, parent, links_manager, taskbar_instance):
 784:         """Show dialog to add a new link"""
 785:         dialog = cls(parent, links_manager, taskbar_instance)
 786:         dialog.lift()
 787:         dialog.focus_force()
 788:         return dialog
 789:     
 790:     @classmethod
 791:     def show_edit_dialog(cls, parent, links_manager, taskbar_instance, link_data, link_index):
 792:         """Show dialog to edit an existing link"""
 793:         dialog = cls(parent, links_manager, taskbar_instance, True, link_data, link_index)
 794:         dialog.lift()
 795:         dialog.focus_force()
 796:         return dialog
 797: 
 798: class BrowseChoiceDialog(CustomDialog):
 799:     """Custom dialog for choosing between file or folder browsing"""
 800:     
 801:     def __init__(self, parent):
 802:         super().__init__(parent, "Browse Options", width=300, height=180)
 803:         
 804:         # Icon and message
 805:         icon_label = tk.Label(self.dialog_content, text="📁", bg=Colors.LIGHT_GREEN,
 806:                              fg=Colors.BLACK, font=('Arial', 24))
 807:         icon_label.pack(pady=10)
 808:         
 809:         message_label = tk.Label(self.dialog_content, text="What would you like to browse for?", 
 810:                                bg=Colors.LIGHT_GREEN, fg=Colors.BLACK, font=Fonts.DIALOG_LABEL)
 811:         message_label.pack(pady=5)
 812:         
 813:         # Add buttons
 814:         self.add_choice_buttons()
 815:         
 816:         # Bind keys
 817:         self.bind('<Escape>', lambda e: self.cancel())
 818:     
 819:     def add_choice_buttons(self):
 820:         """Add File, Folder, and Cancel buttons"""
 821:         button_container = tk.Frame(self.button_frame, bg=Colors.LIGHT_GREEN)
 822:         button_container.pack(expand=True)
 823:         
 824:         # File button
 825:         file_btn = tk.Button(button_container, text="File", bg=Colors.DARK_GREEN, fg=Colors.WHITE,
 826:                            command=self.choose_file, width=8,
 827:                            font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1)
 828:         file_btn.pack(side=tk.LEFT, padx=5)
 829:         
 830:         # Folder button
 831:         folder_btn = tk.Button(button_container, text="Folder", bg=Colors.MEDIUM_GREEN, fg=Colors.BLACK,
 832:                              command=self.choose_folder, width=8,
 833:                              font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1)
 834:         folder_btn.pack(side=tk.LEFT, padx=5)
 835:         
 836:         # Cancel button
 837:         cancel_btn = tk.Button(button_container, text="Cancel", bg=Colors.INACTIVE_GRAY, fg=Colors.WHITE,
 838:                              command=self.cancel, width=8,
 839:                              font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1)
 840:         cancel_btn.pack(side=tk.LEFT, padx=5)
 841:         
 842:         # Focus on File button as default
 843:         file_btn.focus_set()
 844:     
 845:     def choose_file(self):
 846:         """File button clicked"""
 847:         self.result = "file"
 848:         self.destroy()
 849:     
 850:     def choose_folder(self):
 851:         """Folder button clicked"""
 852:         self.result = "folder"
 853:         self.destroy()
 854:     
 855:     @classmethod
 856:     def ask(cls, parent):
 857:         """Show browse choice dialog and return result"""
 858:         dialog = cls(parent)
 859:         dialog.lift()
 860:         dialog.focus_force()
 861:         try:
 862:             parent.wait_window(dialog)
 863:             return dialog.result
 864:         finally:
 865:             # Ensure parent regains focus after dialog closes
 866:             if parent and parent.winfo_exists():
 867:                 parent.focus_force()

────────────────────────────────────────────────────────────────────────────────
FILE: restore_deskop.py
────────────────────────────────────────────────────────────────────────────────
Path: restore_deskop.py
Size: 1.5 KB
Lines: 41 total, 33 non-empty
Characters: 1,488
Type: Desktop restoration utilities
────────────────────────────────────────────────────────────────────────────────

   1: import ctypes
   2: from ctypes import wintypes
   3: import time
   4: 
   5: def fix_desktop_space():
   6:     """Force restore desktop working area"""
   7:     user32 = ctypes.windll.user32
   8:     
   9:     # Method 1: Get actual screen size and restore
  10:     screen_width = user32.GetSystemMetrics(0)
  11:     screen_height = user32.GetSystemMetrics(1)
  12:     
  13:     print(f"Screen size: {screen_width}x{screen_height}")
  14:     
  15:     # Method 2: Force full screen work area
  16:     full_area = wintypes.RECT(0, 0, screen_width, screen_height)
  17:     result = user32.SystemParametersInfoW(0x002F, 0, ctypes.byref(full_area), 0)
  18:     print(f"Full restore attempt: {'Success' if result else 'Failed'}")
  19:     
  20:     # Method 3: Broadcast change to all windows
  21:     HWND_BROADCAST = 0xFFFF
  22:     WM_SETTINGCHANGE = 0x001A
  23:     user32.SendMessageW(HWND_BROADCAST, WM_SETTINGCHANGE, 0, 0)
  24:     
  25:     # Method 4: Try with SPIF_SENDCHANGE flag
  26:     SPIF_SENDCHANGE = 0x0002
  27:     SPIF_UPDATEINIFILE = 0x0001
  28:     result2 = user32.SystemParametersInfoW(0x002F, 0, ctypes.byref(full_area), SPIF_SENDCHANGE | SPIF_UPDATEINIFILE)
  29:     print(f"Restore with flags: {'Success' if result2 else 'Failed'}")
  30:     
  31:     # Method 5: Explorer restart (most aggressive)
  32:     print("\nRestarting Explorer to force refresh...")
  33:     import os
  34:     os.system("taskkill /f /im explorer.exe")
  35:     time.sleep(1)
  36:     os.system("start explorer.exe")
  37: 
  38: if __name__ == "__main__":
  39:     fix_desktop_space()
  40:     print("\nDesktop space should be restored!")
  41:     print("If not, try logging out and back in.")

────────────────────────────────────────────────────────────────────────────────
FILE: snip_feature.py
────────────────────────────────────────────────────────────────────────────────
Path: snip_feature.py
Size: 16.1 KB
Lines: 410 total, 331 non-empty
Characters: 16,062
Type: .PY file
────────────────────────────────────────────────────────────────────────────────

   1: # snip_feature.py
   2: """
   3: Screen capture and document integration feature for SuiteView Taskbar
   4: Handles taking screenshots and inserting them into Word documents or Outlook emails
   5: """
   6: 
   7: import os
   8: import tempfile
   9: import time
  10: from datetime import datetime
  11: from PIL import ImageGrab
  12: import win32com.client
  13: import pythoncom
  14: from config import Colors, Fonts
  15: from ui_components import ErrorDialog, WarningDialog
  16: import tkinter as tk
  17: 
  18: class SnippingManager:
  19:     """Manages screen capture and document integration"""
  20:     
  21:     def __init__(self, parent_window=None):
  22:         self.parent_window = parent_window
  23:         self.current_word_app = None
  24:         self.current_word_doc = None
  25:         self.current_outlook_app = None
  26:         self.current_outlook_item = None
  27:         self.temp_image_counter = 0
  28:         
  29:         # Create temp directory for screenshots
  30:         self.temp_dir = os.path.join(tempfile.gettempdir(), "SuiteView_Screenshots")
  31:         self.ensure_temp_directory()
  32:     
  33:     def ensure_temp_directory(self):
  34:         """Ensure temporary directory exists for storing screenshots"""
  35:         try:
  36:             if not os.path.exists(self.temp_dir):
  37:                 os.makedirs(self.temp_dir)
  38:         except Exception as e:
  39:             print(f"Warning: Could not create temp directory: {e}")
  40:             self.temp_dir = tempfile.gettempdir()
  41:     
  42:     def capture_primary_screen(self):
  43:         """Capture screenshot of primary monitor and save to temp file"""
  44:         try:
  45:             # Capture the primary screen
  46:             screenshot = ImageGrab.grab()
  47:             
  48:             # Generate unique filename
  49:             timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
  50:             self.temp_image_counter += 1
  51:             filename = f"screenshot_{timestamp}_{self.temp_image_counter}.png"
  52:             filepath = os.path.join(self.temp_dir, filename)
  53:             
  54:             # Save screenshot
  55:             screenshot.save(filepath, "PNG")
  56:             print(f"Screenshot saved: {filepath}")
  57:             return filepath
  58:             
  59:         except Exception as e:
  60:             self._show_error("Screenshot Error", f"Failed to capture screenshot: {str(e)}")
  61:             return None
  62:     
  63:     def snip_to_target(self, target_app="Word"):
  64:         """Main method to handle snipping to specified application"""
  65:         try:
  66:             # Capture screenshot first
  67:             image_path = self.capture_primary_screen()
  68:             if not image_path:
  69:                 return False
  70:             
  71:             # Route to appropriate handler
  72:             if target_app.lower() == "word":
  73:                 return self.snip_to_word(image_path)
  74:             elif target_app.lower() == "outlook":
  75:                 return self.snip_to_outlook(image_path)
  76:             else:
  77:                 self._show_error("Invalid Target", f"Unknown target application: {target_app}")
  78:                 return False
  79:                 
  80:         except Exception as e:
  81:             self._show_error("Snip Error", f"Failed to complete snip operation: {str(e)}")
  82:             return False
  83:     
  84:     def snip_to_word(self, image_path):
  85:         """Insert screenshot into Word document"""
  86:         try:
  87:             # Check if we have an active Word document
  88:             if not self._is_word_document_active():
  89:                 # Create new Word document
  90:                 if not self._create_new_word_document():
  91:                     return False
  92:             
  93:             # Insert image into document
  94:             if self._insert_image_to_word(image_path):
  95:                 print("Successfully added screenshot to Word document")
  96:                 return True
  97:             else:
  98:                 return False
  99:                 
 100:         except Exception as e:
 101:             self._show_error("Word Error", f"Failed to add screenshot to Word: {str(e)}")
 102:             return False
 103:     
 104:     def snip_to_outlook(self, image_path):
 105:         """Insert screenshot into Outlook email"""
 106:         try:
 107:             # Check if we have an active Outlook email
 108:             if not self._is_outlook_email_active():
 109:                 # Create new Outlook email
 110:                 if not self._create_new_outlook_email():
 111:                     return False
 112:             
 113:             # Insert image into email
 114:             if self._insert_image_to_outlook(image_path):
 115:                 print("Successfully added screenshot to Outlook email")
 116:                 return True
 117:             else:
 118:                 return False
 119:                 
 120:         except Exception as e:
 121:             self._show_error("Outlook Error", f"Failed to add screenshot to Outlook: {str(e)}")
 122:             return False
 123:     
 124:     def _is_word_document_active(self):
 125:         """Check if the current Word document is still active"""
 126:         try:
 127:             if not self.current_word_app or not self.current_word_doc:
 128:                 return False
 129:             
 130:             # Try to access the document - this will fail if it's closed
 131:             _ = self.current_word_doc.Name
 132:             
 133:             # Check if the document is still in the application's documents collection
 134:             for doc in self.current_word_app.Documents:
 135:                 if doc.Name == self.current_word_doc.Name:
 136:                     return True
 137:             
 138:             return False
 139:             
 140:         except Exception:
 141:             # If any error occurs, assume document is no longer active
 142:             self.current_word_doc = None
 143:             return False
 144:     
 145:     def _is_outlook_email_active(self):
 146:         """Check if the current Outlook email is still active"""
 147:         try:
 148:             if not self.current_outlook_app or not self.current_outlook_item:
 149:                 return False
 150:             
 151:             # Try to access the email item - this will fail if it's closed/sent
 152:             _ = self.current_outlook_item.Subject
 153:             return True
 154:             
 155:         except Exception:
 156:             # If any error occurs, assume email is no longer active
 157:             self.current_outlook_item = None
 158:             return False
 159:     
 160:     def _create_new_word_document(self):
 161:         """Create a new Word document"""
 162:         try:
 163:             # Initialize COM
 164:             pythoncom.CoInitialize()
 165:             
 166:             # Connect to or create Word application
 167:             try:
 168:                 self.current_word_app = win32com.client.GetActiveObject("Word.Application")
 169:             except:
 170:                 self.current_word_app = win32com.client.Dispatch("Word.Application")
 171:             
 172:             # Make Word visible
 173:             self.current_word_app.Visible = True
 174:             
 175:             # Create new document
 176:             self.current_word_doc = self.current_word_app.Documents.Add()
 177:             
 178:             # Add a title
 179:             title_range = self.current_word_doc.Range(0, 0)
 180:             title_range.Text = f"Screenshots - {datetime.now().strftime('%Y-%m-%d %I:%M %p')}\n\n"
 181:             title_range.Font.Bold = True
 182:             title_range.Font.Size = 14
 183:             
 184:             # Move cursor to end for image insertion
 185:             # Use numeric constant instead of named constant to avoid import issues
 186:             self.current_word_doc.Range().Collapse(0)  # 0 = wdCollapseEnd
 187:             
 188:             print("Created new Word document")
 189:             return True
 190:             
 191:         except Exception as e:
 192:             self._show_error("Word Creation Error", f"Failed to create Word document: {str(e)}")
 193:             self.current_word_app = None
 194:             self.current_word_doc = None
 195:             return False
 196:     
 197:     def _create_new_outlook_email(self):
 198:         """Create a new Outlook email"""
 199:         try:
 200:             # Initialize COM
 201:             pythoncom.CoInitialize()
 202:             
 203:             # Connect to Outlook
 204:             try:
 205:                 self.current_outlook_app = win32com.client.GetActiveObject("Outlook.Application")
 206:             except:
 207:                 self.current_outlook_app = win32com.client.Dispatch("Outlook.Application")
 208:             
 209:             # Create new mail item
 210:             self.current_outlook_item = self.current_outlook_app.CreateItem(0)  # 0 = olMailItem
 211:             
 212:             # Set email properties
 213:             self.current_outlook_item.Subject = f"Screenshots - {datetime.now().strftime('%Y-%m-%d %I:%M %p')}"
 214:             self.current_outlook_item.Body = "Screenshots captured:\n\n"
 215:             
 216:             # Display the email
 217:             self.current_outlook_item.Display()
 218:             
 219:             print("Created new Outlook email")
 220:             return True
 221:             
 222:         except Exception as e:
 223:             self._show_error("Outlook Creation Error", f"Failed to create Outlook email: {str(e)}")
 224:             self.current_outlook_app = None
 225:             self.current_outlook_item = None
 226:             return False
 227:     
 228:     def _insert_image_to_word(self, image_path):
 229:         """Insert image into the current Word document"""
 230:         try:
 231:             if not self.current_word_doc:
 232:                 return False
 233:             
 234:             # Always position at the end of the document to preserve the title
 235:             doc_end = self.current_word_doc.Range()
 236:             doc_end.Collapse(0)  # 0 = wdCollapseEnd
 237:             doc_end.Select()
 238:             
 239:             # Get the selection at the end of the document
 240:             selection = self.current_word_app.Selection
 241:             
 242:             # Add timestamp before image
 243:             timestamp_text = f"Screenshot taken: {datetime.now().strftime('%I:%M:%S %p')}\n"
 244:             selection.TypeText(timestamp_text)
 245:             
 246:             # Insert the image
 247:             inline_shape = selection.InlineShapes.AddPicture(
 248:                 FileName=image_path,
 249:                 LinkToFile=False,
 250:                 SaveWithDocument=True
 251:             )
 252:             
 253:             # Scale image to fit page width (optional)
 254:             page_width = self.current_word_doc.PageSetup.PageWidth - \
 255:                         self.current_word_doc.PageSetup.LeftMargin - \
 256:                         self.current_word_doc.PageSetup.RightMargin
 257:             
 258:             if inline_shape.Width > page_width:
 259:                 scale_factor = page_width / inline_shape.Width
 260:                 inline_shape.Width = page_width
 261:                 inline_shape.Height = inline_shape.Height * scale_factor
 262:             
 263:             # Add some space after the image
 264:             selection.TypeText("\n\n")
 265:             
 266:             # Clean up temp file
 267:             self._cleanup_temp_file(image_path)
 268:             
 269:             return True
 270:             
 271:         except Exception as e:
 272:             print(f"Error inserting image to Word: {e}")
 273:             return False
 274:     
 275:     def _insert_image_to_outlook(self, image_path):
 276:         """Insert image into the current Outlook email"""
 277:         try:
 278:             if not self.current_outlook_item:
 279:                 return False
 280:             
 281:             # Get the current body and add timestamp
 282:             current_body = self.current_outlook_item.Body if self.current_outlook_item.Body else ""
 283:             timestamp_text = f"Screenshot taken: {datetime.now().strftime('%I:%M:%S %p')}\n"
 284:             
 285:             # Add the image as an attachment and embed it
 286:             attachment = self.current_outlook_item.Attachments.Add(image_path)
 287:             
 288:             # For HTML emails, we could embed the image inline, but for simplicity
 289:             # we'll just attach it and add a note in the body
 290:             self.current_outlook_item.Body = current_body + timestamp_text + "[Screenshot attached]\n\n"
 291:             
 292:             # Clean up temp file
 293:             self._cleanup_temp_file(image_path)
 294:             
 295:             return True
 296:             
 297:         except Exception as e:
 298:             print(f"Error inserting image to Outlook: {e}")
 299:             return False
 300:     
 301:     def _cleanup_temp_file(self, filepath):
 302:         """Clean up temporary image file"""
 303:         try:
 304:             # Wait a moment to ensure file is not locked
 305:             time.sleep(0.1)
 306:             if os.path.exists(filepath):
 307:                 os.remove(filepath)
 308:         except Exception as e:
 309:             print(f"Warning: Could not delete temp file {filepath}: {e}")
 310:     
 311:     def _show_error(self, title, message):
 312:         """Show error dialog to user"""
 313:         print(f"Error - {title}: {message}")
 314:         if self.parent_window:
 315:             try:
 316:                 ErrorDialog.show(self.parent_window, title, message)
 317:             except:
 318:                 pass  # Fallback to console output only
 319:     
 320:     def cleanup_temp_directory(self):
 321:         """Clean up old temporary files"""
 322:         try:
 323:             if os.path.exists(self.temp_dir):
 324:                 for filename in os.listdir(self.temp_dir):
 325:                     if filename.startswith("screenshot_"):
 326:                         filepath = os.path.join(self.temp_dir, filename)
 327:                         # Delete files older than 1 hour
 328:                         if time.time() - os.path.getctime(filepath) > 3600:
 329:                             os.remove(filepath)
 330:         except Exception as e:
 331:             print(f"Warning: Could not clean temp directory: {e}")
 332:     
 333:     def force_new_document(self, target_app="Word"):
 334:         """Force creation of a new document (useful for manual reset)"""
 335:         if target_app.lower() == "word":
 336:             self.current_word_doc = None
 337:             self.current_word_app = None
 338:         elif target_app.lower() == "outlook":
 339:             self.current_outlook_item = None
 340:             self.current_outlook_app = None
 341: 
 342: class SnipUI:
 343:     """UI components for the Snip feature"""
 344:     
 345:     @staticmethod
 346:     def create_snip_button(parent, snipping_manager, target_var):
 347:         """Create the Snip button"""
 348:         def on_snip_click():
 349:             target = target_var.get()
 350:             success = snipping_manager.snip_to_target(target)
 351:             if success:
 352:                 print(f"Screenshot successfully added to {target}")
 353:         
 354:         snip_btn = tk.Button(parent, text="Snip", 
 355:                            bg=Colors.DARK_GREEN, fg=Colors.WHITE,
 356:                            relief=tk.FLAT, font=Fonts.TASKBAR_BUTTON, 
 357:                            cursor='hand2', activebackground=Colors.HOVER_GREEN, 
 358:                            bd=0, padx=15, command=on_snip_click)
 359:         return snip_btn
 360:     
 361:     @staticmethod
 362:     def create_target_combobox(parent, default_value="Word"):
 363:         """Create the target application combobox"""
 364:         from tkinter import ttk
 365:         
 366:         target_var = tk.StringVar(value=default_value)
 367:         combo = ttk.Combobox(parent, textvariable=target_var, 
 368:                            values=["Word", "Outlook"],
 369:                            state='readonly', width=8)
 370:         
 371:         # Style the combobox to match the app theme
 372:         style = ttk.Style()
 373:         style.theme_use('default')
 374:         style.configure('Snip.TCombobox', 
 375:                        fieldbackground=Colors.MEDIUM_GREEN, 
 376:                        background=Colors.MEDIUM_GREEN)
 377:         combo.configure(style='Snip.TCombobox')
 378:         
 379:         return combo, target_var
 380: 
 381: # Integration helper functions for taskbar.py
 382: def add_snip_feature_to_taskbar(taskbar_instance):
 383:     """Add Snip feature to the existing taskbar"""
 384:     
 385:     # Create snipping manager
 386:     snipping_manager = SnippingManager(taskbar_instance.root)
 387:     
 388:     # Create frame for snip controls
 389:     snip_frame = tk.Frame(taskbar_instance.main_frame, bg=Colors.DARK_GREEN)
 390:     snip_frame.pack(side=tk.LEFT, padx=10)
 391:     
 392:     # Create target selection combobox
 393:     combo, target_var = SnipUI.create_target_combobox(snip_frame)
 394:     combo.pack(side=tk.LEFT, padx=(0, 5))
 395:     
 396:     # Create snip button
 397:     snip_btn = SnipUI.create_snip_button(snip_frame, snipping_manager, target_var)
 398:     snip_btn.pack(side=tk.LEFT)
 399:     
 400:     # Store reference for cleanup
 401:     taskbar_instance.snipping_manager = snipping_manager
 402:     
 403:     # Schedule periodic cleanup of temp files
 404:     def cleanup_temp_files():
 405:         snipping_manager.cleanup_temp_directory()
 406:         taskbar_instance.root.after(300000, cleanup_temp_files)  # Every 5 minutes
 407:     
 408:     taskbar_instance.root.after(300000, cleanup_temp_files)
 409:     
 410:     return snipping_manager

────────────────────────────────────────────────────────────────────────────────
FILE: taskbar.py
────────────────────────────────────────────────────────────────────────────────
Path: taskbar.py
Size: 14.0 KB
Lines: 351 total, 278 non-empty
Characters: 14,003
Type: Core taskbar functionality and UI
────────────────────────────────────────────────────────────────────────────────

   1: # taskbar.py (UPDATED)
   2: """
   3: Core taskbar window and layout for SuiteView Taskbar Application
   4: """
   5: 
   6: import tkinter as tk
   7: from tkinter import ttk
   8: import sys
   9: from ctypes import wintypes
  10: 
  11: from config import Colors, Fonts, Dimensions, Settings
  12: from utils import WindowsUtils, UIUtils
  13: from links_manager import LinksManager
  14: from quick_links import QuickLinksMenu
  15: from snip_feature import add_snip_feature_to_taskbar
  16: from folder_inventory import add_folder_inventory_to_taskbar  # UPDATED IMPORT
  17: 
  18: from window_manager import WindowManager
  19: from windows_menu import WindowsMenu
  20: from pinned_windows import PinnedWindowsSection
  21: 
  22: class SuiteViewTaskbar:
  23:     """Main taskbar application window"""
  24:     
  25:     def __init__(self):
  26:         self.root = tk.Tk()
  27:         self.links_manager = LinksManager()
  28:         self.window_manager = WindowManager()
  29: 
  30:         # Store original work area for restoration
  31:         self.original_work_area = WindowsUtils.get_work_area()
  32:         
  33:         # Get screen dimensions
  34:         self.screen_width, self.screen_height = WindowsUtils.get_screen_dimensions()
  35:         
  36:         # Get Windows taskbar height for better positioning
  37:         self.windows_taskbar_height = WindowsUtils.get_windows_taskbar_height()
  38:         
  39:         # Position the custom taskbar above Windows taskbar
  40:         self.y_position = self.screen_height - self.windows_taskbar_height - Dimensions.TASKBAR_HEIGHT
  41:         
  42:         # Setup the window
  43:         self.setup_window()
  44:         
  45:         # Create taskbar content
  46:         self.create_taskbar_content()
  47:         
  48:         # Setup event bindings
  49:         self.bind_events()
  50:         
  51:         # Apply Windows API modifications
  52:         self.setup_windows_integration()
  53:         
  54:         # Track menu state
  55:         self.links_menu = None
  56:         self.windows_menu = None
  57:         self.pinned_section = None
  58:         self.windows_menu_geometry = None  # Add this to store geometry
  59: 
  60:     def toggle_windows_menu(self):
  61:         """Toggle the windows management menu"""
  62:         if self.windows_menu and hasattr(self.windows_menu, 'winfo_exists'):
  63:             try:
  64:                 if self.windows_menu.winfo_exists():
  65:                     # Store current geometry before closing
  66:                     self.windows_menu_geometry = self.windows_menu.get_current_geometry()
  67:                     self.windows_menu.close_window()
  68:                     self.windows_menu = None
  69:                     return
  70:             except:
  71:                 self.windows_menu = None
  72:         
  73:         # Create new windows menu
  74:         self.windows_menu = WindowsMenu(self.root, self.window_manager, 
  75:                                       self.on_windows_pinned,
  76:                                       self.windows_menu_geometry)
  77:         
  78:         # If no stored geometry, position it properly
  79:         if not self.windows_menu_geometry:
  80:             # Update the window to get its actual size
  81:             self.windows_menu.update_idletasks()
  82:             
  83:             # Calculate position - above taskbar, right side
  84:             window_width = self.windows_menu.winfo_reqwidth()
  85:             window_height = self.windows_menu.winfo_reqheight()
  86:             
  87:             x = self.root.winfo_screenwidth() - window_width - 20  # 20px from right edge
  88:             y = self.y_position - window_height - 5  # 5px above taskbar
  89:             
  90:             # Ensure it doesn't go off-screen
  91:             x = max(0, x)
  92:             y = max(0, y)
  93:             
  94:             self.windows_menu.geometry(f"{window_width}x{window_height}+{x}+{y}")
  95:     
  96:     def setup_window(self):
  97:         """Configure the main window properties"""
  98:         # Remove window decorations
  99:         self.root.overrideredirect(True)
 100:         
 101:         # Set window attributes
 102:         self.root.attributes('-topmost', True)
 103:         self.root.attributes('-alpha', Settings.TASKBAR_OPACITY)
 104:         
 105:         # Configure window geometry
 106:         self.root.geometry(f"{self.screen_width}x{Dimensions.TASKBAR_HEIGHT}+0+{self.y_position}")
 107:         
 108:         # Set background color to dark green
 109:         self.root.configure(bg=Colors.DARK_GREEN)
 110:     
 111:     def create_taskbar_content(self):
 112:         """Create the taskbar UI elements"""
 113:         # Create main frame
 114:         self.main_frame = tk.Frame(self.root, bg=Colors.DARK_GREEN, highlightthickness=0)
 115:         self.main_frame.pack(fill=tk.BOTH, expand=True)
 116:         
 117:         # SuiteView Logo/Title
 118:         self.create_logo_section()
 119:         
 120:         # Separator
 121:         separator = UIUtils.create_separator(self.main_frame, Colors.DARK_GREEN, width=2)
 122:         separator.pack(side=tk.LEFT, fill=tk.Y, padx=10)
 123:         
 124:         # Main buttons
 125:         self.create_main_buttons()
 126:         
 127:         # Right side elements
 128:         self.create_right_side_elements()
 129:     
 130:     def create_logo_section(self):
 131:         """Create the SuiteView logo/title section"""
 132:         logo_frame = tk.Frame(self.main_frame, bg=Colors.DARK_GREEN)
 133:         logo_frame.pack(side=tk.LEFT, padx=10)
 134:         
 135:         # Logo text with styling
 136:         logo_label = tk.Label(logo_frame, text=Settings.APP_NAME, bg=Colors.DARK_GREEN, 
 137:                              fg=Colors.WHITE, font=Fonts.TASKBAR_TITLE)
 138:         logo_label.pack()
 139:         logo_label.bind("<Button-3>", self.show_links_menu)
 140:     
 141:     def create_main_buttons(self):
 142:         """Create the main taskbar buttons"""
 143:         # Existing buttons
 144:         buttons_data = [
 145:             ("Get Policy", None),
 146:             ("Cyber", None),
 147:             ("TAI", None)
 148:         ]
 149:         
 150:         for text, command in buttons_data:
 151:             btn = tk.Button(self.main_frame, text=text, bg=Colors.DARK_GREEN, fg=Colors.WHITE,
 152:                         relief=tk.FLAT, font=Fonts.TASKBAR_BUTTON, cursor='hand2',
 153:                         activebackground=Colors.HOVER_GREEN, bd=0, padx=15)
 154:             btn.pack(side=tk.LEFT, padx=5)
 155:             btn.bind("<Button-3>", self.show_links_menu)
 156:             if command:
 157:                 btn.configure(command=command)
 158:         
 159:         # Add separator before new features
 160:         separator = UIUtils.create_separator(self.main_frame, Colors.DARK_GREEN, width=2)
 161:         separator.pack(side=tk.LEFT, fill=tk.Y, padx=10)
 162:         
 163:         # Add Inventory feature
 164:         inventory_btn = add_folder_inventory_to_taskbar(self)
 165:         inventory_btn.pack(side=tk.LEFT, padx=5)
 166:         inventory_btn.bind("<Button-3>", self.show_links_menu)
 167:         
 168:         # Add separator before Snip feature
 169:         separator2 = UIUtils.create_separator(self.main_frame, Colors.DARK_GREEN, width=2)
 170:         separator2.pack(side=tk.LEFT, fill=tk.Y, padx=10)
 171:         
 172:         # Add Snip feature
 173:         self.snipping_manager = add_snip_feature_to_taskbar(self)
 174:         
 175:         # Add separator before pinned windows section
 176:         separator3 = UIUtils.create_separator(self.main_frame, Colors.DARK_GREEN, width=2)
 177:         separator3.pack(side=tk.LEFT, fill=tk.Y, padx=10)
 178:         
 179:         # Create and store pinned windows section - THIS IS THE KEY FIX
 180:         self.pinned_section = PinnedWindowsSection(self.main_frame, self.window_manager)
 181:         self.pinned_section.pack(side=tk.LEFT, fill=tk.Y, padx=5)
 182:         
 183:         # Set minimum width for the section
 184:         self.pinned_section.configure(width=Settings.PINNED_SECTION_WIDTH)
 185:         
 186:         # Debug to confirm it's created
 187:         print(f"Pinned section created: {self.pinned_section}")
 188:     
 189:     def create_right_side_elements(self):
 190:         """Create the right side elements of the taskbar"""
 191:         
 192:         # X close button
 193:         close_btn = tk.Label(self.main_frame, text="X", bg=Colors.DARK_GREEN, fg=Colors.WHITE,
 194:                             font=(Fonts.TASKBAR_BUTTON[0], Fonts.TASKBAR_BUTTON[1], 'bold'), 
 195:                             cursor='hand2')
 196:         close_btn.pack(side=tk.RIGHT, padx=5)
 197:         close_btn.bind("<Button-1>", self.close_app)
 198:     
 199:         #Windows button
 200:         windows_btn = tk.Button(self.main_frame, text="Windows", 
 201:                             bg=Colors.DARK_GREEN, fg=Colors.WHITE,
 202:                             relief=tk.FLAT, font=Fonts.TASKBAR_BUTTON, 
 203:                             cursor='hand2', activebackground=Colors.HOVER_GREEN, 
 204:                             bd=0, padx=15, command=self.toggle_windows_menu)
 205:         windows_btn.pack(side=tk.RIGHT, padx=5)
 206: 
 207:     def bind_events(self):
 208:         """Bind event handlers"""
 209:         # Main window events
 210:         self.root.bind("<Double-Button-1>", self.close_app)
 211:         self.root.bind("<Button-3>", self.show_links_menu)
 212:         self.main_frame.bind("<Button-3>", self.show_links_menu)
 213:         
 214:         # Emergency exit keys
 215:         self.root.bind("<Escape>", self.close_app)
 216:         self.root.bind("<Control-q>", self.close_app)
 217:         self.root.bind("<Control-Q>", self.close_app)
 218:         self.root.bind("<Alt-F4>", self.close_app)
 219:     
 220:     def setup_windows_integration(self):
 221:         """Setup Windows API integration"""
 222:         # Keep window on top using Windows API
 223:         self.set_always_on_top()
 224:         
 225:         # Adjust desktop working area
 226:         self.adjust_work_area()
 227:         
 228:     def show_links_menu(self, event):
 229:         """Show the right-click links menu positioned above the taskbar"""
 230:         if self.links_menu:
 231:             self.links_menu.destroy()
 232:         
 233:         # Create the menu at a temporary position first
 234:         temp_x, temp_y = 0, 0
 235:         self.links_menu = QuickLinksMenu(self.root, self, temp_x, temp_y)
 236:         
 237:         # Get cursor position or use center position
 238:         if event:
 239:             x = self.root.winfo_pointerx() - 200  # Offset to center menu on cursor
 240:         else:
 241:             x = self.screen_width // 2 - 200  # Center horizontally
 242:         
 243:         # Calculate proper position above YOUR custom taskbar
 244:         final_y = self.y_position - self.links_menu.menu_height - 5  # 5px gap above YOUR taskbar
 245:         final_x = x
 246:         
 247:         # Reposition the menu to the correct location
 248:         self.links_menu.geometry(f"+{final_x}+{final_y}")
 249:         
 250:         # Debug output
 251:         print(f"Estimated height: {self.links_menu.menu_height}")
 252:         print(f"Positioned menu at: {final_x}, {final_y}")
 253:         print(f"Menu bottom should be at: {final_y + self.links_menu.menu_height}")
 254:        
 255:     def show_windows_menu(self, event=None):
 256:         """Show the windows management menu - toggle if already open"""
 257:         if self.windows_menu and self.windows_menu.winfo_exists():
 258:             # If menu exists and is open, close it
 259:             self.windows_menu.close_window()
 260:             self.windows_menu = None
 261:         else:
 262:             # Otherwise, create and show it
 263:             # Get screen dimensions
 264:             screen_width = self.root.winfo_screenwidth()
 265:             
 266:             # Position the menu above the taskbar, centered on screen
 267:             x = (screen_width - 700) // 2  # Center a 700px wide menu
 268:             y = self.y_position - 600  # Default height assumption
 269:             
 270:     def set_always_on_top(self):
 271:         """Force window to stay on top using Windows API"""
 272:         WindowsUtils.set_window_topmost(self.root.winfo_id())
 273:     
 274:     def adjust_work_area(self):
 275:         """Adjust desktop work area to make room for taskbar"""
 276:         if self.original_work_area:
 277:             work_area = wintypes.RECT()
 278:             work_area.left = self.original_work_area.left
 279:             work_area.top = self.original_work_area.top
 280:             work_area.right = self.original_work_area.right
 281:             work_area.bottom = self.y_position
 282:             
 283:             success = WindowsUtils.set_work_area(work_area)
 284:             if not success:
 285:                 print("Could not adjust work area. May require admin privileges.")
 286:     
 287:     def close_app(self, event=None):
 288:         """Close the application"""
 289:         try:
 290:             self.window_manager.unhide_all_windows()
 291:             self.restore_work_area()
 292:         except:
 293:             pass  # Don't fail if restore doesn't work
 294:         
 295:         # Clean up snipping manager if it exists
 296:         if hasattr(self, 'snipping_manager'):
 297:             try:
 298:                 self.snipping_manager.cleanup_temp_directory()
 299:             except:
 300:                 pass
 301:         
 302:         # Force kill any open dialogs
 303:         for child in self.root.winfo_children():
 304:             if isinstance(child, tk.Toplevel):
 305:                 child.destroy()
 306:         
 307:         self.root.quit()
 308:         self.root.destroy()
 309:         sys.exit(0)
 310:     
 311:     def restore_work_area(self):
 312:         """Restore original work area"""
 313:         if self.original_work_area:
 314:             WindowsUtils.restore_work_area(self.original_work_area)
 315:     
 316:     def run(self):
 317:         """Start the application"""
 318:         # Start the periodic topmost maintenance
 319:         self.root.after(Settings.AUTO_REFRESH_INTERVAL, self.maintain_topmost)
 320:         
 321:         # Start the main event loop
 322:         self.root.mainloop()
 323:     
 324:     def maintain_topmost(self):
 325:         """Periodically ensure window stays on top"""
 326:         self.set_always_on_top()
 327: 
 328:         # Update pinned window button states
 329:         if self.pinned_section:
 330:             self.pinned_section.update_window_states()
 331: 
 332:         self.root.after(Settings.AUTO_REFRESH_INTERVAL, self.maintain_topmost)
 333: 
 334:     def toggle_windows_menu(self):
 335:         """Toggle the windows management menu"""
 336:         if self.windows_menu and hasattr(self.windows_menu, 'winfo_exists') and self.windows_menu.winfo_exists():
 337:             self.windows_menu.close_window()
 338:             self.windows_menu = None
 339:         else:
 340:             # Position menu above taskbar
 341:             x = self.root.winfo_screenwidth() - 700 - 20  # 20px from right edge
 342:             y = self.y_position - 600 - 5  # Above taskbar
 343:             
 344:             self.windows_menu = WindowsMenu(self.root, self.window_manager, 
 345:                                           self.on_windows_pinned)
 346:             self.windows_menu.geometry(f"+{x}+{y}")
 347:     
 348:     def on_windows_pinned(self):
 349:         """Callback when windows are pinned/unpinned"""
 350:         if self.pinned_section:
 351:             self.pinned_section.refresh()

────────────────────────────────────────────────────────────────────────────────
FILE: ui_components.py
────────────────────────────────────────────────────────────────────────────────
Path: ui_components.py
Size: 28.5 KB
Lines: 741 total, 611 non-empty
Characters: 29,151
Type: Reusable UI components and dialogs
────────────────────────────────────────────────────────────────────────────────

   1: # ui_components.py
   2: """
   3: Shared UI components for SuiteView Taskbar Application
   4: Contains reusable dialogs, custom widgets, and styling functions
   5: """
   6: 
   7: import tkinter as tk
   8: from tkinter import ttk
   9: from config import Colors, Fonts, Dimensions
  10: from utils import UIUtils
  11: 
  12: class CustomDialog(tk.Toplevel):
  13:     """Base class for custom dialogs with consistent styling"""
  14:     
  15:     def __init__(self, parent, title, width=400, height=300, resizable=False):
  16:         super().__init__(parent)
  17:         self.parent = parent
  18:         self.result = None
  19:         
  20:         # Initialize drag variables
  21:         self.is_dragging = False
  22:         self.drag_start_x = 0
  23:         self.drag_start_y = 0
  24:         
  25:         # Initialize topmost maintenance
  26:         self.maintain_topmost_active = True
  27:         
  28:         # Window setup
  29:         self.configure(bg=Colors.DARK_GREEN)
  30:         self.resizable(resizable, resizable)
  31:         self.overrideredirect(True)  # Remove default title bar
  32:         
  33:         # Make dialog modal and always on top
  34:         self.transient(parent)
  35:         self.attributes('-topmost', True)
  36:         self.lift()
  37:         
  38:         # Center on screen
  39:         UIUtils.center_window(self, width, height)
  40:         
  41:         # Main content frame
  42:         self.content_frame = tk.Frame(self, bg=Colors.LIGHT_GREEN, relief=tk.RAISED, bd=2)
  43:         self.content_frame.pack(fill=tk.BOTH, expand=True, padx=3, pady=3)
  44:         
  45:         # Create custom title bar
  46:         self.create_title_bar(title)
  47:         
  48:         # Container for dialog content
  49:         self.dialog_content = tk.Frame(self.content_frame, bg=Colors.LIGHT_GREEN)
  50:         self.dialog_content.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
  51:         
  52:         # Button frame at bottom
  53:         self.button_frame = tk.Frame(self.content_frame, bg=Colors.LIGHT_GREEN, height=50)
  54:         self.button_frame.pack(side=tk.BOTTOM, fill=tk.X, padx=10, pady=10)
  55:         self.button_frame.pack_propagate(False)
  56:         
  57:         # Make modal and ensure it stays on top
  58:         self.grab_set()
  59:         self.focus_force()
  60:         
  61:         # Schedule periodic topmost updates to ensure dialog stays visible
  62:         self.after(100, self._maintain_topmost)
  63:         
  64:         # Pause parent's topmost maintenance if it exists
  65:         if hasattr(parent, 'pause_topmost_maintenance'):
  66:             parent.pause_topmost_maintenance()
  67:         
  68:         # Resume parent's topmost when this dialog is destroyed
  69:         self.protocol("WM_DELETE_WINDOW", self._on_closing)
  70:     
  71:     def create_title_bar(self, title):
  72:         """Create custom title bar with drag functionality"""
  73:         self.title_frame = tk.Frame(self.content_frame, bg=Colors.DARK_GREEN, height=25)
  74:         self.title_frame.pack(fill=tk.X)
  75:         self.title_frame.pack_propagate(False)
  76:         
  77:         # Drag handle (left side)
  78:         drag_handle = tk.Label(self.title_frame, text="⋮⋮⋮", bg=Colors.DARK_GREEN, fg=Colors.WHITE,
  79:                              font=('Arial', 8), cursor='fleur')
  80:         drag_handle.pack(side=tk.LEFT, padx=3, pady=3)
  81:         
  82:         # Title label
  83:         title_label = tk.Label(self.title_frame, text=f"📋 {title}", bg=Colors.DARK_GREEN, fg=Colors.WHITE,
  84:                               font=Fonts.DIALOG_TITLE, cursor='fleur')
  85:         title_label.pack(side=tk.LEFT, padx=5, pady=3)
  86:         
  87:         # Close button
  88:         close_btn = tk.Label(self.title_frame, text="×", bg=Colors.DARK_GREEN, fg=Colors.WHITE,
  89:                            font=('Arial', 12, 'bold'), cursor='hand2')
  90:         close_btn.pack(side=tk.RIGHT, padx=5)
  91:         close_btn.bind("<Button-1>", lambda e: self.cancel())
  92:         
  93:         # Bind drag events to title bar elements
  94:         for widget in [self.title_frame, drag_handle, title_label]:
  95:             widget.bind("<Button-1>", self.start_drag)
  96:             widget.bind("<B1-Motion>", self.do_drag)
  97:             widget.bind("<ButtonRelease-1>", self.end_drag)
  98:             widget.bind("<Enter>", lambda e: self.configure(cursor='fleur'))
  99:             widget.bind("<Leave>", lambda e: self.configure(cursor=''))
 100:         
 101:         return self.title_frame
 102:     
 103:     def add_button(self, text, command, style='primary'):
 104:         """Add a button to the button frame"""
 105:         if style == 'primary':
 106:             bg_color = Colors.DARK_GREEN
 107:         elif style == 'secondary':
 108:             bg_color = Colors.MEDIUM_GREEN
 109:         else:
 110:             bg_color = Colors.INACTIVE_GRAY
 111:         
 112:         button_container = tk.Frame(self.button_frame, bg=Colors.LIGHT_GREEN)
 113:         button_container.pack(expand=True)
 114:         
 115:         btn = tk.Button(button_container, text=text, bg=bg_color, fg=Colors.WHITE,
 116:                        command=command, width=Dimensions.DIALOG_BUTTON_WIDTH, 
 117:                        font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1)
 118:         btn.pack(side=tk.LEFT, padx=5)
 119:         
 120:         return btn
 121:     
 122:     def cancel(self):
 123:         """Cancel the dialog"""
 124:         self.result = None
 125:         self.destroy()
 126:     
 127:     def ok(self):
 128:         """OK button handler - override in subclasses"""
 129:         self.result = True
 130:         self.destroy()
 131:     
 132:     def start_drag(self, event):
 133:         """Start dragging the dialog"""
 134:         self.is_dragging = True
 135:         self.drag_start_x = event.x_root
 136:         self.drag_start_y = event.y_root
 137:         
 138:         # Visual feedback
 139:         self.title_frame.configure(bg=Colors.HOVER_GREEN)
 140:         self.configure(cursor='fleur')
 141:     
 142:     def do_drag(self, event):
 143:         """Handle drag motion"""
 144:         if not self.is_dragging:
 145:             return
 146:         
 147:         # Calculate the distance moved
 148:         delta_x = event.x_root - self.drag_start_x
 149:         delta_y = event.y_root - self.drag_start_y
 150:         
 151:         # Get current position
 152:         current_x = self.winfo_x()
 153:         current_y = self.winfo_y()
 154:         
 155:         # Calculate new position
 156:         new_x = current_x + delta_x
 157:         new_y = current_y + delta_y
 158:         
 159:         # Keep dialog on screen (basic bounds checking)
 160:         screen_width = self.winfo_screenwidth()
 161:         screen_height = self.winfo_screenheight()
 162:         dialog_width = self.winfo_width()
 163:         dialog_height = self.winfo_height()
 164:         
 165:         # Ensure dialog stays on screen
 166:         new_x = max(0, min(new_x, screen_width - dialog_width))
 167:         new_y = max(0, min(new_y, screen_height - dialog_height))
 168:         
 169:         # Move the dialog
 170:         self.geometry(f"+{new_x}+{new_y}")
 171:         
 172:         # Update start position for next move
 173:         self.drag_start_x = event.x_root
 174:         self.drag_start_y = event.y_root
 175:     
 176:     def end_drag(self, event):
 177:         """End dragging operation"""
 178:         self.is_dragging = False
 179:         self.configure(cursor='')
 180:         
 181:         # Remove visual feedback
 182:         self.title_frame.configure(bg=Colors.DARK_GREEN)
 183:     
 184:     def pause_topmost_maintenance(self):
 185:         """Pause the topmost maintenance for this dialog"""
 186:         self.maintain_topmost_active = False
 187:     
 188:     def resume_topmost_maintenance(self):
 189:         """Resume the topmost maintenance for this dialog"""
 190:         self.maintain_topmost_active = True
 191:     
 192:     def _maintain_topmost(self):
 193:         """Periodically ensure dialog stays on top"""
 194:         try:
 195:             if self.winfo_exists() and self.maintain_topmost_active:
 196:                 # Only maintain topmost if no combobox is active to avoid stealing focus
 197:                 focused_widget = self.focus_get()
 198:                 if not (focused_widget and isinstance(focused_widget, ttk.Combobox)):
 199:                     # Check if any combobox in the dialog has focus or is showing dropdown
 200:                     combobox_active = self._has_active_combobox()
 201:                     if not combobox_active:
 202:                         self.lift()
 203:                         self.attributes('-topmost', True)
 204:                 self.after(500, self._maintain_topmost)  # Check every 500ms
 205:             elif self.winfo_exists():
 206:                 # Still schedule next check even if paused
 207:                 self.after(500, self._maintain_topmost)
 208:         except:
 209:             pass  # Dialog has been destroyed
 210:     
 211:     def _has_active_combobox(self):
 212:         """Check if any combobox in the dialog is currently active (dropdown showing)"""
 213:         try:
 214:             # Recursively check all widgets to find active comboboxes
 215:             return self._check_widget_for_active_combobox(self)
 216:         except:
 217:             return False
 218:     
 219:     def _check_widget_for_active_combobox(self, widget):
 220:         """Recursively check widget and its children for active comboboxes"""
 221:         try:
 222:             # Check if current widget is an active combobox
 223:             if isinstance(widget, ttk.Combobox):
 224:                 # Check if combobox has focus or its dropdown is showing
 225:                 if widget.focus_get() == widget:
 226:                     return True
 227:                 # Additional check: see if the combobox state indicates dropdown is open
 228:                 try:
 229:                     if 'pressed' in str(widget.state()) or 'active' in str(widget.state()):
 230:                         return True
 231:                 except:
 232:                     pass
 233:             
 234:             # Check all child widgets
 235:             for child in widget.winfo_children():
 236:                 if self._check_widget_for_active_combobox(child):
 237:                     return True
 238:             
 239:             return False
 240:         except:
 241:             return False
 242:     
 243:     def _on_closing(self):
 244:         """Handle dialog closing"""
 245:         # Resume parent's topmost maintenance
 246:         if hasattr(self.parent, 'resume_topmost_maintenance'):
 247:             self.parent.resume_topmost_maintenance()
 248:         self.destroy()
 249:     
 250:     def destroy(self):
 251:         """Override destroy to clean up properly"""
 252:         # Resume parent's topmost maintenance
 253:         if hasattr(self.parent, 'resume_topmost_maintenance'):
 254:             self.parent.resume_topmost_maintenance()
 255:         super().destroy()
 256: 
 257: class ConfirmationDialog(CustomDialog):
 258:     """Confirmation dialog with Yes/No buttons"""
 259:     
 260:     def __init__(self, parent, title, message, icon="⚠️"):
 261:         super().__init__(parent, title, width=350, height=200)
 262:         
 263:         # Icon and message
 264:         icon_label = tk.Label(self.dialog_content, text=icon, bg=Colors.LIGHT_GREEN,
 265:                              fg=Colors.BLACK, font=Fonts.WARNING_ICON)
 266:         icon_label.pack(pady=10)
 267:         
 268:         message_label = tk.Label(self.dialog_content, text=message, bg=Colors.LIGHT_GREEN,
 269:                                fg=Colors.BLACK, font=Fonts.DIALOG_LABEL, wraplength=300)
 270:         message_label.pack(pady=5)
 271:         
 272:         # Buttons
 273:         self.add_buttons()
 274:         
 275:         # Bind keys
 276:         self.bind('<Return>', lambda e: self.yes())
 277:         self.bind('<Escape>', lambda e: self.no())
 278:     
 279:     def add_buttons(self):
 280:         """Add Yes/No buttons"""
 281:         button_container = tk.Frame(self.button_frame, bg=Colors.LIGHT_GREEN)
 282:         button_container.pack(expand=True)
 283:         
 284:         yes_btn = tk.Button(button_container, text="Yes", bg=Colors.DARK_GREEN, fg=Colors.WHITE,
 285:                            command=self.yes, width=Dimensions.DIALOG_BUTTON_WIDTH,
 286:                            font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1)
 287:         yes_btn.pack(side=tk.LEFT, padx=10)
 288:         
 289:         no_btn = tk.Button(button_container, text="No", bg=Colors.INACTIVE_GRAY, fg=Colors.WHITE,
 290:                           command=self.no, width=Dimensions.DIALOG_BUTTON_WIDTH,
 291:                           font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1)
 292:         no_btn.pack(side=tk.LEFT, padx=10)
 293:         
 294:         # Focus on No button (safer default)
 295:         no_btn.focus_set()
 296:     
 297:     def yes(self):
 298:         """Yes button clicked"""
 299:         self.result = True
 300:         self.destroy()
 301:     
 302:     def no(self):
 303:         """No button clicked"""
 304:         self.result = False
 305:         self.destroy()
 306:     
 307:     @classmethod
 308:     def ask(cls, parent, title, message, icon="⚠️"):
 309:         """Show confirmation dialog and return result"""
 310:         dialog = cls(parent, title, message, icon)
 311:         dialog.lift()
 312:         dialog.focus_force()
 313:         parent.wait_window(dialog)
 314:         return dialog.result
 315: 
 316: class WarningDialog(CustomDialog):
 317:     """Warning dialog with OK button"""
 318:     
 319:     def __init__(self, parent, title, message, icon="⚠️"):
 320:         super().__init__(parent, title, width=380, height=220)
 321:         
 322:         # Icon and message
 323:         icon_label = tk.Label(self.dialog_content, text=icon, bg=Colors.LIGHT_GREEN,
 324:                              fg=Colors.BLACK, font=('Arial', 24))
 325:         icon_label.pack(pady=10)
 326:         
 327:         message_label = tk.Label(self.dialog_content, text=message, bg=Colors.LIGHT_GREEN,
 328:                                fg=Colors.BLACK, font=Fonts.DIALOG_LABEL, wraplength=320)
 329:         message_label.pack(pady=5)
 330:         
 331:         # Buttons
 332:         self.add_buttons()
 333:         
 334:         # Bind keys
 335:         self.bind('<Return>', lambda e: self.ok())
 336:         self.bind('<Escape>', lambda e: self.ok())
 337:     
 338:     def add_buttons(self):
 339:         """Add OK button"""
 340:         button_container = tk.Frame(self.button_frame, bg=Colors.LIGHT_GREEN)
 341:         button_container.pack(expand=True)
 342:         
 343:         ok_btn = tk.Button(button_container, text="OK", bg=Colors.MEDIUM_GREEN, fg=Colors.BLACK,
 344:                           command=self.ok, width=Dimensions.DIALOG_BUTTON_WIDTH,
 345:                           font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1)
 346:         ok_btn.pack(padx=10)
 347:         ok_btn.focus_set()
 348:     
 349:     @classmethod
 350:     def show(cls, parent, title, message, icon="⚠️"):
 351:         """Show warning dialog"""
 352:         dialog = cls(parent, title, message, icon)
 353:         dialog.lift()
 354:         dialog.focus_force()
 355:         dialog.attributes('-topmost', True)
 356:         parent.wait_window(dialog)
 357:         return dialog.result
 358: 
 359: class ErrorDialog(CustomDialog):
 360:     """Error dialog with OK button"""
 361:     
 362:     def __init__(self, parent, title, message, icon="❌"):
 363:         super().__init__(parent, title, width=400, height=240)
 364:         
 365:         # Icon and message
 366:         icon_label = tk.Label(self.dialog_content, text=icon, bg=Colors.LIGHT_GREEN,
 367:                              fg=Colors.BLACK, font=('Arial', 24))
 368:         icon_label.pack(pady=10)
 369:         
 370:         message_label = tk.Label(self.dialog_content, text=message, bg=Colors.LIGHT_GREEN,
 371:                                fg=Colors.BLACK, font=Fonts.DIALOG_LABEL, wraplength=340)
 372:         message_label.pack(pady=5)
 373:         
 374:         # Buttons
 375:         self.add_buttons()
 376:         
 377:         # Bind keys
 378:         self.bind('<Return>', lambda e: self.ok())
 379:         self.bind('<Escape>', lambda e: self.ok())
 380:     
 381:     def add_buttons(self):
 382:         """Add OK button"""
 383:         button_container = tk.Frame(self.button_frame, bg=Colors.LIGHT_GREEN)
 384:         button_container.pack(expand=True)
 385:         
 386:         ok_btn = tk.Button(button_container, text="OK", bg=Colors.INACTIVE_GRAY, fg=Colors.WHITE,
 387:                           command=self.ok, width=Dimensions.DIALOG_BUTTON_WIDTH,
 388:                           font=Fonts.DIALOG_BUTTON, relief=tk.RAISED, bd=1)
 389:         ok_btn.pack(padx=10)
 390:         ok_btn.focus_set()
 391:     
 392:     @classmethod
 393:     def show(cls, parent, title, message, icon="❌"):
 394:         """Show error dialog"""
 395:         dialog = cls(parent, title, message, icon)
 396:         dialog.lift()
 397:         dialog.focus_force()
 398:         dialog.attributes('-topmost', True)
 399:         parent.wait_window(dialog)
 400:         return dialog.result
 401: 
 402: # Updated FormField class (add this to ui_components.py)
 403: 
 404: class FormField:
 405:     """Helper class for creating form fields with clipboard support"""
 406:     
 407:     def __init__(self, parent, label_text, field_type='entry', layout='side-by-side', **kwargs):
 408:         self.frame = tk.Frame(parent, bg=Colors.LIGHT_GREEN)
 409:         self.layout = layout
 410:         
 411:         if layout == 'stacked':
 412:             # Label on top, widget below
 413:             self.label = tk.Label(self.frame, text=label_text, bg=Colors.LIGHT_GREEN, 
 414:                                 fg=Colors.BLACK, font=Fonts.DIALOG_LABEL)
 415:             self.label.pack(anchor='w', pady=(0, 2))
 416:             
 417:             if field_type == 'entry':
 418:                 self.widget = tk.Entry(self.frame, font=Fonts.DIALOG_LABEL, **kwargs)
 419:                 self._bind_clipboard_operations()
 420:             elif field_type == 'combobox':
 421:                 self.widget = ttk.Combobox(self.frame, font=Fonts.DIALOG_LABEL, **kwargs)
 422:                 self._bind_combobox_clipboard_operations()
 423:             elif field_type == 'text':
 424:                 self.widget = tk.Text(self.frame, font=Fonts.DIALOG_LABEL, **kwargs)
 425:                 self._bind_text_clipboard_operations()
 426:             
 427:             self.widget.pack(fill=tk.X, expand=True)
 428:             
 429:         else:
 430:             # Original side-by-side layout
 431:             self.label = tk.Label(self.frame, text=label_text, bg=Colors.LIGHT_GREEN, 
 432:                                 fg=Colors.BLACK, font=Fonts.DIALOG_LABEL)
 433:             self.label.grid(row=0, column=0, padx=5, pady=5, sticky='w')
 434:         
 435:             if field_type == 'entry':
 436:                 self.widget = tk.Entry(self.frame, font=Fonts.DIALOG_LABEL, **kwargs)
 437:                 self._bind_clipboard_operations()
 438:             elif field_type == 'combobox':
 439:                 self.widget = ttk.Combobox(self.frame, font=Fonts.DIALOG_LABEL, **kwargs)
 440:                 self._bind_combobox_clipboard_operations()
 441:             elif field_type == 'text':
 442:                 self.widget = tk.Text(self.frame, font=Fonts.DIALOG_LABEL, **kwargs)
 443:                 self._bind_text_clipboard_operations()
 444:             
 445:             self.widget.grid(row=0, column=1, padx=5, pady=5, sticky='ew')
 446:             self.frame.grid_columnconfigure(1, weight=1)
 447:     
 448:     def _bind_clipboard_operations(self):
 449:         """Bind standard clipboard operations to Entry widget"""
 450:         # Standard Windows/cross-platform shortcuts
 451:         self.widget.bind('<Control-c>', self._copy)
 452:         self.widget.bind('<Control-x>', self._cut)
 453:         self.widget.bind('<Control-v>', self._paste)
 454:         self.widget.bind('<Control-a>', self._select_all)
 455:         
 456:         # Right-click context menu
 457:         self.widget.bind('<Button-3>', self._show_context_menu)
 458:     
 459:     def _bind_combobox_clipboard_operations(self):
 460:         """Bind clipboard operations to Combobox widget"""
 461:         # Comboboxes need special handling since they have different methods
 462:         self.widget.bind('<Control-c>', self._copy_combobox)
 463:         self.widget.bind('<Control-x>', self._cut_combobox)
 464:         self.widget.bind('<Control-v>', self._paste_combobox)
 465:         self.widget.bind('<Control-a>', self._select_all_combobox)
 466:         
 467:         # Right-click context menu
 468:         self.widget.bind('<Button-3>', self._show_combobox_context_menu)
 469:     
 470:     def _bind_text_clipboard_operations(self):
 471:         """Enhance Text widget clipboard operations"""
 472:         # Text widgets already have built-in clipboard support, but we can add context menu
 473:         self.widget.bind('<Button-3>', self._show_text_context_menu)
 474:     
 475:     def _copy(self, event=None):
 476:         """Copy selected text to clipboard"""
 477:         try:
 478:             if self.widget.selection_present():
 479:                 self.widget.clipboard_clear()
 480:                 self.widget.clipboard_append(self.widget.selection_get())
 481:         except tk.TclError:
 482:             pass  # No selection
 483:         return 'break'
 484:     
 485:     def _cut(self, event=None):
 486:         """Cut selected text to clipboard"""
 487:         try:
 488:             if self.widget.selection_present():
 489:                 self.widget.clipboard_clear()
 490:                 self.widget.clipboard_append(self.widget.selection_get())
 491:                 self.widget.delete(tk.SEL_FIRST, tk.SEL_LAST)
 492:         except tk.TclError:
 493:             pass  # No selection
 494:         return 'break'
 495:     
 496:     def _paste(self, event=None):
 497:         """Paste from clipboard"""
 498:         try:
 499:             clipboard_text = self.widget.clipboard_get()
 500:             if self.widget.selection_present():
 501:                 self.widget.delete(tk.SEL_FIRST, tk.SEL_LAST)
 502:             self.widget.insert(tk.INSERT, clipboard_text)
 503:         except tk.TclError:
 504:             pass  # No clipboard content
 505:         return 'break'
 506:     
 507:     def _select_all(self, event=None):
 508:         """Select all text"""
 509:         self.widget.select_range(0, tk.END)
 510:         self.widget.icursor(tk.END)
 511:         return 'break'
 512:     
 513:     def _copy_combobox(self, event=None):
 514:         """Copy from combobox"""
 515:         try:
 516:             if self.widget.selection_present():
 517:                 self.widget.clipboard_clear()
 518:                 self.widget.clipboard_append(self.widget.selection_get())
 519:         except (tk.TclError, AttributeError):
 520:             # Fallback: copy entire value if no selection
 521:             try:
 522:                 self.widget.clipboard_clear()
 523:                 self.widget.clipboard_append(self.widget.get())
 524:             except:
 525:                 pass
 526:         return 'break'
 527:     
 528:     def _cut_combobox(self, event=None):
 529:         """Cut from combobox"""
 530:         try:
 531:             if self.widget.selection_present():
 532:                 self.widget.clipboard_clear()
 533:                 self.widget.clipboard_append(self.widget.selection_get())
 534:                 # For combobox, we can delete selected text
 535:                 start = self.widget.index(tk.SEL_FIRST)
 536:                 end = self.widget.index(tk.SEL_LAST)
 537:                 current_value = self.widget.get()
 538:                 new_value = current_value[:start] + current_value[end:]
 539:                 self.widget.set(new_value)
 540:         except (tk.TclError, AttributeError):
 541:             pass
 542:         return 'break'
 543:     
 544:     def _paste_combobox(self, event=None):
 545:         """Paste to combobox"""
 546:         try:
 547:             clipboard_text = self.widget.clipboard_get()
 548:             if self.widget.selection_present():
 549:                 # Replace selection
 550:                 start = self.widget.index(tk.SEL_FIRST)
 551:                 end = self.widget.index(tk.SEL_LAST)
 552:                 current_value = self.widget.get()
 553:                 new_value = current_value[:start] + clipboard_text + current_value[end:]
 554:                 self.widget.set(new_value)
 555:             else:
 556:                 # Insert at cursor position
 557:                 cursor_pos = self.widget.index(tk.INSERT)
 558:                 current_value = self.widget.get()
 559:                 new_value = current_value[:cursor_pos] + clipboard_text + current_value[cursor_pos:]
 560:                 self.widget.set(new_value)
 561:         except tk.TclError:
 562:             pass
 563:         return 'break'
 564:     
 565:     def _select_all_combobox(self, event=None):
 566:         """Select all text in combobox"""
 567:         try:
 568:             self.widget.selection_range(0, tk.END)
 569:             self.widget.icursor(tk.END)
 570:         except (tk.TclError, AttributeError):
 571:             pass
 572:         return 'break'
 573:     
 574:     def _show_context_menu(self, event):
 575:         """Show right-click context menu for Entry"""
 576:         context_menu = tk.Menu(self.widget, tearoff=0)
 577:         
 578:         # Check if there's a selection
 579:         has_selection = False
 580:         try:
 581:             has_selection = self.widget.selection_present()
 582:         except:
 583:             pass
 584:         
 585:         # Check if clipboard has content
 586:         has_clipboard = False
 587:         try:
 588:             self.widget.clipboard_get()
 589:             has_clipboard = True
 590:         except:
 591:             pass
 592:         
 593:         context_menu.add_command(label="Cut", command=self._cut, 
 594:                                state=tk.NORMAL if has_selection else tk.DISABLED)
 595:         context_menu.add_command(label="Copy", command=self._copy,
 596:                                state=tk.NORMAL if has_selection else tk.DISABLED)
 597:         context_menu.add_command(label="Paste", command=self._paste,
 598:                                state=tk.NORMAL if has_clipboard else tk.DISABLED)
 599:         context_menu.add_separator()
 600:         context_menu.add_command(label="Select All", command=self._select_all)
 601:         
 602:         try:
 603:             context_menu.tk_popup(event.x_root, event.y_root)
 604:         finally:
 605:             context_menu.grab_release()
 606:     
 607:     def _show_combobox_context_menu(self, event):
 608:         """Show right-click context menu for Combobox"""
 609:         context_menu = tk.Menu(self.widget, tearoff=0)
 610:         
 611:         # Check if there's a selection
 612:         has_selection = False
 613:         try:
 614:             has_selection = self.widget.selection_present()
 615:         except:
 616:             pass
 617:         
 618:         # Check if clipboard has content
 619:         has_clipboard = False
 620:         try:
 621:             self.widget.clipboard_get()
 622:             has_clipboard = True
 623:         except:
 624:             pass
 625:         
 626:         context_menu.add_command(label="Cut", command=self._cut_combobox,
 627:                                state=tk.NORMAL if has_selection else tk.DISABLED)
 628:         context_menu.add_command(label="Copy", command=self._copy_combobox,
 629:                                state=tk.NORMAL if (has_selection or self.widget.get()) else tk.DISABLED)
 630:         context_menu.add_command(label="Paste", command=self._paste_combobox,
 631:                                state=tk.NORMAL if has_clipboard else tk.DISABLED)
 632:         context_menu.add_separator()
 633:         context_menu.add_command(label="Select All", command=self._select_all_combobox,
 634:                                state=tk.NORMAL if self.widget.get() else tk.DISABLED)
 635:         
 636:         try:
 637:             context_menu.tk_popup(event.x_root, event.y_root)
 638:         finally:
 639:             context_menu.grab_release()
 640:     
 641:     def _show_text_context_menu(self, event):
 642:         """Show right-click context menu for Text widget"""
 643:         # Text widgets have built-in context menus in some systems,
 644:         # but we can provide a custom one for consistency
 645:         context_menu = tk.Menu(self.widget, tearoff=0)
 646:         
 647:         # Check if there's a selection
 648:         has_selection = False
 649:         try:
 650:             has_selection = bool(self.widget.tag_ranges(tk.SEL))
 651:         except:
 652:             pass
 653:         
 654:         # Check if clipboard has content
 655:         has_clipboard = False
 656:         try:
 657:             self.widget.clipboard_get()
 658:             has_clipboard = True
 659:         except:
 660:             pass
 661:         
 662:         context_menu.add_command(label="Cut", command=lambda: self.widget.event_generate("<<Cut>>"),
 663:                                state=tk.NORMAL if has_selection else tk.DISABLED)
 664:         context_menu.add_command(label="Copy", command=lambda: self.widget.event_generate("<<Copy>>"),
 665:                                state=tk.NORMAL if has_selection else tk.DISABLED)
 666:         context_menu.add_command(label="Paste", command=lambda: self.widget.event_generate("<<Paste>>"),
 667:                                state=tk.NORMAL if has_clipboard else tk.DISABLED)
 668:         context_menu.add_separator()
 669:         context_menu.add_command(label="Select All", command=lambda: self.widget.tag_add(tk.SEL, "1.0", tk.END))
 670:         
 671:         try:
 672:             context_menu.tk_popup(event.x_root, event.y_root)
 673:         finally:
 674:             context_menu.grab_release()
 675:     
 676:     def pack(self, **kwargs):
 677:         self.frame.pack(**kwargs)
 678:         return self
 679:     
 680:     def grid(self, **kwargs):
 681:         self.frame.grid(**kwargs)
 682:         return self
 683:     
 684:     def get(self):
 685:         if hasattr(self.widget, 'get'):
 686:             return self.widget.get()
 687:         return ""
 688:     
 689:     def set(self, value):
 690:         if hasattr(self.widget, 'delete') and hasattr(self.widget, 'insert'):
 691:             self.widget.delete(0, tk.END)
 692:             self.widget.insert(0, value)
 693:         elif hasattr(self.widget, 'set'):
 694:             self.widget.set(value)
 695: 
 696: class StyledButton(tk.Button):
 697:     """Custom styled button"""
 698:     
 699:     def __init__(self, parent, text, style='primary', **kwargs):
 700:         # Set default styling based on style type
 701:         if style == 'primary':
 702:             bg_color = Colors.DARK_GREEN
 703:             fg_color = Colors.WHITE
 704:         elif style == 'secondary':
 705:             bg_color = Colors.MEDIUM_GREEN
 706:             fg_color = Colors.BLACK
 707:         elif style == 'success':
 708:             bg_color = Colors.LIGHT_GREEN
 709:             fg_color = Colors.BLACK
 710:         else:  # 'danger' or other
 711:             bg_color = Colors.INACTIVE_GRAY
 712:             fg_color = Colors.WHITE
 713:         
 714:         defaults = {
 715:             'bg': bg_color,
 716:             'fg': fg_color,
 717:             'font': Fonts.DIALOG_BUTTON,
 718:             'relief': tk.RAISED,
 719:             'bd': 1,
 720:             'cursor': 'hand2',
 721:             'activebackground': Colors.HOVER_GREEN,
 722:             'activeforeground': Colors.WHITE
 723:         }
 724:         
 725:         # Override defaults with provided kwargs
 726:         defaults.update(kwargs)
 727:         
 728:         super().__init__(parent, text=text, **defaults)
 729: 
 730: class CategoryHeader(tk.Frame):
 731:     """Styled category header for lists"""
 732:     
 733:     def __init__(self, parent, title, **kwargs):
 734:         super().__init__(parent, bg=Colors.MEDIUM_GREEN, relief=tk.RAISED, bd=1, **kwargs)
 735:         
 736:         self.title_label = tk.Label(self, text=title, bg=Colors.MEDIUM_GREEN, fg=Colors.BLACK,
 737:                                    font=Fonts.MENU_HEADER, height=1)
 738:         self.title_label.pack(pady=1)
 739:     
 740:     def set_title(self, title):
 741:         self.title_label.config(text=title)

────────────────────────────────────────────────────────────────────────────────
FILE: utils.py
────────────────────────────────────────────────────────────────────────────────
Path: utils.py
Size: 6.1 KB
Lines: 182 total, 160 non-empty
Characters: 6,044
Type: Utility functions and helper classes
────────────────────────────────────────────────────────────────────────────────

   1: # utils.py
   2: """
   3: Utility functions for SuiteView Taskbar Application
   4: Contains Windows API calls, file operations, and common helper functions
   5: """
   6: 
   7: import ctypes
   8: from ctypes import wintypes
   9: import os
  10: import webbrowser
  11: from config import WindowsAPI
  12: 
  13: class WindowsUtils:
  14:     """Windows-specific utility functions"""
  15:     
  16:     @staticmethod
  17:     def get_windows_taskbar_height():
  18:         """Get the height of Windows taskbar"""
  19:         try:
  20:             work_area = wintypes.RECT()
  21:             ctypes.windll.user32.SystemParametersInfoW(
  22:                 WindowsAPI.SPI_GETWORKAREA, 0, ctypes.byref(work_area), 0
  23:             )
  24:             screen_height = ctypes.windll.user32.GetSystemMetrics(1)  # SM_CYSCREEN
  25:             taskbar_height = screen_height - work_area.bottom
  26:             return taskbar_height if taskbar_height > 0 else 40
  27:         except:
  28:             return 40
  29:     
  30:     @staticmethod
  31:     def get_screen_dimensions():
  32:         """Get screen width and height"""
  33:         try:
  34:             width = ctypes.windll.user32.GetSystemMetrics(0)   # SM_CXSCREEN
  35:             height = ctypes.windll.user32.GetSystemMetrics(1)  # SM_CYSCREEN
  36:             return width, height
  37:         except:
  38:             # Fallback values
  39:             return 1920, 1080
  40:     
  41:     @staticmethod
  42:     def set_window_topmost(window_id):
  43:         """Force window to stay on top using Windows API"""
  44:         try:
  45:             hwnd = ctypes.windll.user32.GetParent(window_id)
  46:             ctypes.windll.user32.SetWindowPos(
  47:                 hwnd, WindowsAPI.HWND_TOPMOST, 0, 0, 0, 0, 
  48:                 WindowsAPI.SWP_NOMOVE | WindowsAPI.SWP_NOSIZE
  49:             )
  50:         except:
  51:             pass
  52:     
  53:     @staticmethod
  54:     def get_work_area():
  55:         """Get current desktop work area"""
  56:         work_area = wintypes.RECT()
  57:         try:
  58:             ctypes.windll.user32.SystemParametersInfoW(
  59:                 WindowsAPI.SPI_GETWORKAREA, 0, ctypes.byref(work_area), 0
  60:             )
  61:             return work_area
  62:         except:
  63:             return None
  64:     
  65:     @staticmethod
  66:     def set_work_area(rect):
  67:         """Set desktop work area"""
  68:         try:
  69:             ctypes.windll.user32.SystemParametersInfoW(
  70:                 WindowsAPI.SPI_SETWORKAREA, 0, ctypes.byref(rect), 0
  71:             )
  72:             return True
  73:         except:
  74:             return False
  75:     
  76:     @staticmethod
  77:     def restore_work_area(original_rect):
  78:         """Restore original work area with proper flags"""
  79:         try:
  80:             ctypes.windll.user32.SystemParametersInfoW(
  81:                 WindowsAPI.SPI_SETWORKAREA, 0, ctypes.byref(original_rect), 
  82:                 WindowsAPI.SPIF_SENDCHANGE
  83:             )
  84:             return True
  85:         except:
  86:             return False
  87: 
  88: class FileUtils:
  89:     """File and path utility functions"""
  90:     
  91:     @staticmethod
  92:     def open_path(path, parent=None):
  93:         """Open a file, folder, or URL"""
  94:         try:
  95:             if path.startswith(('http://', 'https://', 'www.')):
  96:                 webbrowser.open(path)
  97:                 return True
  98:             elif os.path.exists(path):
  99:                 os.startfile(path)
 100:                 return True
 101:             else:
 102:                 FileUtils._show_error(parent, "Error", f"Path not found: {path}")
 103:                 return False
 104:         except Exception as e:
 105:             FileUtils._show_error(parent, "Error", f"Could not open: {str(e)}")
 106:             return False
 107:     
 108:     @staticmethod
 109:     def _show_error(parent, title, message):
 110:         """Show error dialog - uses custom dialog if parent provided, fallback to messagebox"""
 111:         if parent:
 112:             try:
 113:                 # Import here to avoid circular imports
 114:                 from ui_components import ErrorDialog
 115:                 ErrorDialog.show(parent, title, message)
 116:             except ImportError:
 117:                 # Fallback to standard messagebox if ui_components not available
 118:                 from tkinter import messagebox
 119:                 messagebox.showerror(title, message)
 120:         else:
 121:             # No parent provided, use console output
 122:             print(f"{title}: {message}")
 123:     
 124:     @staticmethod
 125:     def validate_path(path):
 126:         """Validate if a path exists or is a valid URL"""
 127:         if not path or not path.strip():
 128:             return False
 129:         
 130:         path = path.strip()
 131:         
 132:         # Check if it's a URL
 133:         if path.startswith(('http://', 'https://', 'www.')):
 134:             return True
 135:         
 136:         # Check if file/folder exists
 137:         return os.path.exists(path)
 138: 
 139: class UIUtils:
 140:     """UI-related utility functions"""
 141:     
 142:     @staticmethod
 143:     def center_window(window, width, height):
 144:         """Center a window on screen"""
 145:         screen_width = window.winfo_screenwidth()
 146:         screen_height = window.winfo_screenheight()
 147:         x = (screen_width - width) // 2
 148:         y = (screen_height - height) // 2
 149:         window.geometry(f"{width}x{height}+{x}+{y}")
 150:     
 151:     @staticmethod
 152:     def apply_hover_effect(widget, normal_bg, hover_bg, normal_fg='black', hover_fg='white'):
 153:         """Apply hover effect to a widget"""
 154:         def on_enter(e):
 155:             widget.configure(bg=hover_bg, fg=hover_fg)
 156:             # Apply to children if they exist
 157:             for child in widget.winfo_children():
 158:                 try:
 159:                     child.configure(bg=hover_bg, fg=hover_fg)
 160:                 except:
 161:                     pass
 162:         
 163:         def on_leave(e):
 164:             widget.configure(bg=normal_bg, fg=normal_fg)
 165:             # Apply to children if they exist
 166:             for child in widget.winfo_children():
 167:                 try:
 168:                     child.configure(bg=normal_bg, fg=normal_fg)
 169:                 except:
 170:                     pass
 171:         
 172:         widget.bind("<Enter>", on_enter)
 173:         widget.bind("<Leave>", on_leave)
 174:         
 175:         return on_enter, on_leave
 176:     
 177:     @staticmethod
 178:     def create_separator(parent, bg_color, width=2):
 179:         """Create a vertical separator"""
 180:         import tkinter as tk
 181:         separator = tk.Frame(parent, bg=bg_color, width=width)
 182:         return separator

────────────────────────────────────────────────────────────────────────────────
FILE: window_manager.py
────────────────────────────────────────────────────────────────────────────────
Path: window_manager.py
Size: 9.2 KB
Lines: 242 total, 198 non-empty
Characters: 9,202
Type: .PY file
────────────────────────────────────────────────────────────────────────────────

   1: # window_manager.py
   2: """
   3: Windows detection and management functionality for SuiteView Taskbar
   4: Handles window enumeration, filtering, hiding/showing, and pinning
   5: """
   6: 
   7: import win32gui
   8: import win32api
   9: import win32con
  10: import win32process
  11: import psutil
  12: from typing import List, Dict, Optional
  13: import re
  14: 
  15: class ManagedWindow:
  16:     """Represents a managed window with its state"""
  17:     
  18:     def __init__(self, hwnd: int, title: str, process_name: str):
  19:         self.hwnd = hwnd
  20:         self.title = title
  21:         self.process_name = process_name
  22:         self.app_name = self._extract_app_name()
  23:         self.display_name = self._create_display_name()
  24:         self.is_hidden = False
  25:         self.is_pinned = False
  26:         self.original_ex_style = win32gui.GetWindowLong(hwnd, win32con.GWL_EXSTYLE)
  27:     
  28:     def _extract_app_name(self) -> str:
  29:         """Extract application name from process name"""
  30:         # Remove .exe extension
  31:         app = self.process_name.replace('.exe', '')
  32:         
  33:         # Capitalize common apps
  34:         common_apps = {
  35:             'chrome': 'Chrome',
  36:             'firefox': 'Firefox',
  37:             'winword': 'Word',
  38:             'excel': 'Excel',
  39:             'powerpnt': 'PowerPoint',
  40:             'outlook': 'Outlook',
  41:             'notepad': 'Notepad',
  42:             'notepad++': 'Notepad++',
  43:             'code': 'VS Code',
  44:             'devenv': 'Visual Studio',
  45:             'acrobat': 'Acrobat',
  46:             'acrord32': 'Acrobat Reader'
  47:         }
  48:         
  49:         return common_apps.get(app.lower(), app.title())
  50:     
  51:     def _create_display_name(self) -> str:
  52:         """Create display name in format 'AppName - WindowTitle'"""
  53:         if self.title.startswith(self.app_name):
  54:             # Avoid duplication if app name is already in title
  55:             return self.title
  56:         return f"{self.app_name} - {self.title}"
  57:     
  58:     def hide(self) -> bool:
  59:         """Hide the window (remove from Alt+Tab and taskbar)"""
  60:         try:
  61:             # Get current extended style
  62:             ex_style = win32gui.GetWindowLong(self.hwnd, win32con.GWL_EXSTYLE)
  63:             
  64:             # Add WS_EX_TOOLWINDOW to hide from Alt+Tab and taskbar
  65:             new_ex_style = ex_style | win32con.WS_EX_TOOLWINDOW
  66:             
  67:             # Remove WS_EX_APPWINDOW to ensure it's hidden from taskbar
  68:             new_ex_style = new_ex_style & ~win32con.WS_EX_APPWINDOW
  69:             
  70:             # Apply new style
  71:             win32gui.SetWindowLong(self.hwnd, win32con.GWL_EXSTYLE, new_ex_style)
  72:             
  73:             # Hide the window
  74:             win32gui.ShowWindow(self.hwnd, win32con.SW_HIDE)
  75:             
  76:             self.is_hidden = True
  77:             return True
  78:         except Exception as e:
  79:             print(f"Error hiding window {self.display_name}: {e}")
  80:             return False
  81:     
  82:     def show(self) -> bool:
  83:         """Show the window (restore to Alt+Tab and taskbar)"""
  84:         try:
  85:             # Restore original extended style
  86:             win32gui.SetWindowLong(self.hwnd, win32con.GWL_EXSTYLE, self.original_ex_style)
  87:             
  88:             # Show the window
  89:             win32gui.ShowWindow(self.hwnd, win32con.SW_SHOW)
  90:             
  91:             self.is_hidden = False
  92:             return True
  93:         except Exception as e:
  94:             print(f"Error showing window {self.display_name}: {e}")
  95:             return False
  96:     
  97:     def bring_to_front(self) -> bool:
  98:         """Bring window to front and give it focus"""
  99:         try:
 100:             if self.is_hidden:
 101:                 self.show()
 102:             
 103:             # Bring to front
 104:             win32gui.SetForegroundWindow(self.hwnd)
 105:             win32gui.ShowWindow(self.hwnd, win32con.SW_RESTORE)
 106:             return True
 107:         except Exception as e:
 108:             print(f"Error bringing window to front {self.display_name}: {e}")
 109:             return False
 110:     
 111:     def is_valid(self) -> bool:
 112:         """Check if window still exists"""
 113:         return win32gui.IsWindow(self.hwnd)
 114: 
 115: class WindowManager:
 116:     """Manages window detection, filtering, and state"""
 117:     
 118:     def __init__(self):
 119:         self.managed_windows: Dict[int, ManagedWindow] = {}
 120:         self.excluded_processes = {
 121:             'explorer.exe', 'searchui.exe', 'shellexperiencehost.exe',
 122:             'applicationframehost.exe', 'systemsettings.exe', 'textinputhost.exe',
 123:             'lockapp.exe', 'searchapp.exe', 'startmenuexperiencehost.exe',
 124:             'runtimebroker.exe', 'svchost.exe', 'system', 'registry',
 125:             'smss.exe', 'csrss.exe', 'wininit.exe', 'services.exe',
 126:             'lsass.exe', 'winlogon.exe', 'dwm.exe', 'taskhostw.exe',
 127:             'searchindexer.exe', 'backgroundtaskhost.exe'
 128:         }
 129:     
 130:     def get_relevant_windows(self) -> List[ManagedWindow]:
 131:         """Get all relevant open windows on current desktop"""
 132:         windows = []
 133:         
 134:         def enum_callback(hwnd, _):
 135:             if self._is_relevant_window(hwnd):
 136:                 try:
 137:                     title = win32gui.GetWindowText(hwnd)
 138:                     if title:  # Skip windows with no title
 139:                         _, pid = win32process.GetWindowThreadProcessId(hwnd)
 140:                         process = psutil.Process(pid)
 141:                         process_name = process.name()
 142:                         
 143:                         # Check if we already manage this window
 144:                         if hwnd in self.managed_windows:
 145:                             window = self.managed_windows[hwnd]
 146:                             # Update title in case it changed
 147:                             window.title = title
 148:                             window.display_name = window._create_display_name()
 149:                         else:
 150:                             window = ManagedWindow(hwnd, title, process_name)
 151:                             self.managed_windows[hwnd] = window
 152:                         
 153:                         windows.append(window)
 154:                 except Exception as e:
 155:                     print(f"Error processing window {hwnd}: {e}")
 156:             return True
 157:         
 158:         win32gui.EnumWindows(enum_callback, None)
 159:         
 160:         # Clean up managed windows that no longer exist
 161:         self._cleanup_invalid_windows()
 162:         
 163:         return sorted(windows, key=lambda w: w.display_name.lower())
 164:     
 165:     def _is_relevant_window(self, hwnd: int) -> bool:
 166:         """Check if window is relevant (user-facing, not system)"""
 167:         try:
 168:             # Window must be visible
 169:             if not win32gui.IsWindowVisible(hwnd):
 170:                 return False
 171:             
 172:             # Get window info
 173:             _, pid = win32process.GetWindowThreadProcessId(hwnd)
 174:             process = psutil.Process(pid)
 175:             process_name = process.name().lower()
 176:             
 177:             # Exclude system processes
 178:             if process_name in self.excluded_processes:
 179:                 return False
 180:             
 181:             # Get window style
 182:             style = win32gui.GetWindowLong(hwnd, win32con.GWL_STYLE)
 183:             ex_style = win32gui.GetWindowLong(hwnd, win32con.GWL_EXSTYLE)
 184:             
 185:             # Must be a normal window (not a tool window, unless we made it one)
 186:             if hwnd not in self.managed_windows:
 187:                 if ex_style & win32con.WS_EX_TOOLWINDOW:
 188:                     return False
 189:             
 190:             # Should have a title bar or be a notable window
 191:             if not (style & win32con.WS_CAPTION):
 192:                 # Some apps like Chrome have windows without WS_CAPTION
 193:                 # Check if it's a main window by other criteria
 194:                 if not (ex_style & win32con.WS_EX_APPWINDOW):
 195:                     return False
 196:             
 197:             # Check if it's a main window (not a dialog or popup)
 198:             owner = win32gui.GetWindow(hwnd, win32con.GW_OWNER)
 199:             if owner:
 200:                 return False
 201:             
 202:             return True
 203:             
 204:         except Exception:
 205:             return False
 206:     
 207:     def _cleanup_invalid_windows(self):
 208:         """Remove windows that no longer exist from managed windows"""
 209:         invalid_hwnds = []
 210:         for hwnd, window in self.managed_windows.items():
 211:             if not window.is_valid():
 212:                 invalid_hwnds.append(hwnd)
 213:         
 214:         for hwnd in invalid_hwnds:
 215:             del self.managed_windows[hwnd]
 216:     
 217:     def toggle_window_visibility(self, window: ManagedWindow) -> bool:
 218:         """Toggle window visibility"""
 219:         if window.is_hidden:
 220:             return window.show()
 221:         else:
 222:             return window.hide()
 223:     
 224:     def pin_window(self, window: ManagedWindow):
 225:         """Mark window as pinned"""
 226:         window.is_pinned = True
 227:     
 228:     def unpin_window(self, window: ManagedWindow):
 229:         """Unpin window and ensure it's visible"""
 230:         window.is_pinned = False
 231:         if window.is_hidden:
 232:             window.show()
 233:     
 234:     def unhide_all_windows(self):
 235:         """Unhide all hidden windows (for app cleanup)"""
 236:         for window in self.managed_windows.values():
 237:             if window.is_hidden:
 238:                 window.show()
 239:     
 240:     def get_pinned_windows(self) -> List[ManagedWindow]:
 241:         """Get all currently pinned windows"""
 242:         return [w for w in self.managed_windows.values() if w.is_pinned]

────────────────────────────────────────────────────────────────────────────────
FILE: windows_menu.py
────────────────────────────────────────────────────────────────────────────────
Path: windows_menu.py
Size: 16.6 KB
Lines: 412 total, 335 non-empty
Characters: 16,545
Type: .PY file
────────────────────────────────────────────────────────────────────────────────

   1: # windows_menu.py (complete updated version with persistence and resizing)
   2: """
   3: Windows menu UI for SuiteView Taskbar
   4: Shows list of open windows with hide/pin functionality
   5: """
   6: 
   7: import tkinter as tk
   8: from config import Colors, Fonts, Dimensions
   9: from window_manager import WindowManager, ManagedWindow
  10: from typing import Callable, Optional
  11: 
  12: class WindowsMenu(tk.Toplevel):
  13:     """Windows management menu"""
  14:     
  15:     def __init__(self, parent, window_manager: WindowManager, on_pin_callback: Callable, 
  16:                  stored_geometry: Optional[str] = None):
  17:         super().__init__(parent)
  18:         self.parent = parent
  19:         self.window_manager = window_manager
  20:         self.on_pin_callback = on_pin_callback
  21:         self.stored_geometry = stored_geometry
  22:         
  23:         # Window setup
  24:         self.title("")  # No title for custom window
  25:         self.configure(bg=Colors.DARK_GREEN)
  26:         self.attributes('-topmost', True)
  27:         self.attributes('-alpha', 0.98)
  28:         
  29:         # Important: Make window resizable
  30:         self.resizable(True, True)
  31:         
  32:         # Remove default window decorations for custom look
  33:         self.overrideredirect(True)
  34:         
  35:         # Track window items for updates
  36:         self.window_items = {}
  37:         
  38:         # Resize variables
  39:         self.is_resizing = False
  40:         self.resize_edge = None
  41:         self.resize_start_x = 0
  42:         self.resize_start_y = 0
  43:         self.original_geometry = None
  44:         
  45:         # Main container with visible border
  46:         self.main_frame = tk.Frame(self, bg=Colors.DARK_GREEN, relief=tk.RAISED, bd=3)
  47:         self.main_frame.pack(fill=tk.BOTH, expand=True)
  48:         
  49:         # Create header
  50:         self.create_header()
  51:         
  52:         # Create scrollable content area
  53:         self.create_content_area()
  54:         
  55:         # Create resize handles
  56:         self.create_resize_handles()
  57:         
  58:         # Populate with windows
  59:         self.refresh_window_list()
  60:         
  61:         # Set focus
  62:         self.focus_set()
  63:         
  64:         # Apply stored geometry or default size
  65:         if stored_geometry:
  66:             self.geometry(stored_geometry)
  67:         else:
  68:             # Set default size
  69:             self.geometry("700x600")
  70:         
  71:         # Ensure window is visible
  72:         self.deiconify()
  73:         self.lift()
  74:     
  75:     def create_header(self):
  76:         """Create menu header"""
  77:         header_frame = tk.Frame(self.main_frame, bg=Colors.DARK_GREEN, height=30)
  78:         header_frame.pack(fill=tk.X, padx=1, pady=1)
  79:         header_frame.pack_propagate(False)
  80:         
  81:         # Make header draggable
  82:         header_frame.bind("<Button-1>", self.start_drag)
  83:         header_frame.bind("<B1-Motion>", self.do_drag)
  84:         
  85:         # Title
  86:         title = tk.Label(header_frame, text="🪟 Windows Manager", 
  87:                         bg=Colors.DARK_GREEN, fg=Colors.WHITE,
  88:                         font=Fonts.MENU_HEADER, cursor='fleur')
  89:         title.pack(side=tk.LEFT, padx=10, pady=5)
  90:         title.bind("<Button-1>", self.start_drag)
  91:         title.bind("<B1-Motion>", self.do_drag)
  92:         
  93:         # Refresh button
  94:         refresh_btn = tk.Button(header_frame, text="↻ Refresh", 
  95:                                bg=Colors.MEDIUM_GREEN, fg=Colors.BLACK,
  96:                                relief=tk.RAISED, bd=1, cursor='hand2',
  97:                                font=Fonts.MENU_ITEM, command=self.refresh_window_list)
  98:         refresh_btn.pack(side=tk.RIGHT, padx=10, pady=5)
  99:         
 100:         # Close button
 101:         close_btn = tk.Button(header_frame, text="X", 
 102:                              bg=Colors.MEDIUM_GREEN, fg=Colors.BLACK,
 103:                              relief=tk.RAISED, bd=1, cursor='hand2',
 104:                              font=Fonts.MENU_ITEM, width=3,
 105:                              command=self.close_window)
 106:         close_btn.pack(side=tk.RIGHT, padx=5, pady=5)
 107:     
 108:     def create_resize_handles(self):
 109:         """Create visible resize handles around the window edges"""
 110:         # Make resize handles more visible with a different color
 111:         handle_color = Colors.MEDIUM_GREEN
 112:         corner_size = 15  # Larger for easier grabbing
 113:         edge_width = 8    # Wider for easier grabbing
 114:         
 115:         # Bottom-right corner (most common resize point)
 116:         br_handle = tk.Frame(self, bg=handle_color, cursor='size_nw_se', 
 117:                            width=corner_size, height=corner_size)
 118:         br_handle.place(relx=1.0, rely=1.0, x=-2, y=-2, anchor='se')
 119:         br_handle.bind("<Button-1>", lambda e: self.start_resize(e, 'br'))
 120:         br_handle.bind("<B1-Motion>", self.do_resize)
 121:         br_handle.bind("<ButtonRelease-1>", self.end_resize)
 122:         
 123:         # Add visual indicator on bottom-right corner
 124:         tk.Label(br_handle, text="◢", bg=handle_color, fg=Colors.DARK_GREEN,
 125:                 font=('Arial', 8)).pack(expand=True)
 126:         
 127:         # Bottom edge
 128:         b_handle = tk.Frame(self, bg=Colors.DARK_GREEN, cursor='size_ns', height=edge_width)
 129:         b_handle.place(relx=0.5, rely=1.0, relwidth=0.9, anchor='s')
 130:         b_handle.bind("<Button-1>", lambda e: self.start_resize(e, 'b'))
 131:         b_handle.bind("<B1-Motion>", self.do_resize)
 132:         b_handle.bind("<ButtonRelease-1>", self.end_resize)
 133:         
 134:         # Right edge
 135:         r_handle = tk.Frame(self, bg=Colors.DARK_GREEN, cursor='size_we', width=edge_width)
 136:         r_handle.place(relx=1.0, rely=0.5, relheight=0.9, anchor='e')
 137:         r_handle.bind("<Button-1>", lambda e: self.start_resize(e, 'r'))
 138:         r_handle.bind("<B1-Motion>", self.do_resize)
 139:         r_handle.bind("<ButtonRelease-1>", self.end_resize)
 140:         
 141:         # Top edge
 142:         t_handle = tk.Frame(self, bg=Colors.DARK_GREEN, cursor='size_ns', height=edge_width)
 143:         t_handle.place(relx=0.5, rely=0.0, relwidth=0.9, anchor='n', y=30)  # Below header
 144:         t_handle.bind("<Button-1>", lambda e: self.start_resize(e, 't'))
 145:         t_handle.bind("<B1-Motion>", self.do_resize)
 146:         t_handle.bind("<ButtonRelease-1>", self.end_resize)
 147:         
 148:         # Left edge
 149:         l_handle = tk.Frame(self, bg=Colors.DARK_GREEN, cursor='size_we', width=edge_width)
 150:         l_handle.place(relx=0.0, rely=0.5, relheight=0.9, anchor='w')
 151:         l_handle.bind("<Button-1>", lambda e: self.start_resize(e, 'l'))
 152:         l_handle.bind("<B1-Motion>", self.do_resize)
 153:         l_handle.bind("<ButtonRelease-1>", self.end_resize)
 154:         
 155:         # Other corners
 156:         # Bottom-left
 157:         bl_handle = tk.Frame(self, bg=handle_color, cursor='size_ne_sw', 
 158:                            width=corner_size, height=corner_size)
 159:         bl_handle.place(relx=0.0, rely=1.0, x=2, y=-2, anchor='sw')
 160:         bl_handle.bind("<Button-1>", lambda e: self.start_resize(e, 'bl'))
 161:         bl_handle.bind("<B1-Motion>", self.do_resize)
 162:         bl_handle.bind("<ButtonRelease-1>", self.end_resize)
 163:         
 164:         # Top-right
 165:         tr_handle = tk.Frame(self, bg=handle_color, cursor='size_ne_sw', 
 166:                            width=corner_size, height=corner_size)
 167:         tr_handle.place(relx=1.0, rely=0.0, x=-2, y=2, anchor='ne')
 168:         tr_handle.bind("<Button-1>", lambda e: self.start_resize(e, 'tr'))
 169:         tr_handle.bind("<B1-Motion>", self.do_resize)
 170:         tr_handle.bind("<ButtonRelease-1>", self.end_resize)
 171:         
 172:         # Top-left
 173:         tl_handle = tk.Frame(self, bg=handle_color, cursor='size_nw_se', 
 174:                            width=corner_size, height=corner_size)
 175:         tl_handle.place(relx=0.0, rely=0.0, x=2, y=2, anchor='nw')
 176:         tl_handle.bind("<Button-1>", lambda e: self.start_resize(e, 'tl'))
 177:         tl_handle.bind("<B1-Motion>", self.do_resize)
 178:         tl_handle.bind("<ButtonRelease-1>", self.end_resize)
 179: 
 180:     def start_drag(self, event):
 181:         """Start dragging the window"""
 182:         self.drag_start_x = event.x_root
 183:         self.drag_start_y = event.y_root
 184:         self.original_x = self.winfo_x()
 185:         self.original_y = self.winfo_y()
 186: 
 187:     def do_drag(self, event):
 188:         """Handle window dragging"""
 189:         dx = event.x_root - self.drag_start_x
 190:         dy = event.y_root - self.drag_start_y
 191:         
 192:         new_x = self.original_x + dx
 193:         new_y = self.original_y + dy
 194:         
 195:         # Keep window on screen
 196:         screen_width = self.winfo_screenwidth()
 197:         screen_height = self.winfo_screenheight()
 198:         window_width = self.winfo_width()
 199:         window_height = self.winfo_height()
 200:         
 201:         new_x = max(0, min(new_x, screen_width - window_width))
 202:         new_y = max(0, min(new_y, screen_height - window_height))
 203:         
 204:         self.geometry(f"+{int(new_x)}+{int(new_y)}")
 205:     
 206:     def start_resize(self, event, edge):
 207:         """Start resizing operation"""
 208:         self.is_resizing = True
 209:         self.resize_edge = edge
 210:         self.resize_start_x = event.x_root
 211:         self.resize_start_y = event.y_root
 212:         
 213:         # Store original geometry
 214:         self.original_geometry = {
 215:             'x': self.winfo_x(),
 216:             'y': self.winfo_y(),
 217:             'width': self.winfo_width(),
 218:             'height': self.winfo_height()
 219:         }
 220:         
 221:         # Visual feedback
 222:         self.main_frame.configure(relief=tk.SUNKEN)
 223: 
 224:     def do_resize(self, event):
 225:         """Handle resize drag"""
 226:         if not self.is_resizing or not self.resize_edge:
 227:             return
 228:         
 229:         dx = event.x_root - self.resize_start_x
 230:         dy = event.y_root - self.resize_start_y
 231:         
 232:         x = self.original_geometry['x']
 233:         y = self.original_geometry['y']
 234:         width = self.original_geometry['width']
 235:         height = self.original_geometry['height']
 236:         
 237:         min_width = 400
 238:         min_height = 300
 239:         
 240:         # Handle different resize edges
 241:         if 'r' in self.resize_edge:  # Right edge
 242:             width = max(min_width, width + dx)
 243:         if 'l' in self.resize_edge:  # Left edge
 244:             new_width = max(min_width, width - dx)
 245:             if new_width != width:
 246:                 x = x + (width - new_width)
 247:                 width = new_width
 248:         if 'b' in self.resize_edge:  # Bottom edge
 249:             height = max(min_height, height + dy)
 250:         if 't' in self.resize_edge:  # Top edge
 251:             new_height = max(min_height, height - dy)
 252:             if new_height != height:
 253:                 y = y + (height - new_height)
 254:                 height = new_height
 255:         
 256:         # Apply new geometry
 257:         self.geometry(f"{int(width)}x{int(height)}+{int(x)}+{int(y)}")
 258: 
 259:     def end_resize(self, event):
 260:         """End resizing operation"""
 261:         self.is_resizing = False
 262:         self.resize_edge = None
 263:         
 264:         # Remove visual feedback
 265:         self.main_frame.configure(relief=tk.RAISED)
 266:     
 267:     def create_content_area(self):
 268:         """Create scrollable content area"""
 269:         # Create canvas and scrollbar for scrolling
 270:         self.canvas = tk.Canvas(self.main_frame, bg=Colors.LIGHT_GREEN, 
 271:                                highlightthickness=0)
 272:         scrollbar = tk.Scrollbar(self.main_frame, orient="vertical", 
 273:                                 command=self.canvas.yview)
 274:         self.scrollable_frame = tk.Frame(self.canvas, bg=Colors.LIGHT_GREEN)
 275:         
 276:         self.scrollable_frame.bind(
 277:             "<Configure>",
 278:             lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
 279:         )
 280:         
 281:         self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
 282:         self.canvas.configure(yscrollcommand=scrollbar.set)
 283:         
 284:         self.canvas.pack(side="left", fill="both", expand=True, padx=2, pady=2)
 285:         scrollbar.pack(side="right", fill="y")
 286:         
 287:         # Bind mouse wheel
 288:         self.canvas.bind_all("<MouseWheel>", self._on_mousewheel)
 289:     
 290:     def _on_mousewheel(self, event):
 291:         """Handle mouse wheel scrolling"""
 292:         if self.canvas.winfo_exists():
 293:             self.canvas.yview_scroll(int(-1*(event.delta/120)), "units")
 294:     
 295:     def refresh_window_list(self):
 296:         """Refresh the list of windows"""
 297:         # Clear existing items
 298:         for widget in self.scrollable_frame.winfo_children():
 299:             widget.destroy()
 300:         self.window_items.clear()
 301:         
 302:         # Get current windows
 303:         windows = self.window_manager.get_relevant_windows()
 304:         
 305:         if not windows:
 306:             label = tk.Label(self.scrollable_frame, text="No windows found", 
 307:                            bg=Colors.LIGHT_GREEN, fg=Colors.DARK_GREEN,
 308:                            font=Fonts.MENU_ITEM)
 309:             label.pack(pady=20)
 310:             return
 311:         
 312:         # Create item for each window
 313:         for window in windows:
 314:             self.create_window_item(window)
 315:     
 316:     def create_window_item(self, window: ManagedWindow):
 317:         """Create a single window item in the list"""
 318:         # Item container
 319:         item_frame = tk.Frame(self.scrollable_frame, bg=Colors.LIGHT_GREEN, 
 320:                              relief=tk.RAISED, bd=1)
 321:         item_frame.pack(fill=tk.X, padx=5, pady=2)
 322:         
 323:         # Window name label (clickable to toggle visibility)
 324:         label_bg = Colors.WINDOW_HIDDEN if window.is_hidden else Colors.WINDOW_VISIBLE
 325:         label_fg = Colors.WHITE if window.is_hidden else Colors.BLACK
 326:         
 327:         name_label = tk.Label(item_frame, text=window.display_name, 
 328:                              bg=label_bg, fg=label_fg,
 329:                              font=Fonts.MENU_ITEM, anchor='w',
 330:                              cursor='hand2', padx=5, pady=3)
 331:         name_label.pack(side=tk.LEFT, fill=tk.X, expand=True)
 332:         
 333:         # Bind click to toggle visibility
 334:         name_label.bind("<Button-1>", lambda e: self.toggle_window_visibility(window))
 335:         
 336:         # Pin/Unpin button
 337:         pin_text = "Unpin" if window.is_pinned else "Pin"
 338:         pin_btn = tk.Button(item_frame, text=pin_text, 
 339:                            bg=Colors.PIN_BUTTON_COLOR, fg=Colors.BLACK,
 340:                            relief=tk.RAISED, bd=1, cursor='hand2',
 341:                            font=Fonts.MENU_ITEM, width=6,
 342:                            command=lambda: self.toggle_pin(window))
 343:         pin_btn.pack(side=tk.RIGHT, padx=5, pady=2)
 344:         
 345:         # Store references for updating
 346:         self.window_items[window.hwnd] = {
 347:             'frame': item_frame,
 348:             'label': name_label,
 349:             'pin_btn': pin_btn,
 350:             'window': window
 351:         }
 352:     
 353:     def toggle_window_visibility(self, window: ManagedWindow):
 354:         """Toggle window visibility and update UI"""
 355:         if self.window_manager.toggle_window_visibility(window):
 356:             self.update_window_item(window)
 357:     
 358:     def toggle_pin(self, window: ManagedWindow):
 359:         """Toggle window pin state"""
 360:         print(f"\n=== TOGGLE PIN DEBUG ===")
 361:         print(f"Window: {window.display_name}")
 362:         print(f"Was pinned: {window.is_pinned}")
 363:         
 364:         if window.is_pinned:
 365:             self.window_manager.unpin_window(window)
 366:         else:
 367:             self.window_manager.pin_window(window)
 368:         
 369:         print(f"Now pinned: {window.is_pinned}")
 370:         
 371:         # Notify callback to update taskbar
 372:         if self.on_pin_callback:
 373:             print(f"Calling on_pin_callback: {self.on_pin_callback}")
 374:             self.on_pin_callback()
 375:         else:
 376:             print("ERROR: on_pin_callback is None!")
 377:         
 378:         # Update UI
 379:         self.update_window_item(window)
 380:         
 381:         # List all pinned windows
 382:         pinned = self.window_manager.get_pinned_windows()
 383:         print(f"Total pinned windows: {len(pinned)}")
 384:         for pw in pinned:
 385:             print(f"  - {pw.display_name}")
 386:         print("=== END DEBUG ===\n")
 387:     
 388:     def update_window_item(self, window: ManagedWindow):
 389:         """Update the UI for a specific window item"""
 390:         if window.hwnd not in self.window_items:
 391:             return
 392:         
 393:         item = self.window_items[window.hwnd]
 394:         
 395:         # Update label color based on visibility
 396:         label_bg = Colors.WINDOW_HIDDEN if window.is_hidden else Colors.WINDOW_VISIBLE
 397:         label_fg = Colors.WHITE if window.is_hidden else Colors.BLACK
 398:         item['label'].configure(bg=label_bg, fg=label_fg)
 399:         
 400:         # Update pin button text
 401:         pin_text = "Unpin" if window.is_pinned else "Pin"
 402:         item['pin_btn'].configure(text=pin_text)
 403:     
 404:     def get_current_geometry(self):
 405:         """Get current window geometry string"""
 406:         return self.geometry()
 407:     
 408:     def close_window(self):
 409:         """Close the windows menu"""
 410:         # Unbind mousewheel to prevent errors
 411:         self.canvas.unbind_all("<MouseWheel>")
 412:         self.destroy()

────────────────────────────────────────────────────────────────────────────────
FILE: requirements.txt
────────────────────────────────────────────────────────────────────────────────
Path: requirements.txt
Size: 42.0 B
Lines: 5 total, 5 non-empty
Characters: 38
Type: Python package dependencies
────────────────────────────────────────────────────────────────────────────────

PySide6
pywin32
Pillow
psutil
comtypes


================================================================================
                           EXPORT SUMMARY
================================================================================

Files Processed: 19
Total Size: 234.8 KB
Total Python Lines: 5,898

File Breakdown:
    README.md                  718.0 B (  31 lines)
    browse_choice_dialog.py     7.0 KB ( 187 lines)
    config.py                   2.3 KB (  74 lines)
    enhanced_folder_inventory.py  23.5 KB ( 569 lines)
    explorer_utils.py           8.9 KB ( 226 lines)
    folder_inventory.py        24.5 KB ( 593 lines)
    inventory_view_window.py   21.1 KB ( 498 lines)
    links_manager.py           10.5 KB ( 292 lines)
    main.py                     1.1 KB (  42 lines)
    pinned_windows.py           6.9 KB ( 171 lines)
    quick_links.py             36.3 KB ( 867 lines)
    restore_deskop.py           1.5 KB (  41 lines)
    snip_feature.py            16.1 KB ( 410 lines)
    taskbar.py                 14.0 KB ( 351 lines)
    ui_components.py           28.5 KB ( 741 lines)
    utils.py                    6.1 KB ( 182 lines)
    window_manager.py           9.2 KB ( 242 lines)
    windows_menu.py            16.6 KB ( 412 lines)
    requirements.txt            42.0 B (   5 lines)

================================================================================
                    END OF SUITEVIEW SOURCE CODE
================================================================================
